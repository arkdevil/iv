           ▄▄                  █
          ▀▀▀ Monthly Magazine █ For VirMakers.                  JULY '95
          ▀██ ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀ █ ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀ ▀ ▀▀▀▀▐▀▀▀  █▀▀▀▀▀▀█
           ▐█ █▀▄ █▀▀ ▄▀▀ ▄▀▀ ▄█▄ ▄▀▀ █▀█    ▌ █ ▄▀█ █ ▄▀▀ █▄▄   █ ▐▀▀█ █
            █ █ █ █▀  █▀  █    █  █▀  █ █    █ █ █ █ █ █   █     █   ▐▌ █
            █ ▐ ▐ ▐   ▐▄▄ ▐▄▄  ▐  ▐▄▄ ▐▄▀     ▀█ ▀▄█ ▐ ▐▄▄ ▐▄▄▄  █   █  █
            ▐ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄  █▄▄▄▄▄▄█
           (C) STEALTH group WWide, Box 10, Kiev-148, fUcKRAINE 
 ─────────────────────────────────────────────────────────────────────────────

 ─────────────────────────────────────────────────────────────────────────────
  MAYHEM v1.1
  УНИВЕРСАЛЬНЫЙ НАСТРАИВАЕМЫЙ ГЕНЕРАТОР ПОЛИМОРФНОГО КОДА.


Зачем нужен MAYHEM.
	Это мой первый Mutation. Он написан без заглядывания в другие вирусы,
	это вы поймете, ознакомившись с его структурой. Обычно Mutation пи-
	шут специально под данный код расшифровщика. MAYHEM в этом отношении 
	является универсальным. Это заготовка, к которой можно присоединить
	любой код. Если хотите, сделать мутирующей хоть всю программу. В дан-
	ной версии это будет слишком громоздко, а мутационные изменения не 
	столь большими,- это недостатки, которые будут устранены в следующих
	версиях. В любом случае, MAYHEM будет совершенствоваться независимо
	от кода, который он генерирует, так сказать, в общем виде.
	Эвристические анализаторы совершенствуются, и теперь немыслима M.E.
	без антиэвристических приемов - нет ничего приятного в оценке вашего
	вируса, как "CRYPT", что означает - входной контроль не пройден.

	Когда понадобился трюк с конвейером, ушли считанные минуты, пока я
	вмонтировал его в базу MAYHEM. Это лишний раз говорит об удобстве 
	моего подхода к созданию ME.

Использование: 

	MAYHEM представляет собой самостоятельный участок кода и используется
	в виде ASM-исходного текста.
	Для использования MAYHEM необходимо ознакомиться с принципами ее дей-
	ствия. Это позволит создавать свои полиморфные расшифровщики, исполь-
	зуя MAYHEM или вносить в расшифровщик современные антиэвристические
	приемы, а может, написать собственный ME.

Для достижения полиморфизма MAYHEM применяет :
	1. Изменение состава регистров в одних и тех же коммандах.
	2. Тасовка комманд, от перестановки которых ничего не изменится.
	3. Присутствие незначащих комманд (мусора) в достаточном количестве.

Состав MAYHEM :
	Настраивающий код
	Основная таблица
	Процедуры настройки комманд
	Формирователь мусора

Основу MAYHEM составляет ее база данных.

Формат:	 ADDRESS	DW 	 Адрес процедуры, настраивающей комманду
	 PLACE		DB	 Местонахождение в списке
	 DISTANCE	DB	 Отклонение от места	
	 REALPLACE	DB	 Реальное местонахождение
	 R_GROUP	DB	 Регистровая группа
	 OPERAND	DW       Операнд

Количество полей зависит от числа комманд. 

    Кто не знаком с терминологией баз данных - 
        ADDRESS,PLACE,...,OPERAND- это ПОЛЯ, составляющие ЗАПИСЬ.

Определение групп регистров.
	ME необходимо, чтобы одни и те же комманды каждый раз использовали
	другие регистры. Пусть один раз ключ шифра помещается в AX, другой 
	раз в BP и т.д. 
	Некоторые комманды могут использовать только индексные регистры.

	Итак, существует несколько групп комманд, использующих одни и те же
	регистры ( к примеру "MOV DX,XORKEY" и далее "XOR [],DX" ).
	В нашем случае их 3: УказательМеста, Ключ и Счетчик. (см. РегГр)
	Не все регистры могут использоваться в группах. Регистр SP не подхо-
	дит ни к одной, а группа УказателяМеста может использовать только
	индексные регистры: (BX,BP,SI,DI). 
	Создадим для каждой группы "маску" допустимых регистров, каждый бит
	будет обозначать порядковый номер регистра (см. HEX-представление
	комманд процессора.) 

		Группа 0:   11101000	(BX,BP,SI,DI - индексные)
		Группы 1,2: 11101111	(все кроме SP)

	0 = нельзя использовать, 1 = допускается.

	В процессе уточнения регистров используем маску R_USED, которая 
	не даст использовать уже занятые регистры. 
	В начале эта маска выглдяит как 00010000 - регистр SP запрещен.
		0 = регистр можно задействовать 
		1 = регистр занят другой группой
	Вторая польза от R_USED: формирователь мусора использует ВСЕ незадей-
	ствованные регистры в своих извращениях.

Порядок размещения комманд.
	Пронумеруем по порядку все комманды нашего расшифровщика (0..8).
	Так они стояли бы в обычном шифрованном вирусе, представляя собой 
	жирную маску. Можно ли здесь что-нибудь переставить ? Ага!
	0..2 могут стоять в любом порядке, можно поменять местами 4 и 5.

	Небольшое уточнение:
	6 и 7 должны идти строго друг за другом, и, чтобы мусор между ними
	не изменил флаги, добавим после CMP...- PUSHF, а перед JNE...- POPF.
	Все в порядке.

	Для перетасовки комманд будем использовать два поля в таблице:
	PLACE    - с какого места может находиться комманда, и
	DISTANCE - на сколько может отстоять от PLACE.  "0" означает строгое 
	  	   закрепление на данном месте. 
	Комманды 0,1,2 могут стоять как минимум на позиции 0, и отстоять 
		 максимум на +2. 
	Для комманды 3      : PLACE=3,    DISTANCE=0
		     4,5    : PLACE=4,    DISTANCE=1
		     6,7,8  : PLACE=6,7,8 DISTANCE=0
	
	Не густо, но только применимо к данному коду. Если включить еще 
	пару антиэвристических приемов (см. ниже), то даже без использования
	мусора можно получить сильно отличающиеся расшифровщики.

	Поле REALPLACE заполняется настройщиком :  PLACE+RND(0..DISTANCE).

Размещение результирующей цепочки комманд :
	После всех настроек и вычислений начинается создание нового кода
        по адресу ES:DI.
	Сначала в цепочку добавляются по очереди все комманды с REALPLACE=0,
	затем =1, и т.д.
	Каждая комманда настраивается специальной процедурой. Данные для
	процедуры содержатся тоже в таблице:  РегистроваяГруппа,- по ней 
	получаем регистр, Операнд (если необходимо)
	Вызов процедуры: комманда  CALL [SI].
	После каждой комманды вызывается процедура формирования мусора:
	CALL TRASH, добавляя от 2 до 18 мусорных комманд.

	--=ТАБЛИЦА (1)=--				--=ТАБЛИЦА (1)=--
 Nп/п			      РегГр  PLACE DIST	
   0	MOV SI,OFFSET START	0      0    2 		; начало шифрованного
   1	MOV CX,LENGTH		1      0    2		; длина
   2	MOV DX,XORKEY		2      0    2		; ключ

   3	M1: XOR [SI],DX		0,2    3    0

   4	    ADD SI,2		0      4    1
   5	    SUB CX,2  		1      4    1

   6        CMP CX,0  PUSHF	1      6    0
   7	    POPF  JNE M1               7    0
   8	JMP START                      8    0

-------------
HEX-представление комманд процессора:

	
	Комманда MOV AX,9899 выглядит как B8 99 98.
	Прибавляя 1 к B8, мы получаем это с другим регистром: MOV CX,9899.
	
	Комманда  :	B8 B9 BA BB BC BD BE BF
			   +1 +2 +3 +4 +5 +6 +7
	Регистр   :	AX CX DX BX SP BP SI DI

	Данная инструкция процессора имеет вид:	  10101(000)
							REG=0..7

---------------
Антиэвристические приемы:

	Наиболее действенным является работа с памятью вне области действия
	программы. В частности, с таблицей векторов, куда ни один эвристик 
	писать не запретит. См. вирус DOA.

Не беспокойте TBAV:

	не применяйте мусора типа "CS: MOV AX,DX" или "ES: NOP" - это
        подозрительно. Старайтесь использовать только нормальные комманды.

Перспективы развития полиморфиков:

	В настоящее время все полиморфные вирусы являются излечимыми с помощью
	автоматики - DRWEB и пр. Достаточно только вирусу попасть в руки к
	антивируснику, как он становится добычей "лечилки". 
	В чем разница между вирусами Khizhnyak.555, Khizhnyak.666, 777, 888 и
	т.д. Все имеют различные сигнатуры, и оригинальные байты находятся в
	разных местах у каждого "нового" вируса. Если перепоручить создание
	таких штаммов самому вирусу, то автоматическое лечение станет невоз-
	можным. (Отслеживание передачи управления после возврата оригинальных 
	байт можно несложно замаскировать.) Имеются пока нереализованные идеи.
	
Инсталляция MAYHEM в ваш вирус.

       1. Занесите исходник в любое место.
		(метка начала вируса должна называться START: )
       2. Составляем список комманд, необходимых расшифровщику.

       3. Какие процедуры понадобятся нам для настройки комманд ?

          Если необходимо изменить расшифровщик, помните следующее:
           - SI при входе в процедуру расшифровщика (DEXOR в данном случае)
       	     должен указывать на соответствующую запись в базе.
           - служебная процедура GETREG возвращает номер регистра по группе
           - ES:DI - место назначения сформированной комманды 

       4. Что будет изменено в теле вируса:

	  MAYHEM не формирует переменные расшифровщики и т.п. Это просто фор-
	  мирователь полиморфного кода. Поэтому зашифровщик должен быть напи-
	  сан отдельно от MAYHEM, а в базу данных MAYHEM должны быть вставлены
	  комманды расшифровки.

	  Для EXE-файла:  заголовок должен быть модифицирован после записи
	    тела вируса, так как длина вируса заранее неизвестна. Длину файла
	    после приращения к нему вируса можно узнать так:  Flush_Buffers -
	    функция DOS 68h , затем FSeek EOF (4202h DOS) - новая длина файла.

					Ничего вроде не забыл. Успехов!