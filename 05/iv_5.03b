 
          ▄▄                  █
         ▀▀▀ Monthly Magazine █ For VirMakers.                  FEB '95
 	 ▀██ ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀ █ ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀ ▀ ▀▀▀▀▐▀▀▀  ██▀▀▀██  
	  ▐█ █▀▄ █▀▀ ▄▀▀ ▄▀▀ ▄█▄ ▄▀▀ █▀█    ▌ █ ▄▀█ █ ▄▀▀ █▄▄   ██ ▀▀██
	   █ █ █ █▀  █▀  █    █  █▀  █ █    █ █ █ █ █ █   █     ████ ██
	   █ ▐ ▐ ▐   ▐▄▄ ▐▄▄  ▐  ▐▄▄ ▐▄▀     ▀█ ▀▄█ ▐ ▐▄▄ ▐▄▄▄  ██▄▄▄██
	   ▐ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄ 
	     Copyright , (C),1994-95, by STEALTH group, unLtd.
	     (M)ail: BOX 10, KIEV 148, The CUNTry of fUcKRAINE

		
			ОТЛАДОЧНЫЕ РЕГИСТРЫ 80386
			-------------------------
			Содержание:     - Вступление и обзор
					- Перехват INT 13    (.ASM)
					- Литература

	80386 знаменит не только своим защищенным режимом, в который мы,
 коллеги, все еще никак не перешли. Несколько вещей доступно и в обычном,
 реальном. Такие, как например регистр IDTR, позволяющий сдвинуть таблицу
 векторов с ее священного сидалища 0000:0000 и поместить там, где нам нужно.
 Круто! Экспериментируйте, что-нибудь да и получится. Я же занялся изучением
 отладочных регистров. Покопался в литературе и натоптал такую вот небольшую
 программку. Отмечу, что писать ее пришлось самому, потому как ни одного более
 менее вразумительного исходника я не нашел - ни в книжках, ни в журналах.
 Тем более, никто еще не касался применения такого грозного оружия для защиты
 вирусов. 
	Простое применение отладочных регистров для перехвата INT 13h позволи-
 ло бы иметь 100% уверенность в неуязвимости на сегодняшний день. 

	Но в процессе экспериментов мне пришлось столкнуться с серьезными 
 трудностями, не позволяющими организовать все так хорошо, как хотелось бы.

        Во-первых, программы, использующие защищенный режим, например EMM386,
 переводят машину в виртуальный режим и при обращении к регистрам DRi возника-
 ет Exception 0Dh нарушение защиты,- как известно, DRi доступны в R-режиме или
 с PL=0, а виртуальная машина работает под уровнем привилегий = 3.

	Далее, упоминающийся в литературе флаг RF, находящийся в 16м бите
 регистра EFLAGS. Resume Flag, или Флаг Возобновления, устанавливается в
 стеке при вызове Exception по коду, чтобы после обработки данной ситуации
 она не возникала повторно. Exception возникает перед коммандой, на которую
 указывает отладочный регистр. После возврата из обработчика из стека будут
 вынуты флаги, и, благодаря RF, комманда не вызовет повторную Exception.
 На самом деле это неверно для реального режима, так как в стек заносятся
 не EFLAGS, а просто FLAGS. 16й бит, понятно, туда не попадет, и произойдет
 зацикливание. Для преодоления этого пришлось снимать обработку DR0 и проходить
 один шаг в режиме обычной трассировки, а затем ставить DR0 обратно. 

	Невозможно защитить вектор обработчика INT 01, используя точку остано-
 ва по записи данных, без использования посторонних векторов.
 Допустим, произошла запись по адресу 0000:0004, то есть, сменился наш вектор.
 По какому адресу будет вызвана исключительная ситуация 01 ? Догадываетесь? 

       И, наконец, флаг BD "БиДэ" (Breakpoint Defence). Он возникает перед 
 коммандой, пытающейся изменить один из отладочных регистров. Ничего похожего
 мне наблюдать не удалось. Если хотите, проверить это можно следующим образом:

	Вставьте в обработчик INT 01 (см.ниже) следующий код:
		cmp eax,00002000h
		jz  NothingImp
		int 19h		; проявление срабатывания (можно любое)
		NothingImp:
	Теперь  напишите программку :   xor eax,eax
					mov dr7,eax
					retn

	Откомпилируйте, запустите после той, что дана ниже. 
	Результат:  будут сняты все точки останова и защита (BD) не сработает.
  Возможно, это верно для защищенного режима. Но кто знает...

  Тем не менее, отладочные регистры остаются золотой жилой для исследователей-
  вирмэйкеров и отличным материалом для написания программ, поселяющихся в 
  MBR. К сожалению, я не успел создать что-либо на эту тему, предлагаю это 
  сделать вам - с удовольствием предоставляю этот материал и свои соображения.

  Естественно, что не все процессоры будут согласны с таким бутовым вирусом.
  Выход очень простой:  перед выполнением комманд для 386 перехватите INT 06
  - "Invalid Opcode".  Если возникнет недопустимая комманда, отправьте выпол-
  нение на обычный, 86й код для обычного, 86го вируса.
	Успехов ! Ждем-c !
   
  Итак, отладка.
	
	Процессор обеспечивает три способа отладки:

1. Прерывание пошагового выполнения комманд (INT 1).
----------------------------------------------------
   Условие активации: установлен флаг трассировки TF (Trace или Trap)
                      регистре FLAGS.

   Установка TF: 1)   pushf / pop  ax / or ax,0100H / push ax / POPF
    		 2)   комманда IRET

     После выполнения команды, следующей за установкой TF, произойдет INT 01.
     Инструкция INT 01 - помещает в стек регистр FLAGS (с TF=1)
		       - сбрасывает TF
	               - переходит по адресу обработчика, записанному в
			 таблице векторов по адресу 0000:0004 (IP,CS)   
		       - по комманде IRET происходит переход по сохраненному
			 в стеке адресу (следующей комманды) и восстанавлива-
			 ются старые флаги, позволяя вызвать прерывание после
			 следующей комманды и так после каждой комманы до 
			 сброса флага TF.	

   ПРИМЕНЕНИЕ в вирусах: - нахождение настоящих адресов INT 21h и INT 13h
			   (трассировка до областей DOS и BIOS)
			 - динамическая зашифровка/расшифровка
			 - трассировка программы, загруженной для выполнения,
			   с целью внедрения начиная с некоторой комманды
			   (см. вирус Emmie, внедряющийся со второй комманды)
		
2. Прерывание точки останова (INT 3).
-------------------------------------
   Обычное прерывание, вызывается программно.
   Единственное отличие	от остальных - однобайтовый код операции (0CCh).
   Размер в один байт позволяет заместить любую команду на 0CCh для установки
   точки прерывания (breakpoint). 
   Технология установки Breakpoint'а:
	      - запоминается первый байт замещаемой комманды
	      - данный байт заменяется на 0CCh - при его достижении возникнет
		INT 03
 	Алгоритм обработчика:
	      - сам обработчик
	      -	вернуть на место замещенный на 0CCh байт
 	      - CS:IP в стеке указывает на место сразу после 0CCh
		необходимо изменить IP на адрес замещенной комманды (отнять 1)
	      - сделать IRET (навсегда попрощаться с этой Breakpoint) или...
	      Если необходимо вернуть точку останова назад:
	      - пройти с флагом трассировки один шаг (написать обработчик,
		который вернет 0CCH назад, сбросит TraceFlag, и выполнение
		программы продолжится до следующей инструкции 0CCh, если
		не произойдет ничего пострашнее

   ПРИМЕНЕНИЕ в вирусах: - сплайсинг
			 - рабрасывание по телу вируса для введения в заблужде-
			   ние отадчиков и надоедания отлаживающим и 
			   облаживающим

3.  Отладочные регистры 
-----------------------
	 Начиная с процессора 80386 появились новые, более мощные средства
    отладки. Это - дополнительные регистры  DR0..DR7 , позволяющие обрабаты-
    вать такие исключительные ситуации, как:

    1.  Четыре случая точек останова при достижении CS:IP(EIP) заданных
        значений. 
    2.  По считыванию или записи данных.
    3.  По записи данных.

	Регистры отладки дают возможность определить до четырех различных 
точек останова.  В отличие от программных точек останова (INT 3 и пошаго-
вого выполнения INT 1) данные точки останова являются АППАРАТНЫМИ. 
	Отладочные регистры доступны в реальном режиме, а также в Protected
Mode для уровня привилегий 0.

DR0-3 содержит линейный адрес точки прерывания:   (CS*10H+IP)
      (Линейный адрес может не соответствовать физическому адресу,если раз-
      блокирована постраничная организация памяти)
DR4-5 зарезервированы. ( TASM выдает ошибку при попытке откомпилировать ком-
      манды обращения к ним. )
DR6   регистр статуса 

				      15 14 13	                 3  2  1  0
				      │  │  │      	         │  │  │  │
      0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 BT BS BD 0 0 0 0 0 0 0 0 0 B3 B2 B1 B0
				      │  │  │                    ╛  │  │  │
	      BreakPoint Task Switch ═╛  │  │	                 ═══╛  │  │  
              BreakPoint Single Step ════╛  │                    ══════╛  │
              BreakPoint Defence ═══════════╛                    ═════════╛

     Все средства отладки оперируют обработчиком INT 01 ( Exception 01 ),
     поэтому обработчику INT 01 необходимо знать, по какому случаю он был
     вызван. В регистре DR6 содержится причина вызова.
     Регистр DR6 не сбрасывается аппаратно, поэтому необходимо его очищать
     после каждой обработки Exception, иначе потом мы не узнаем, зачем нас
     звали.

     В 32 битном регистре DR6 использованы 7 бит.
     При возникновении Exception процессор устанавливает в DR6 причину вызова:

	  	BT  -   вызван переключением задачи, в TSS которой бит
			(T)rap (ловушка)=1
		BS  -   старая добрая трассировка - имеет наивысший приоритет:
			когда установлен BS, могут быть установлены и другие
			биты
		BD  -   следующая комманда будет считывать или записывать в
			один из 8 регистров отладки
		B0,B1,B2,B3 -
			произошел Exception по одному из отладочных регистров
 			
DR7  Управляющий Регистр
     Содержит информацию о точках останова (установка, тип)

    30	28   26	 24   22  20   18  16	   12	    8		4	    0
    │	│    │	 │    │	  │    │   │	   │	    │	        │           │ 
 LEN3 RW3 LEN2 RW2 LEN1 RW1 LEN0 RW0 0 0 0 0 0 0 GE LE G3 L3 G2 L2 G1 L1 G0 L0
  
   Gi - Global:  Глобальная точка останова: разрешена для всех задач
   Li - Local :  при переключении задачи процессор сбрасывает все контрольные
		 точки и они больше не действуют
   LE,GE (Local Exact, Global Exact) - Точность контроля.
		 Используются при установке контрольных точек по данным.
		 Не влияют на контрольные точки по коммандам.
		 Одновременно воздействуют на все контрольные точки по данным.
   		 
		 Конвейеризация обеспечивает одновременную обработку нескольких
		 комманд.
		 Из-за конвейеризации контрольная точка по данным часто фикси-
		 руется только после выполнения нескольких комманд, что затруд-
		 няет отладку.
		 Установка GE или LE (для всех или для одной задачи соответст-
		 венно) замедляет внутренние операции процессора для своевре-
		 менного сообщения об Exception.	
   LENi и RWi  - 2х битные поля для контрольных точек по данным.
	  LENi - количество байт (1,2 или 4)
	  RWi  - 00 = по комманде          10 = не определена
		 01 = по записи данных     11 = по считыванию или записи данных


;========================== линия отреза (начало) =============================

;	Данная программа ставит контрольную точку по исполнению кода на
;	входе INT 13 (адрес берется из таблицы векторов), используя регистр
;	DR0.  Обработчик данной исключительной сиуации (далее "exception")
;	издает сигнал BEEP.
;
; 	DISCLAIMER:  - не работает под Virtual Mode (VM Flag=1)
;		     - процессор не ниже 80386, проверки типа нет

.MODEL TINY
.386p
.CODE
 ORG 100h
 START:
;--------------------
      Copyright:		
	mov ah,09
	mov dx,offset CMsg
	int 21h
	jmp short OverCop
	CMsg db '80386 DEBUG REGISTERS AUDIO DEMOGLUK.',0dh,0ah
	     db 'Copyright (C) 1995, by LovinGOD, STEALTH group',0dh,0ah
	     db 'Beeps when Int 13 entry point reached','$'
      OverCop:
;--------------------	
	mov ax,3513h		; Получим адрес INT 13
	int 21h
				; Преобразуем ES:BX в физический адрес 
				; ES*10h+BX, занесем его в EAX 
	xor eax,eax		
	mov ax,es
	mov cl,4
	shl eax,cl
	
	and ebx,0000FFFFh
	add eax,ebx		
	
	mov dr0,eax		; Адрес точки прерывания заносим в DR0

	xor eax,eax		; DR6 - регистр статуса отладочного прерывания
	mov dr6,eax		; Обнулим его

				; DR7 - коммандный для отладочных регистров

	xor eax,eax		; Запрещаем все DR , а также
				; обнуляем LEN0 и RW0, так как наша точка  
				; останова - по исполнению  
	or  al,2		; Установим бит G0 - глобальная точка останова
	mov dr7,eax		

	pushf			; Очистим флаг трассировки (на всякий случай)
	pop ax
	and ah,0FEh
	push ax
	popf

	mov dx,offset Tracer	; Установим обработчик исключительной ситуации
	mov ax,2501h		
	int 21h
	
	mov dx,offset theend	; TSR
	int 27h

▄▄▄  TRACER :▄▄▄▄▄		; Обработчик exception'а

	push bp eax		

	mov bp,sp		
	mov eax,dr6		; регистр статуса
	;* сюда можно вставить проверку на срабатывание BD флага
	test eax,00004000h	; обычная трассировка?
	jz  HardBreak		; 

		; произошло обычное прерывание по TraceFlag, которое
		; было установлено нами для возобновления работы DR0
		; Разрешаем exception по DR0 для дальнейшей работы

	xor eax,eax		
	mov dr6,eax
	or  eax, 00000002h	; Разрешаем exception по DR0
	and eax,0FFF0FFFFh      ; Exception по исполнению кода
	mov dr7,eax		

	and word ptr [bp+0Ah],0FEFFh	; Снимаем флаг трассировки в стеке
	jmp short exitrace

HardBreak:			; Обработчик Exception по DR0

	mov eax,dr6		; Очистка регистра статуса
	xor eax,eax
	mov dr6,eax

	mov eax,dr7
	and eax,0FFFFFFFDh
	mov dr7,eax		; Запрещение exception по DR0, иначе 
				; зациклимся при возврате (ResumeFlag не
				; резЮмит...приходится вручную)

				; То, ради чего мы ставили точку останова
	mov ax,0E07h		; Say "What's a nice fuckin hell! "
	int 10h			; (censored to "BEEP")

;	....			; А тут тако-о-ое, что представить невозможно
;	....			; Совсем не для печати (вставьте сами в меру 
;	....			; своей испорченности

  SetTF:			; устанавливаем обычную трассировку, чтобы
				; потом восстановить работу нашего DR0
	or word ptr [bp+0Ah],0100h	; Walkin thru the condemned place,
					; carryin your flag high !	
  ExiTrace:			
	pop eax bp 	
	iret 

 TheEnd:
 End Start
;============================ линия отреза (конец-длинный, надо отрЕзать) ====

Литература:    1. В.Л. Григорьев "Микропроцессор i486. Архитектура и 
		  программирование", Москва, Гранал, 1993
	       2. К.Паппас, У.Марри "Микропроцессор 80386" Справочник,
		  Москва, Радио и Связь, 1993	
Программы:     1. Пономарев В.В., Прибов А.Г. Обучающая программа по микропро-
		  цессору 80386	

